/// <reference lib="webworker" />

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, cleanupOutdatedCaches } from 'workbox-precaching'
import { registerRoute, NavigationRoute } from 'workbox-routing'
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies'

declare const self: ServiceWorkerGlobalScope

// Take control of all pages under this SW's scope immediately,
// instead of waiting for reload/navigation.
clientsClaim()

// Clean up any previous precache data
cleanupOutdatedCaches()

// Precache all the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching.
precacheAndRoute(self.__WB_MANIFEST)

// Cache Strategy for API calls
registerRoute(
  ({ url }) => url.origin === 'https://orthodontic-api.render.com' || url.pathname.startsWith('/api'),
  new NetworkFirst({
    cacheName: 'api-cache',
    networkTimeoutSeconds: 10,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 60 * 60 * 24, // 24 hours
        purgeOnQuotaError: true,
      }),
    ],
  })
)

// Cache Strategy for Images (Cloudinary & local)
registerRoute(
  ({ request, url }) => 
    request.destination === 'image' || 
    url.origin === 'https://res.cloudinary.com',
  new CacheFirst({
    cacheName: 'images-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 200,
        maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
        purgeOnQuotaError: true,
      }),
    ],
  })
)

// Cache Strategy for Static Assets
registerRoute(
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'font',
  new StaleWhileRevalidate({
    cacheName: 'static-assets',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24 * 7, // 7 days
        purgeOnQuotaError: true,
      }),
    ],
  })
)

// Cache Strategy for Google Fonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com' || url.origin === 'https://fonts.gstatic.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365, // 1 year
        purgeOnQuotaError: true,
      }),
    ],
  })
)

// Navigation Route - Serve app shell for navigation requests
const navigationRoute = new NavigationRoute(({ request }) => {
  // Check if this is a navigation request
  return request.mode === 'navigate'
}, {
  allowlist: [/^\/(?!api)/], // Allow all routes except API routes
  denylist: [/\/api\//, /\/__/], // Deny API routes and special routes
})

registerRoute(navigationRoute)

// Background Sync for offline actions
self.addEventListener('sync', (event) => {
  console.log('Background sync event:', event.tag)
  
  if (event.tag === 'background-sync-photos') {
    event.waitUntil(syncPhotos())
  }
  
  if (event.tag === 'background-sync-patient-data') {
    event.waitUntil(syncPatientData())
  }
  
  if (event.tag === 'background-sync-appointments') {
    event.waitUntil(syncAppointments())
  }
})

// Sync functions
async function syncPhotos() {
  try {
    const cache = await caches.open('pending-uploads')
    const requests = await cache.keys()
    
    for (const request of requests) {
      try {
        const response = await fetch(request.clone())
        if (response.ok) {
          await cache.delete(request)
          console.log('Photo synced successfully')
        }
      } catch (error) {
        console.error('Failed to sync photo:', error)
      }
    }
  } catch (error) {
    console.error('Background sync photos failed:', error)
  }
}

async function syncPatientData() {
  try {
    const cache = await caches.open('pending-patient-updates')
    const requests = await cache.keys()
    
    for (const request of requests) {
      try {
        const response = await fetch(request.clone())
        if (response.ok) {
          await cache.delete(request)
          console.log('Patient data synced successfully')
        }
      } catch (error) {
        console.error('Failed to sync patient data:', error)
      }
    }
  } catch (error) {
    console.error('Background sync patient data failed:', error)
  }
}

async function syncAppointments() {
  try {
    // Sync with existing booking system
    const response = await fetch('/api/sync/appointments', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    })
    
    if (response.ok) {
      console.log('Appointments synced successfully')
    }
  } catch (error) {
    console.error('Failed to sync appointments:', error)
  }
}

// Push Notifications
self.addEventListener('push', (event) => {
  console.log('Push notification received:', event)
  
  const options = {
    badge: '/icons/badge-72x72.png',
    icon: '/icons/icon-192x192.png',
    vibrate: [200, 100, 200],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1,
    },
    actions: [
      {
        action: 'explore',
        title: 'Προβολή',
        icon: '/icons/action-view.png',
      },
      {
        action: 'close',
        title: 'Κλείσιμο',
        icon: '/icons/action-close.png',
      },
    ],
  }
  
  let title = 'Orthodontic App'
  let body = 'Νέα ειδοποίηση'
  
  if (event.data) {
    const data = event.data.json()
    title = data.title || title
    body = data.body || body
    
    if (data.options) {
      Object.assign(options, data.options)
    }
  }
  
  event.waitUntil(
    self.registration.showNotification(title, {
      body,
      ...options,
    })
  )
})

// Notification Click Handler
self.addEventListener('notificationclick', (event) => {
  console.log('Notification click received:', event)
  
  event.notification.close()
  
  // Handle different actions
  if (event.action === 'explore') {
    event.waitUntil(
      clients.openWindow('/dashboard')
    )
  } else if (event.action === 'close') {
    // Just close the notification
    return
  } else {
    // Default action - open the app
    event.waitUntil(
      clients.matchAll({ type: 'window' }).then((clientList) => {
        // Check if app is already open
        for (const client of clientList) {
          if (client.url.includes('/dashboard') && 'focus' in client) {
            return client.focus()
          }
        }
        
        // Open new window if app is not open
        if (clients.openWindow) {
          return clients.openWindow('/dashboard')
        }
      })
    )
  }
})

// Handle offline fallback
self.addEventListener('fetch', (event) => {
  // Only handle navigation requests that aren't handled by other strategies
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        // Return offline page if available
        return caches.match('/offline.html') || 
               caches.match('/') ||
               new Response('Offline - Please check your connection', {
                 status: 200,
                 headers: { 'Content-Type': 'text/html' }
               })
      })
    )
  }
})

// Message handling from main thread
self.addEventListener('message', (event) => {
  console.log('Service Worker received message:', event.data)
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({ version: '1.0.0' })
  }
  
  if (event.data && event.data.type === 'CACHE_PHOTOS') {
    event.waitUntil(cachePhotos(event.data.photos))
  }
})

// Cache photos for offline access
async function cachePhotos(photos: string[]) {
  try {
    const cache = await caches.open('patient-photos')
    await cache.addAll(photos)
    console.log('Photos cached for offline access')
  } catch (error) {
    console.error('Failed to cache photos:', error)
  }
}

// Install event
self.addEventListener('install', (event) => {
  console.log('Service Worker installing')
  
  // Cache essential offline resources
  event.waitUntil(
    caches.open('offline-essentials').then((cache) => {
      return cache.addAll([
        '/',
        '/offline.html',
        '/icons/icon-192x192.png',
        '/manifest.json',
      ])
    })
  )
  
  // Skip waiting to activate immediately
  self.skipWaiting()
})

// Activate event
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating')
  
  // Clean up old caches
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName.startsWith('orthodontic-') && 
              !cacheName.includes('v1.0.0')) {
            console.log('Deleting old cache:', cacheName)
            return caches.delete(cacheName)
          }
        })
      )
    })
  )
  
  // Take control of all pages
  event.waitUntil(clients.claim())
})

// Error handling
self.addEventListener('error', (event) => {
  console.error('Service Worker error:', event.error)
})

self.addEventListener('unhandledrejection', (event) => {
  console.error('Service Worker unhandled rejection:', event.reason)
})