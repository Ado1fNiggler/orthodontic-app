
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Photo
 * 
 */
export type Photo = $Result.DefaultSelection<Prisma.$PhotoPayload>
/**
 * Model TreatmentPlan
 * 
 */
export type TreatmentPlan = $Result.DefaultSelection<Prisma.$TreatmentPlanPayload>
/**
 * Model TreatmentPhase
 * 
 */
export type TreatmentPhase = $Result.DefaultSelection<Prisma.$TreatmentPhasePayload>
/**
 * Model ClinicalNote
 * 
 */
export type ClinicalNote = $Result.DefaultSelection<Prisma.$ClinicalNotePayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model Setting
 * 
 */
export type Setting = $Result.DefaultSelection<Prisma.$SettingPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  ASSISTANT: 'ASSISTANT'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const PhotoCategory: {
  INTRAORAL: 'INTRAORAL',
  EXTRAORAL: 'EXTRAORAL',
  RADIOGRAPH: 'RADIOGRAPH',
  MODELS: 'MODELS',
  CLINICAL: 'CLINICAL',
  PROGRESS: 'PROGRESS',
  FINAL: 'FINAL'
};

export type PhotoCategory = (typeof PhotoCategory)[keyof typeof PhotoCategory]


export const TreatmentComplexity: {
  SIMPLE: 'SIMPLE',
  MODERATE: 'MODERATE',
  COMPLEX: 'COMPLEX',
  SEVERE: 'SEVERE'
};

export type TreatmentComplexity = (typeof TreatmentComplexity)[keyof typeof TreatmentComplexity]


export const TreatmentStatus: {
  PLANNING: 'PLANNING',
  ACTIVE: 'ACTIVE',
  ON_HOLD: 'ON_HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type TreatmentStatus = (typeof TreatmentStatus)[keyof typeof TreatmentStatus]


export const PhaseStatus: {
  PLANNED: 'PLANNED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  PAUSED: 'PAUSED',
  CANCELLED: 'CANCELLED'
};

export type PhaseStatus = (typeof PhaseStatus)[keyof typeof PhaseStatus]


export const NoteType: {
  CONSULTATION: 'CONSULTATION',
  EXAMINATION: 'EXAMINATION',
  TREATMENT: 'TREATMENT',
  FOLLOW_UP: 'FOLLOW_UP',
  EMERGENCY: 'EMERGENCY',
  GENERAL: 'GENERAL'
};

export type NoteType = (typeof NoteType)[keyof typeof NoteType]


export const AppointmentType: {
  CONSULTATION: 'CONSULTATION',
  EXAMINATION: 'EXAMINATION',
  TREATMENT: 'TREATMENT',
  FOLLOW_UP: 'FOLLOW_UP',
  EMERGENCY: 'EMERGENCY',
  REVIEW: 'REVIEW'
};

export type AppointmentType = (typeof AppointmentType)[keyof typeof AppointmentType]


export const AppointmentStatus: {
  SCHEDULED: 'SCHEDULED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const PaymentMethod: {
  CASH: 'CASH',
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CHECK: 'CHECK',
  INSURANCE: 'INSURANCE',
  OTHER: 'OTHER'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentStatus: {
  PENDING: 'PENDING',
  PAID: 'PAID',
  PARTIAL: 'PARTIAL',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type PhotoCategory = $Enums.PhotoCategory

export const PhotoCategory: typeof $Enums.PhotoCategory

export type TreatmentComplexity = $Enums.TreatmentComplexity

export const TreatmentComplexity: typeof $Enums.TreatmentComplexity

export type TreatmentStatus = $Enums.TreatmentStatus

export const TreatmentStatus: typeof $Enums.TreatmentStatus

export type PhaseStatus = $Enums.PhaseStatus

export const PhaseStatus: typeof $Enums.PhaseStatus

export type NoteType = $Enums.NoteType

export const NoteType: typeof $Enums.NoteType

export type AppointmentType = $Enums.AppointmentType

export const AppointmentType: typeof $Enums.AppointmentType

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): Prisma.PhotoDelegate<ExtArgs>;

  /**
   * `prisma.treatmentPlan`: Exposes CRUD operations for the **TreatmentPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TreatmentPlans
    * const treatmentPlans = await prisma.treatmentPlan.findMany()
    * ```
    */
  get treatmentPlan(): Prisma.TreatmentPlanDelegate<ExtArgs>;

  /**
   * `prisma.treatmentPhase`: Exposes CRUD operations for the **TreatmentPhase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TreatmentPhases
    * const treatmentPhases = await prisma.treatmentPhase.findMany()
    * ```
    */
  get treatmentPhase(): Prisma.TreatmentPhaseDelegate<ExtArgs>;

  /**
   * `prisma.clinicalNote`: Exposes CRUD operations for the **ClinicalNote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClinicalNotes
    * const clinicalNotes = await prisma.clinicalNote.findMany()
    * ```
    */
  get clinicalNote(): Prisma.ClinicalNoteDelegate<ExtArgs>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;

  /**
   * `prisma.setting`: Exposes CRUD operations for the **Setting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.setting.findMany()
    * ```
    */
  get setting(): Prisma.SettingDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Patient: 'Patient',
    Photo: 'Photo',
    TreatmentPlan: 'TreatmentPlan',
    TreatmentPhase: 'TreatmentPhase',
    ClinicalNote: 'ClinicalNote',
    Appointment: 'Appointment',
    Payment: 'Payment',
    Setting: 'Setting'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "patient" | "photo" | "treatmentPlan" | "treatmentPhase" | "clinicalNote" | "appointment" | "payment" | "setting"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Photo: {
        payload: Prisma.$PhotoPayload<ExtArgs>
        fields: Prisma.PhotoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PhotoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PhotoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findFirst: {
            args: Prisma.PhotoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PhotoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          findMany: {
            args: Prisma.PhotoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>[]
          }
          create: {
            args: Prisma.PhotoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          createMany: {
            args: Prisma.PhotoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PhotoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>[]
          }
          delete: {
            args: Prisma.PhotoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          update: {
            args: Prisma.PhotoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          deleteMany: {
            args: Prisma.PhotoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PhotoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PhotoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PhotoPayload>
          }
          aggregate: {
            args: Prisma.PhotoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePhoto>
          }
          groupBy: {
            args: Prisma.PhotoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PhotoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PhotoCountArgs<ExtArgs>
            result: $Utils.Optional<PhotoCountAggregateOutputType> | number
          }
        }
      }
      TreatmentPlan: {
        payload: Prisma.$TreatmentPlanPayload<ExtArgs>
        fields: Prisma.TreatmentPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>
          }
          findFirst: {
            args: Prisma.TreatmentPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>
          }
          findMany: {
            args: Prisma.TreatmentPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>[]
          }
          create: {
            args: Prisma.TreatmentPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>
          }
          createMany: {
            args: Prisma.TreatmentPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>[]
          }
          delete: {
            args: Prisma.TreatmentPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>
          }
          update: {
            args: Prisma.TreatmentPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>
          }
          deleteMany: {
            args: Prisma.TreatmentPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TreatmentPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPlanPayload>
          }
          aggregate: {
            args: Prisma.TreatmentPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatmentPlan>
          }
          groupBy: {
            args: Prisma.TreatmentPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentPlanCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentPlanCountAggregateOutputType> | number
          }
        }
      }
      TreatmentPhase: {
        payload: Prisma.$TreatmentPhasePayload<ExtArgs>
        fields: Prisma.TreatmentPhaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TreatmentPhaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TreatmentPhaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>
          }
          findFirst: {
            args: Prisma.TreatmentPhaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TreatmentPhaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>
          }
          findMany: {
            args: Prisma.TreatmentPhaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>[]
          }
          create: {
            args: Prisma.TreatmentPhaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>
          }
          createMany: {
            args: Prisma.TreatmentPhaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TreatmentPhaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>[]
          }
          delete: {
            args: Prisma.TreatmentPhaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>
          }
          update: {
            args: Prisma.TreatmentPhaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>
          }
          deleteMany: {
            args: Prisma.TreatmentPhaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TreatmentPhaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TreatmentPhaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TreatmentPhasePayload>
          }
          aggregate: {
            args: Prisma.TreatmentPhaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTreatmentPhase>
          }
          groupBy: {
            args: Prisma.TreatmentPhaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<TreatmentPhaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.TreatmentPhaseCountArgs<ExtArgs>
            result: $Utils.Optional<TreatmentPhaseCountAggregateOutputType> | number
          }
        }
      }
      ClinicalNote: {
        payload: Prisma.$ClinicalNotePayload<ExtArgs>
        fields: Prisma.ClinicalNoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicalNoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicalNoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>
          }
          findFirst: {
            args: Prisma.ClinicalNoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicalNoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>
          }
          findMany: {
            args: Prisma.ClinicalNoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>[]
          }
          create: {
            args: Prisma.ClinicalNoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>
          }
          createMany: {
            args: Prisma.ClinicalNoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClinicalNoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>[]
          }
          delete: {
            args: Prisma.ClinicalNoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>
          }
          update: {
            args: Prisma.ClinicalNoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>
          }
          deleteMany: {
            args: Prisma.ClinicalNoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicalNoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClinicalNoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClinicalNotePayload>
          }
          aggregate: {
            args: Prisma.ClinicalNoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClinicalNote>
          }
          groupBy: {
            args: Prisma.ClinicalNoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClinicalNoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicalNoteCountArgs<ExtArgs>
            result: $Utils.Optional<ClinicalNoteCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      Setting: {
        payload: Prisma.$SettingPayload<ExtArgs>
        fields: Prisma.SettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findFirst: {
            args: Prisma.SettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          findMany: {
            args: Prisma.SettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          create: {
            args: Prisma.SettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          createMany: {
            args: Prisma.SettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>[]
          }
          delete: {
            args: Prisma.SettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          update: {
            args: Prisma.SettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          deleteMany: {
            args: Prisma.SettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingPayload>
          }
          aggregate: {
            args: Prisma.SettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetting>
          }
          groupBy: {
            args: Prisma.SettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SettingCountArgs<ExtArgs>
            result: $Utils.Optional<SettingCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    patients: number
    treatmentPlans: number
    clinicalNotes: number
    payments: number
    createdPhotos: number
    createdAppointments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patients?: boolean | UserCountOutputTypeCountPatientsArgs
    treatmentPlans?: boolean | UserCountOutputTypeCountTreatmentPlansArgs
    clinicalNotes?: boolean | UserCountOutputTypeCountClinicalNotesArgs
    payments?: boolean | UserCountOutputTypeCountPaymentsArgs
    createdPhotos?: boolean | UserCountOutputTypeCountCreatedPhotosArgs
    createdAppointments?: boolean | UserCountOutputTypeCountCreatedAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTreatmentPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicalNoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    photos: number
    treatmentPlans: number
    appointments: number
    clinicalNotes: number
    payments: number
    treatmentPhases: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | PatientCountOutputTypeCountPhotosArgs
    treatmentPlans?: boolean | PatientCountOutputTypeCountTreatmentPlansArgs
    appointments?: boolean | PatientCountOutputTypeCountAppointmentsArgs
    clinicalNotes?: boolean | PatientCountOutputTypeCountClinicalNotesArgs
    payments?: boolean | PatientCountOutputTypeCountPaymentsArgs
    treatmentPhases?: boolean | PatientCountOutputTypeCountTreatmentPhasesArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountTreatmentPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentPlanWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountClinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicalNoteWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountTreatmentPhasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentPhaseWhereInput
  }


  /**
   * Count Type TreatmentPlanCountOutputType
   */

  export type TreatmentPlanCountOutputType = {
    phases: number
    clinicalNotes: number
    appointments: number
    payments: number
  }

  export type TreatmentPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    phases?: boolean | TreatmentPlanCountOutputTypeCountPhasesArgs
    clinicalNotes?: boolean | TreatmentPlanCountOutputTypeCountClinicalNotesArgs
    appointments?: boolean | TreatmentPlanCountOutputTypeCountAppointmentsArgs
    payments?: boolean | TreatmentPlanCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * TreatmentPlanCountOutputType without action
   */
  export type TreatmentPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlanCountOutputType
     */
    select?: TreatmentPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreatmentPlanCountOutputType without action
   */
  export type TreatmentPlanCountOutputTypeCountPhasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentPhaseWhereInput
  }

  /**
   * TreatmentPlanCountOutputType without action
   */
  export type TreatmentPlanCountOutputTypeCountClinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicalNoteWhereInput
  }

  /**
   * TreatmentPlanCountOutputType without action
   */
  export type TreatmentPlanCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * TreatmentPlanCountOutputType without action
   */
  export type TreatmentPlanCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type TreatmentPhaseCountOutputType
   */

  export type TreatmentPhaseCountOutputType = {
    photos: number
    clinicalNotes: number
    appointments: number
  }

  export type TreatmentPhaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | TreatmentPhaseCountOutputTypeCountPhotosArgs
    clinicalNotes?: boolean | TreatmentPhaseCountOutputTypeCountClinicalNotesArgs
    appointments?: boolean | TreatmentPhaseCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * TreatmentPhaseCountOutputType without action
   */
  export type TreatmentPhaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhaseCountOutputType
     */
    select?: TreatmentPhaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TreatmentPhaseCountOutputType without action
   */
  export type TreatmentPhaseCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
  }

  /**
   * TreatmentPhaseCountOutputType without action
   */
  export type TreatmentPhaseCountOutputTypeCountClinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicalNoteWhereInput
  }

  /**
   * TreatmentPhaseCountOutputType without action
   */
  export type TreatmentPhaseCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type AppointmentCountOutputType
   */

  export type AppointmentCountOutputType = {
    photos: number
    clinicalNotes: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    photos?: boolean | AppointmentCountOutputTypeCountPhotosArgs
    clinicalNotes?: boolean | AppointmentCountOutputTypeCountClinicalNotesArgs
  }

  // Custom InputTypes
  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountClinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicalNoteWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.UserRole
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patients?: boolean | User$patientsArgs<ExtArgs>
    treatmentPlans?: boolean | User$treatmentPlansArgs<ExtArgs>
    clinicalNotes?: boolean | User$clinicalNotesArgs<ExtArgs>
    payments?: boolean | User$paymentsArgs<ExtArgs>
    createdPhotos?: boolean | User$createdPhotosArgs<ExtArgs>
    createdAppointments?: boolean | User$createdAppointmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patients?: boolean | User$patientsArgs<ExtArgs>
    treatmentPlans?: boolean | User$treatmentPlansArgs<ExtArgs>
    clinicalNotes?: boolean | User$clinicalNotesArgs<ExtArgs>
    payments?: boolean | User$paymentsArgs<ExtArgs>
    createdPhotos?: boolean | User$createdPhotosArgs<ExtArgs>
    createdAppointments?: boolean | User$createdAppointmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      patients: Prisma.$PatientPayload<ExtArgs>[]
      treatmentPlans: Prisma.$TreatmentPlanPayload<ExtArgs>[]
      clinicalNotes: Prisma.$ClinicalNotePayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      createdPhotos: Prisma.$PhotoPayload<ExtArgs>[]
      createdAppointments: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      role: $Enums.UserRole
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patients<T extends User$patientsArgs<ExtArgs> = {}>(args?: Subset<T, User$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany"> | Null>
    treatmentPlans<T extends User$treatmentPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$treatmentPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findMany"> | Null>
    clinicalNotes<T extends User$clinicalNotesArgs<ExtArgs> = {}>(args?: Subset<T, User$clinicalNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findMany"> | Null>
    payments<T extends User$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    createdPhotos<T extends User$createdPhotosArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPhotosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findMany"> | Null>
    createdAppointments<T extends User$createdAppointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAppointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.patients
   */
  export type User$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.treatmentPlans
   */
  export type User$treatmentPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    where?: TreatmentPlanWhereInput
    orderBy?: TreatmentPlanOrderByWithRelationInput | TreatmentPlanOrderByWithRelationInput[]
    cursor?: TreatmentPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentPlanScalarFieldEnum | TreatmentPlanScalarFieldEnum[]
  }

  /**
   * User.clinicalNotes
   */
  export type User$clinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    where?: ClinicalNoteWhereInput
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    cursor?: ClinicalNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * User.payments
   */
  export type User$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * User.createdPhotos
   */
  export type User$createdPhotosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * User.createdAppointments
   */
  export type User$createdAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    city: string | null
    postalCode: string | null
    country: string | null
    allergies: string | null
    medications: string | null
    referralSource: string | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    city: string | null
    postalCode: string | null
    country: string | null
    allergies: string | null
    medications: string | null
    referralSource: string | null
    isActive: boolean | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phone: number
    dateOfBirth: number
    gender: number
    address: number
    city: number
    postalCode: number
    country: number
    medicalHistory: number
    allergies: number
    medications: number
    emergencyContact: number
    insuranceInfo: number
    orthodonticHistory: number
    referralSource: number
    isActive: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    city?: true
    postalCode?: true
    country?: true
    allergies?: true
    medications?: true
    referralSource?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    city?: true
    postalCode?: true
    country?: true
    allergies?: true
    medications?: true
    referralSource?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    dateOfBirth?: true
    gender?: true
    address?: true
    city?: true
    postalCode?: true
    country?: true
    medicalHistory?: true
    allergies?: true
    medications?: true
    emergencyContact?: true
    insuranceInfo?: true
    orthodonticHistory?: true
    referralSource?: true
    isActive?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string | null
    phone: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    address: string | null
    city: string | null
    postalCode: string | null
    country: string | null
    medicalHistory: JsonValue | null
    allergies: string | null
    medications: string | null
    emergencyContact: JsonValue | null
    insuranceInfo: JsonValue | null
    orthodonticHistory: JsonValue | null
    referralSource: string | null
    isActive: boolean
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    city?: boolean
    postalCode?: boolean
    country?: boolean
    medicalHistory?: boolean
    allergies?: boolean
    medications?: boolean
    emergencyContact?: boolean
    insuranceInfo?: boolean
    orthodonticHistory?: boolean
    referralSource?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    photos?: boolean | Patient$photosArgs<ExtArgs>
    treatmentPlans?: boolean | Patient$treatmentPlansArgs<ExtArgs>
    appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
    clinicalNotes?: boolean | Patient$clinicalNotesArgs<ExtArgs>
    payments?: boolean | Patient$paymentsArgs<ExtArgs>
    treatmentPhases?: boolean | Patient$treatmentPhasesArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    city?: boolean
    postalCode?: boolean
    country?: boolean
    medicalHistory?: boolean
    allergies?: boolean
    medications?: boolean
    emergencyContact?: boolean
    insuranceInfo?: boolean
    orthodonticHistory?: boolean
    referralSource?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    address?: boolean
    city?: boolean
    postalCode?: boolean
    country?: boolean
    medicalHistory?: boolean
    allergies?: boolean
    medications?: boolean
    emergencyContact?: boolean
    insuranceInfo?: boolean
    orthodonticHistory?: boolean
    referralSource?: boolean
    isActive?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    photos?: boolean | Patient$photosArgs<ExtArgs>
    treatmentPlans?: boolean | Patient$treatmentPlansArgs<ExtArgs>
    appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
    clinicalNotes?: boolean | Patient$clinicalNotesArgs<ExtArgs>
    payments?: boolean | Patient$paymentsArgs<ExtArgs>
    treatmentPhases?: boolean | Patient$treatmentPhasesArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      photos: Prisma.$PhotoPayload<ExtArgs>[]
      treatmentPlans: Prisma.$TreatmentPlanPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      clinicalNotes: Prisma.$ClinicalNotePayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      treatmentPhases: Prisma.$TreatmentPhasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string | null
      phone: string | null
      dateOfBirth: Date | null
      gender: $Enums.Gender | null
      address: string | null
      city: string | null
      postalCode: string | null
      country: string | null
      medicalHistory: Prisma.JsonValue | null
      allergies: string | null
      medications: string | null
      emergencyContact: Prisma.JsonValue | null
      insuranceInfo: Prisma.JsonValue | null
      orthodonticHistory: Prisma.JsonValue | null
      referralSource: string | null
      isActive: boolean
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    photos<T extends Patient$photosArgs<ExtArgs> = {}>(args?: Subset<T, Patient$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findMany"> | Null>
    treatmentPlans<T extends Patient$treatmentPlansArgs<ExtArgs> = {}>(args?: Subset<T, Patient$treatmentPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findMany"> | Null>
    appointments<T extends Patient$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany"> | Null>
    clinicalNotes<T extends Patient$clinicalNotesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$clinicalNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findMany"> | Null>
    payments<T extends Patient$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    treatmentPhases<T extends Patient$treatmentPhasesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$treatmentPhasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly firstName: FieldRef<"Patient", 'String'>
    readonly lastName: FieldRef<"Patient", 'String'>
    readonly email: FieldRef<"Patient", 'String'>
    readonly phone: FieldRef<"Patient", 'String'>
    readonly dateOfBirth: FieldRef<"Patient", 'DateTime'>
    readonly gender: FieldRef<"Patient", 'Gender'>
    readonly address: FieldRef<"Patient", 'String'>
    readonly city: FieldRef<"Patient", 'String'>
    readonly postalCode: FieldRef<"Patient", 'String'>
    readonly country: FieldRef<"Patient", 'String'>
    readonly medicalHistory: FieldRef<"Patient", 'Json'>
    readonly allergies: FieldRef<"Patient", 'String'>
    readonly medications: FieldRef<"Patient", 'String'>
    readonly emergencyContact: FieldRef<"Patient", 'Json'>
    readonly insuranceInfo: FieldRef<"Patient", 'Json'>
    readonly orthodonticHistory: FieldRef<"Patient", 'Json'>
    readonly referralSource: FieldRef<"Patient", 'String'>
    readonly isActive: FieldRef<"Patient", 'Boolean'>
    readonly createdBy: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }

  /**
   * Patient.photos
   */
  export type Patient$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Patient.treatmentPlans
   */
  export type Patient$treatmentPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    where?: TreatmentPlanWhereInput
    orderBy?: TreatmentPlanOrderByWithRelationInput | TreatmentPlanOrderByWithRelationInput[]
    cursor?: TreatmentPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentPlanScalarFieldEnum | TreatmentPlanScalarFieldEnum[]
  }

  /**
   * Patient.appointments
   */
  export type Patient$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Patient.clinicalNotes
   */
  export type Patient$clinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    where?: ClinicalNoteWhereInput
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    cursor?: ClinicalNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * Patient.payments
   */
  export type Patient$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Patient.treatmentPhases
   */
  export type Patient$treatmentPhasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    where?: TreatmentPhaseWhereInput
    orderBy?: TreatmentPhaseOrderByWithRelationInput | TreatmentPhaseOrderByWithRelationInput[]
    cursor?: TreatmentPhaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentPhaseScalarFieldEnum | TreatmentPhaseScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Photo
   */

  export type AggregatePhoto = {
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  export type PhotoAvgAggregateOutputType = {
    fileSize: number | null
    width: number | null
    height: number | null
  }

  export type PhotoSumAggregateOutputType = {
    fileSize: number | null
    width: number | null
    height: number | null
  }

  export type PhotoMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    filename: string | null
    originalName: string | null
    cloudinaryId: string | null
    cloudinaryUrl: string | null
    category: $Enums.PhotoCategory | null
    subcategory: string | null
    description: string | null
    fileSize: number | null
    mimeType: string | null
    width: number | null
    height: number | null
    treatmentPhaseId: string | null
    appointmentId: string | null
    isBeforeAfter: boolean | null
    beforeAfterPairId: string | null
    uploadedBy: string | null
    uploadedAt: Date | null
    updatedAt: Date | null
  }

  export type PhotoMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    filename: string | null
    originalName: string | null
    cloudinaryId: string | null
    cloudinaryUrl: string | null
    category: $Enums.PhotoCategory | null
    subcategory: string | null
    description: string | null
    fileSize: number | null
    mimeType: string | null
    width: number | null
    height: number | null
    treatmentPhaseId: string | null
    appointmentId: string | null
    isBeforeAfter: boolean | null
    beforeAfterPairId: string | null
    uploadedBy: string | null
    uploadedAt: Date | null
    updatedAt: Date | null
  }

  export type PhotoCountAggregateOutputType = {
    id: number
    patientId: number
    filename: number
    originalName: number
    cloudinaryId: number
    cloudinaryUrl: number
    category: number
    subcategory: number
    description: number
    tags: number
    fileSize: number
    mimeType: number
    width: number
    height: number
    treatmentPhaseId: number
    appointmentId: number
    isBeforeAfter: number
    beforeAfterPairId: number
    uploadedBy: number
    uploadedAt: number
    updatedAt: number
    _all: number
  }


  export type PhotoAvgAggregateInputType = {
    fileSize?: true
    width?: true
    height?: true
  }

  export type PhotoSumAggregateInputType = {
    fileSize?: true
    width?: true
    height?: true
  }

  export type PhotoMinAggregateInputType = {
    id?: true
    patientId?: true
    filename?: true
    originalName?: true
    cloudinaryId?: true
    cloudinaryUrl?: true
    category?: true
    subcategory?: true
    description?: true
    fileSize?: true
    mimeType?: true
    width?: true
    height?: true
    treatmentPhaseId?: true
    appointmentId?: true
    isBeforeAfter?: true
    beforeAfterPairId?: true
    uploadedBy?: true
    uploadedAt?: true
    updatedAt?: true
  }

  export type PhotoMaxAggregateInputType = {
    id?: true
    patientId?: true
    filename?: true
    originalName?: true
    cloudinaryId?: true
    cloudinaryUrl?: true
    category?: true
    subcategory?: true
    description?: true
    fileSize?: true
    mimeType?: true
    width?: true
    height?: true
    treatmentPhaseId?: true
    appointmentId?: true
    isBeforeAfter?: true
    beforeAfterPairId?: true
    uploadedBy?: true
    uploadedAt?: true
    updatedAt?: true
  }

  export type PhotoCountAggregateInputType = {
    id?: true
    patientId?: true
    filename?: true
    originalName?: true
    cloudinaryId?: true
    cloudinaryUrl?: true
    category?: true
    subcategory?: true
    description?: true
    tags?: true
    fileSize?: true
    mimeType?: true
    width?: true
    height?: true
    treatmentPhaseId?: true
    appointmentId?: true
    isBeforeAfter?: true
    beforeAfterPairId?: true
    uploadedBy?: true
    uploadedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PhotoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photo to aggregate.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Photos
    **/
    _count?: true | PhotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PhotoMaxAggregateInputType
  }

  export type GetPhotoAggregateType<T extends PhotoAggregateArgs> = {
        [P in keyof T & keyof AggregatePhoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePhoto[P]>
      : GetScalarType<T[P], AggregatePhoto[P]>
  }




  export type PhotoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithAggregationInput | PhotoOrderByWithAggregationInput[]
    by: PhotoScalarFieldEnum[] | PhotoScalarFieldEnum
    having?: PhotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PhotoCountAggregateInputType | true
    _avg?: PhotoAvgAggregateInputType
    _sum?: PhotoSumAggregateInputType
    _min?: PhotoMinAggregateInputType
    _max?: PhotoMaxAggregateInputType
  }

  export type PhotoGroupByOutputType = {
    id: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory: string | null
    description: string | null
    tags: string[]
    fileSize: number
    mimeType: string
    width: number | null
    height: number | null
    treatmentPhaseId: string | null
    appointmentId: string | null
    isBeforeAfter: boolean
    beforeAfterPairId: string | null
    uploadedBy: string
    uploadedAt: Date
    updatedAt: Date
    _count: PhotoCountAggregateOutputType | null
    _avg: PhotoAvgAggregateOutputType | null
    _sum: PhotoSumAggregateOutputType | null
    _min: PhotoMinAggregateOutputType | null
    _max: PhotoMaxAggregateOutputType | null
  }

  type GetPhotoGroupByPayload<T extends PhotoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PhotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PhotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PhotoGroupByOutputType[P]>
            : GetScalarType<T[P], PhotoGroupByOutputType[P]>
        }
      >
    >


  export type PhotoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    filename?: boolean
    originalName?: boolean
    cloudinaryId?: boolean
    cloudinaryUrl?: boolean
    category?: boolean
    subcategory?: boolean
    description?: boolean
    tags?: boolean
    fileSize?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    treatmentPhaseId?: boolean
    appointmentId?: boolean
    isBeforeAfter?: boolean
    beforeAfterPairId?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPhase?: boolean | Photo$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | Photo$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["photo"]>

  export type PhotoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    filename?: boolean
    originalName?: boolean
    cloudinaryId?: boolean
    cloudinaryUrl?: boolean
    category?: boolean
    subcategory?: boolean
    description?: boolean
    tags?: boolean
    fileSize?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    treatmentPhaseId?: boolean
    appointmentId?: boolean
    isBeforeAfter?: boolean
    beforeAfterPairId?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPhase?: boolean | Photo$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | Photo$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["photo"]>

  export type PhotoSelectScalar = {
    id?: boolean
    patientId?: boolean
    filename?: boolean
    originalName?: boolean
    cloudinaryId?: boolean
    cloudinaryUrl?: boolean
    category?: boolean
    subcategory?: boolean
    description?: boolean
    tags?: boolean
    fileSize?: boolean
    mimeType?: boolean
    width?: boolean
    height?: boolean
    treatmentPhaseId?: boolean
    appointmentId?: boolean
    isBeforeAfter?: boolean
    beforeAfterPairId?: boolean
    uploadedBy?: boolean
    uploadedAt?: boolean
    updatedAt?: boolean
  }

  export type PhotoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPhase?: boolean | Photo$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | Photo$appointmentArgs<ExtArgs>
  }
  export type PhotoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    uploader?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPhase?: boolean | Photo$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | Photo$appointmentArgs<ExtArgs>
  }

  export type $PhotoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Photo"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      uploader: Prisma.$UserPayload<ExtArgs>
      treatmentPhase: Prisma.$TreatmentPhasePayload<ExtArgs> | null
      appointment: Prisma.$AppointmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      filename: string
      originalName: string
      cloudinaryId: string
      cloudinaryUrl: string
      category: $Enums.PhotoCategory
      subcategory: string | null
      description: string | null
      tags: string[]
      fileSize: number
      mimeType: string
      width: number | null
      height: number | null
      treatmentPhaseId: string | null
      appointmentId: string | null
      isBeforeAfter: boolean
      beforeAfterPairId: string | null
      uploadedBy: string
      uploadedAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["photo"]>
    composites: {}
  }

  type PhotoGetPayload<S extends boolean | null | undefined | PhotoDefaultArgs> = $Result.GetResult<Prisma.$PhotoPayload, S>

  type PhotoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PhotoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PhotoCountAggregateInputType | true
    }

  export interface PhotoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Photo'], meta: { name: 'Photo' } }
    /**
     * Find zero or one Photo that matches the filter.
     * @param {PhotoFindUniqueArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PhotoFindUniqueArgs>(args: SelectSubset<T, PhotoFindUniqueArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Photo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PhotoFindUniqueOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PhotoFindUniqueOrThrowArgs>(args: SelectSubset<T, PhotoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Photo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PhotoFindFirstArgs>(args?: SelectSubset<T, PhotoFindFirstArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Photo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindFirstOrThrowArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PhotoFindFirstOrThrowArgs>(args?: SelectSubset<T, PhotoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Photos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photo.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photoWithIdOnly = await prisma.photo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PhotoFindManyArgs>(args?: SelectSubset<T, PhotoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Photo.
     * @param {PhotoCreateArgs} args - Arguments to create a Photo.
     * @example
     * // Create one Photo
     * const Photo = await prisma.photo.create({
     *   data: {
     *     // ... data to create a Photo
     *   }
     * })
     * 
     */
    create<T extends PhotoCreateArgs>(args: SelectSubset<T, PhotoCreateArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Photos.
     * @param {PhotoCreateManyArgs} args - Arguments to create many Photos.
     * @example
     * // Create many Photos
     * const photo = await prisma.photo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PhotoCreateManyArgs>(args?: SelectSubset<T, PhotoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Photos and returns the data saved in the database.
     * @param {PhotoCreateManyAndReturnArgs} args - Arguments to create many Photos.
     * @example
     * // Create many Photos
     * const photo = await prisma.photo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Photos and only return the `id`
     * const photoWithIdOnly = await prisma.photo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PhotoCreateManyAndReturnArgs>(args?: SelectSubset<T, PhotoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Photo.
     * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
     * @example
     * // Delete one Photo
     * const Photo = await prisma.photo.delete({
     *   where: {
     *     // ... filter to delete one Photo
     *   }
     * })
     * 
     */
    delete<T extends PhotoDeleteArgs>(args: SelectSubset<T, PhotoDeleteArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Photo.
     * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
     * @example
     * // Update one Photo
     * const photo = await prisma.photo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PhotoUpdateArgs>(args: SelectSubset<T, PhotoUpdateArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Photos.
     * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PhotoDeleteManyArgs>(args?: SelectSubset<T, PhotoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photo = await prisma.photo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PhotoUpdateManyArgs>(args: SelectSubset<T, PhotoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Photo.
     * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
     * @example
     * // Update or create a Photo
     * const photo = await prisma.photo.upsert({
     *   create: {
     *     // ... data to create a Photo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photo we want to update
     *   }
     * })
     */
    upsert<T extends PhotoUpsertArgs>(args: SelectSubset<T, PhotoUpsertArgs<ExtArgs>>): Prisma__PhotoClient<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Photos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoCountArgs} args - Arguments to filter Photos to count.
     * @example
     * // Count the number of Photos
     * const count = await prisma.photo.count({
     *   where: {
     *     // ... the filter for the Photos we want to count
     *   }
     * })
    **/
    count<T extends PhotoCountArgs>(
      args?: Subset<T, PhotoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PhotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PhotoAggregateArgs>(args: Subset<T, PhotoAggregateArgs>): Prisma.PrismaPromise<GetPhotoAggregateType<T>>

    /**
     * Group by Photo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PhotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PhotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PhotoGroupByArgs['orderBy'] }
        : { orderBy?: PhotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PhotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPhotoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Photo model
   */
  readonly fields: PhotoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Photo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PhotoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    uploader<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    treatmentPhase<T extends Photo$treatmentPhaseArgs<ExtArgs> = {}>(args?: Subset<T, Photo$treatmentPhaseArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    appointment<T extends Photo$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, Photo$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Photo model
   */ 
  interface PhotoFieldRefs {
    readonly id: FieldRef<"Photo", 'String'>
    readonly patientId: FieldRef<"Photo", 'String'>
    readonly filename: FieldRef<"Photo", 'String'>
    readonly originalName: FieldRef<"Photo", 'String'>
    readonly cloudinaryId: FieldRef<"Photo", 'String'>
    readonly cloudinaryUrl: FieldRef<"Photo", 'String'>
    readonly category: FieldRef<"Photo", 'PhotoCategory'>
    readonly subcategory: FieldRef<"Photo", 'String'>
    readonly description: FieldRef<"Photo", 'String'>
    readonly tags: FieldRef<"Photo", 'String[]'>
    readonly fileSize: FieldRef<"Photo", 'Int'>
    readonly mimeType: FieldRef<"Photo", 'String'>
    readonly width: FieldRef<"Photo", 'Int'>
    readonly height: FieldRef<"Photo", 'Int'>
    readonly treatmentPhaseId: FieldRef<"Photo", 'String'>
    readonly appointmentId: FieldRef<"Photo", 'String'>
    readonly isBeforeAfter: FieldRef<"Photo", 'Boolean'>
    readonly beforeAfterPairId: FieldRef<"Photo", 'String'>
    readonly uploadedBy: FieldRef<"Photo", 'String'>
    readonly uploadedAt: FieldRef<"Photo", 'DateTime'>
    readonly updatedAt: FieldRef<"Photo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Photo findUnique
   */
  export type PhotoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo findUniqueOrThrow
   */
  export type PhotoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo findFirst
   */
  export type PhotoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Photo findFirstOrThrow
   */
  export type PhotoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photo to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Photos.
     */
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Photo findMany
   */
  export type PhotoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter, which Photos to fetch.
     */
    where?: PhotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Photos to fetch.
     */
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Photos.
     */
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
     */
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Photo create
   */
  export type PhotoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to create a Photo.
     */
    data: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
  }

  /**
   * Photo createMany
   */
  export type PhotoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Photos.
     */
    data: PhotoCreateManyInput | PhotoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Photo createManyAndReturn
   */
  export type PhotoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Photos.
     */
    data: PhotoCreateManyInput | PhotoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Photo update
   */
  export type PhotoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The data needed to update a Photo.
     */
    data: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
    /**
     * Choose, which Photo to update.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo updateMany
   */
  export type PhotoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Photos.
     */
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyInput>
    /**
     * Filter which Photos to update
     */
    where?: PhotoWhereInput
  }

  /**
   * Photo upsert
   */
  export type PhotoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * The filter to search for the Photo to update in case it exists.
     */
    where: PhotoWhereUniqueInput
    /**
     * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
     */
    create: XOR<PhotoCreateInput, PhotoUncheckedCreateInput>
    /**
     * In case the Photo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PhotoUpdateInput, PhotoUncheckedUpdateInput>
  }

  /**
   * Photo delete
   */
  export type PhotoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    /**
     * Filter which Photo to delete.
     */
    where: PhotoWhereUniqueInput
  }

  /**
   * Photo deleteMany
   */
  export type PhotoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Photos to delete
     */
    where?: PhotoWhereInput
  }

  /**
   * Photo.treatmentPhase
   */
  export type Photo$treatmentPhaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    where?: TreatmentPhaseWhereInput
  }

  /**
   * Photo.appointment
   */
  export type Photo$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * Photo without action
   */
  export type PhotoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
  }


  /**
   * Model TreatmentPlan
   */

  export type AggregateTreatmentPlan = {
    _count: TreatmentPlanCountAggregateOutputType | null
    _avg: TreatmentPlanAvgAggregateOutputType | null
    _sum: TreatmentPlanSumAggregateOutputType | null
    _min: TreatmentPlanMinAggregateOutputType | null
    _max: TreatmentPlanMaxAggregateOutputType | null
  }

  export type TreatmentPlanAvgAggregateOutputType = {
    estimatedDuration: number | null
    totalCost: Decimal | null
  }

  export type TreatmentPlanSumAggregateOutputType = {
    estimatedDuration: number | null
    totalCost: Decimal | null
  }

  export type TreatmentPlanMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    title: string | null
    description: string | null
    diagnosis: string | null
    estimatedDuration: number | null
    complexity: $Enums.TreatmentComplexity | null
    selectedOption: string | null
    status: $Enums.TreatmentStatus | null
    startDate: Date | null
    estimatedEndDate: Date | null
    actualEndDate: Date | null
    totalCost: Decimal | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentPlanMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    title: string | null
    description: string | null
    diagnosis: string | null
    estimatedDuration: number | null
    complexity: $Enums.TreatmentComplexity | null
    selectedOption: string | null
    status: $Enums.TreatmentStatus | null
    startDate: Date | null
    estimatedEndDate: Date | null
    actualEndDate: Date | null
    totalCost: Decimal | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentPlanCountAggregateOutputType = {
    id: number
    patientId: number
    title: number
    description: number
    diagnosis: number
    treatmentGoals: number
    estimatedDuration: number
    complexity: number
    initialAssessment: number
    treatmentOptions: number
    selectedOption: number
    appliancesUsed: number
    materialsList: number
    status: number
    startDate: number
    estimatedEndDate: number
    actualEndDate: number
    totalCost: number
    paymentPlan: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TreatmentPlanAvgAggregateInputType = {
    estimatedDuration?: true
    totalCost?: true
  }

  export type TreatmentPlanSumAggregateInputType = {
    estimatedDuration?: true
    totalCost?: true
  }

  export type TreatmentPlanMinAggregateInputType = {
    id?: true
    patientId?: true
    title?: true
    description?: true
    diagnosis?: true
    estimatedDuration?: true
    complexity?: true
    selectedOption?: true
    status?: true
    startDate?: true
    estimatedEndDate?: true
    actualEndDate?: true
    totalCost?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentPlanMaxAggregateInputType = {
    id?: true
    patientId?: true
    title?: true
    description?: true
    diagnosis?: true
    estimatedDuration?: true
    complexity?: true
    selectedOption?: true
    status?: true
    startDate?: true
    estimatedEndDate?: true
    actualEndDate?: true
    totalCost?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentPlanCountAggregateInputType = {
    id?: true
    patientId?: true
    title?: true
    description?: true
    diagnosis?: true
    treatmentGoals?: true
    estimatedDuration?: true
    complexity?: true
    initialAssessment?: true
    treatmentOptions?: true
    selectedOption?: true
    appliancesUsed?: true
    materialsList?: true
    status?: true
    startDate?: true
    estimatedEndDate?: true
    actualEndDate?: true
    totalCost?: true
    paymentPlan?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TreatmentPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentPlan to aggregate.
     */
    where?: TreatmentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPlans to fetch.
     */
    orderBy?: TreatmentPlanOrderByWithRelationInput | TreatmentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TreatmentPlans
    **/
    _count?: true | TreatmentPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreatmentPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreatmentPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentPlanMaxAggregateInputType
  }

  export type GetTreatmentPlanAggregateType<T extends TreatmentPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatmentPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatmentPlan[P]>
      : GetScalarType<T[P], AggregateTreatmentPlan[P]>
  }




  export type TreatmentPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentPlanWhereInput
    orderBy?: TreatmentPlanOrderByWithAggregationInput | TreatmentPlanOrderByWithAggregationInput[]
    by: TreatmentPlanScalarFieldEnum[] | TreatmentPlanScalarFieldEnum
    having?: TreatmentPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentPlanCountAggregateInputType | true
    _avg?: TreatmentPlanAvgAggregateInputType
    _sum?: TreatmentPlanSumAggregateInputType
    _min?: TreatmentPlanMinAggregateInputType
    _max?: TreatmentPlanMaxAggregateInputType
  }

  export type TreatmentPlanGroupByOutputType = {
    id: string
    patientId: string
    title: string
    description: string | null
    diagnosis: string
    treatmentGoals: string[]
    estimatedDuration: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonValue
    treatmentOptions: JsonValue
    selectedOption: string
    appliancesUsed: string[]
    materialsList: JsonValue | null
    status: $Enums.TreatmentStatus
    startDate: Date | null
    estimatedEndDate: Date | null
    actualEndDate: Date | null
    totalCost: Decimal | null
    paymentPlan: JsonValue | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: TreatmentPlanCountAggregateOutputType | null
    _avg: TreatmentPlanAvgAggregateOutputType | null
    _sum: TreatmentPlanSumAggregateOutputType | null
    _min: TreatmentPlanMinAggregateOutputType | null
    _max: TreatmentPlanMaxAggregateOutputType | null
  }

  type GetTreatmentPlanGroupByPayload<T extends TreatmentPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentPlanGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentPlanGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    title?: boolean
    description?: boolean
    diagnosis?: boolean
    treatmentGoals?: boolean
    estimatedDuration?: boolean
    complexity?: boolean
    initialAssessment?: boolean
    treatmentOptions?: boolean
    selectedOption?: boolean
    appliancesUsed?: boolean
    materialsList?: boolean
    status?: boolean
    startDate?: boolean
    estimatedEndDate?: boolean
    actualEndDate?: boolean
    totalCost?: boolean
    paymentPlan?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    phases?: boolean | TreatmentPlan$phasesArgs<ExtArgs>
    clinicalNotes?: boolean | TreatmentPlan$clinicalNotesArgs<ExtArgs>
    appointments?: boolean | TreatmentPlan$appointmentsArgs<ExtArgs>
    payments?: boolean | TreatmentPlan$paymentsArgs<ExtArgs>
    _count?: boolean | TreatmentPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentPlan"]>

  export type TreatmentPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    title?: boolean
    description?: boolean
    diagnosis?: boolean
    treatmentGoals?: boolean
    estimatedDuration?: boolean
    complexity?: boolean
    initialAssessment?: boolean
    treatmentOptions?: boolean
    selectedOption?: boolean
    appliancesUsed?: boolean
    materialsList?: boolean
    status?: boolean
    startDate?: boolean
    estimatedEndDate?: boolean
    actualEndDate?: boolean
    totalCost?: boolean
    paymentPlan?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentPlan"]>

  export type TreatmentPlanSelectScalar = {
    id?: boolean
    patientId?: boolean
    title?: boolean
    description?: boolean
    diagnosis?: boolean
    treatmentGoals?: boolean
    estimatedDuration?: boolean
    complexity?: boolean
    initialAssessment?: boolean
    treatmentOptions?: boolean
    selectedOption?: boolean
    appliancesUsed?: boolean
    materialsList?: boolean
    status?: boolean
    startDate?: boolean
    estimatedEndDate?: boolean
    actualEndDate?: boolean
    totalCost?: boolean
    paymentPlan?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TreatmentPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    phases?: boolean | TreatmentPlan$phasesArgs<ExtArgs>
    clinicalNotes?: boolean | TreatmentPlan$clinicalNotesArgs<ExtArgs>
    appointments?: boolean | TreatmentPlan$appointmentsArgs<ExtArgs>
    payments?: boolean | TreatmentPlan$paymentsArgs<ExtArgs>
    _count?: boolean | TreatmentPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TreatmentPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TreatmentPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TreatmentPlan"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      phases: Prisma.$TreatmentPhasePayload<ExtArgs>[]
      clinicalNotes: Prisma.$ClinicalNotePayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      title: string
      description: string | null
      diagnosis: string
      treatmentGoals: string[]
      estimatedDuration: number | null
      complexity: $Enums.TreatmentComplexity
      initialAssessment: Prisma.JsonValue
      treatmentOptions: Prisma.JsonValue
      selectedOption: string
      appliancesUsed: string[]
      materialsList: Prisma.JsonValue | null
      status: $Enums.TreatmentStatus
      startDate: Date | null
      estimatedEndDate: Date | null
      actualEndDate: Date | null
      totalCost: Prisma.Decimal | null
      paymentPlan: Prisma.JsonValue | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["treatmentPlan"]>
    composites: {}
  }

  type TreatmentPlanGetPayload<S extends boolean | null | undefined | TreatmentPlanDefaultArgs> = $Result.GetResult<Prisma.$TreatmentPlanPayload, S>

  type TreatmentPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TreatmentPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TreatmentPlanCountAggregateInputType | true
    }

  export interface TreatmentPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TreatmentPlan'], meta: { name: 'TreatmentPlan' } }
    /**
     * Find zero or one TreatmentPlan that matches the filter.
     * @param {TreatmentPlanFindUniqueArgs} args - Arguments to find a TreatmentPlan
     * @example
     * // Get one TreatmentPlan
     * const treatmentPlan = await prisma.treatmentPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentPlanFindUniqueArgs>(args: SelectSubset<T, TreatmentPlanFindUniqueArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TreatmentPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TreatmentPlanFindUniqueOrThrowArgs} args - Arguments to find a TreatmentPlan
     * @example
     * // Get one TreatmentPlan
     * const treatmentPlan = await prisma.treatmentPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TreatmentPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPlanFindFirstArgs} args - Arguments to find a TreatmentPlan
     * @example
     * // Get one TreatmentPlan
     * const treatmentPlan = await prisma.treatmentPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentPlanFindFirstArgs>(args?: SelectSubset<T, TreatmentPlanFindFirstArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TreatmentPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPlanFindFirstOrThrowArgs} args - Arguments to find a TreatmentPlan
     * @example
     * // Get one TreatmentPlan
     * const treatmentPlan = await prisma.treatmentPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TreatmentPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TreatmentPlans
     * const treatmentPlans = await prisma.treatmentPlan.findMany()
     * 
     * // Get first 10 TreatmentPlans
     * const treatmentPlans = await prisma.treatmentPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentPlanWithIdOnly = await prisma.treatmentPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentPlanFindManyArgs>(args?: SelectSubset<T, TreatmentPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TreatmentPlan.
     * @param {TreatmentPlanCreateArgs} args - Arguments to create a TreatmentPlan.
     * @example
     * // Create one TreatmentPlan
     * const TreatmentPlan = await prisma.treatmentPlan.create({
     *   data: {
     *     // ... data to create a TreatmentPlan
     *   }
     * })
     * 
     */
    create<T extends TreatmentPlanCreateArgs>(args: SelectSubset<T, TreatmentPlanCreateArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TreatmentPlans.
     * @param {TreatmentPlanCreateManyArgs} args - Arguments to create many TreatmentPlans.
     * @example
     * // Create many TreatmentPlans
     * const treatmentPlan = await prisma.treatmentPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentPlanCreateManyArgs>(args?: SelectSubset<T, TreatmentPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TreatmentPlans and returns the data saved in the database.
     * @param {TreatmentPlanCreateManyAndReturnArgs} args - Arguments to create many TreatmentPlans.
     * @example
     * // Create many TreatmentPlans
     * const treatmentPlan = await prisma.treatmentPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TreatmentPlans and only return the `id`
     * const treatmentPlanWithIdOnly = await prisma.treatmentPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TreatmentPlan.
     * @param {TreatmentPlanDeleteArgs} args - Arguments to delete one TreatmentPlan.
     * @example
     * // Delete one TreatmentPlan
     * const TreatmentPlan = await prisma.treatmentPlan.delete({
     *   where: {
     *     // ... filter to delete one TreatmentPlan
     *   }
     * })
     * 
     */
    delete<T extends TreatmentPlanDeleteArgs>(args: SelectSubset<T, TreatmentPlanDeleteArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TreatmentPlan.
     * @param {TreatmentPlanUpdateArgs} args - Arguments to update one TreatmentPlan.
     * @example
     * // Update one TreatmentPlan
     * const treatmentPlan = await prisma.treatmentPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentPlanUpdateArgs>(args: SelectSubset<T, TreatmentPlanUpdateArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TreatmentPlans.
     * @param {TreatmentPlanDeleteManyArgs} args - Arguments to filter TreatmentPlans to delete.
     * @example
     * // Delete a few TreatmentPlans
     * const { count } = await prisma.treatmentPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentPlanDeleteManyArgs>(args?: SelectSubset<T, TreatmentPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TreatmentPlans
     * const treatmentPlan = await prisma.treatmentPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentPlanUpdateManyArgs>(args: SelectSubset<T, TreatmentPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TreatmentPlan.
     * @param {TreatmentPlanUpsertArgs} args - Arguments to update or create a TreatmentPlan.
     * @example
     * // Update or create a TreatmentPlan
     * const treatmentPlan = await prisma.treatmentPlan.upsert({
     *   create: {
     *     // ... data to create a TreatmentPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TreatmentPlan we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentPlanUpsertArgs>(args: SelectSubset<T, TreatmentPlanUpsertArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TreatmentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPlanCountArgs} args - Arguments to filter TreatmentPlans to count.
     * @example
     * // Count the number of TreatmentPlans
     * const count = await prisma.treatmentPlan.count({
     *   where: {
     *     // ... the filter for the TreatmentPlans we want to count
     *   }
     * })
    **/
    count<T extends TreatmentPlanCountArgs>(
      args?: Subset<T, TreatmentPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TreatmentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentPlanAggregateArgs>(args: Subset<T, TreatmentPlanAggregateArgs>): Prisma.PrismaPromise<GetTreatmentPlanAggregateType<T>>

    /**
     * Group by TreatmentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentPlanGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TreatmentPlan model
   */
  readonly fields: TreatmentPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TreatmentPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    phases<T extends TreatmentPlan$phasesArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPlan$phasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findMany"> | Null>
    clinicalNotes<T extends TreatmentPlan$clinicalNotesArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPlan$clinicalNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findMany"> | Null>
    appointments<T extends TreatmentPlan$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPlan$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany"> | Null>
    payments<T extends TreatmentPlan$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPlan$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TreatmentPlan model
   */ 
  interface TreatmentPlanFieldRefs {
    readonly id: FieldRef<"TreatmentPlan", 'String'>
    readonly patientId: FieldRef<"TreatmentPlan", 'String'>
    readonly title: FieldRef<"TreatmentPlan", 'String'>
    readonly description: FieldRef<"TreatmentPlan", 'String'>
    readonly diagnosis: FieldRef<"TreatmentPlan", 'String'>
    readonly treatmentGoals: FieldRef<"TreatmentPlan", 'String[]'>
    readonly estimatedDuration: FieldRef<"TreatmentPlan", 'Int'>
    readonly complexity: FieldRef<"TreatmentPlan", 'TreatmentComplexity'>
    readonly initialAssessment: FieldRef<"TreatmentPlan", 'Json'>
    readonly treatmentOptions: FieldRef<"TreatmentPlan", 'Json'>
    readonly selectedOption: FieldRef<"TreatmentPlan", 'String'>
    readonly appliancesUsed: FieldRef<"TreatmentPlan", 'String[]'>
    readonly materialsList: FieldRef<"TreatmentPlan", 'Json'>
    readonly status: FieldRef<"TreatmentPlan", 'TreatmentStatus'>
    readonly startDate: FieldRef<"TreatmentPlan", 'DateTime'>
    readonly estimatedEndDate: FieldRef<"TreatmentPlan", 'DateTime'>
    readonly actualEndDate: FieldRef<"TreatmentPlan", 'DateTime'>
    readonly totalCost: FieldRef<"TreatmentPlan", 'Decimal'>
    readonly paymentPlan: FieldRef<"TreatmentPlan", 'Json'>
    readonly createdBy: FieldRef<"TreatmentPlan", 'String'>
    readonly createdAt: FieldRef<"TreatmentPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"TreatmentPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TreatmentPlan findUnique
   */
  export type TreatmentPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPlan to fetch.
     */
    where: TreatmentPlanWhereUniqueInput
  }

  /**
   * TreatmentPlan findUniqueOrThrow
   */
  export type TreatmentPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPlan to fetch.
     */
    where: TreatmentPlanWhereUniqueInput
  }

  /**
   * TreatmentPlan findFirst
   */
  export type TreatmentPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPlan to fetch.
     */
    where?: TreatmentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPlans to fetch.
     */
    orderBy?: TreatmentPlanOrderByWithRelationInput | TreatmentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentPlans.
     */
    cursor?: TreatmentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentPlans.
     */
    distinct?: TreatmentPlanScalarFieldEnum | TreatmentPlanScalarFieldEnum[]
  }

  /**
   * TreatmentPlan findFirstOrThrow
   */
  export type TreatmentPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPlan to fetch.
     */
    where?: TreatmentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPlans to fetch.
     */
    orderBy?: TreatmentPlanOrderByWithRelationInput | TreatmentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentPlans.
     */
    cursor?: TreatmentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentPlans.
     */
    distinct?: TreatmentPlanScalarFieldEnum | TreatmentPlanScalarFieldEnum[]
  }

  /**
   * TreatmentPlan findMany
   */
  export type TreatmentPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPlans to fetch.
     */
    where?: TreatmentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPlans to fetch.
     */
    orderBy?: TreatmentPlanOrderByWithRelationInput | TreatmentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TreatmentPlans.
     */
    cursor?: TreatmentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPlans.
     */
    skip?: number
    distinct?: TreatmentPlanScalarFieldEnum | TreatmentPlanScalarFieldEnum[]
  }

  /**
   * TreatmentPlan create
   */
  export type TreatmentPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a TreatmentPlan.
     */
    data: XOR<TreatmentPlanCreateInput, TreatmentPlanUncheckedCreateInput>
  }

  /**
   * TreatmentPlan createMany
   */
  export type TreatmentPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TreatmentPlans.
     */
    data: TreatmentPlanCreateManyInput | TreatmentPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TreatmentPlan createManyAndReturn
   */
  export type TreatmentPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TreatmentPlans.
     */
    data: TreatmentPlanCreateManyInput | TreatmentPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentPlan update
   */
  export type TreatmentPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a TreatmentPlan.
     */
    data: XOR<TreatmentPlanUpdateInput, TreatmentPlanUncheckedUpdateInput>
    /**
     * Choose, which TreatmentPlan to update.
     */
    where: TreatmentPlanWhereUniqueInput
  }

  /**
   * TreatmentPlan updateMany
   */
  export type TreatmentPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TreatmentPlans.
     */
    data: XOR<TreatmentPlanUpdateManyMutationInput, TreatmentPlanUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentPlans to update
     */
    where?: TreatmentPlanWhereInput
  }

  /**
   * TreatmentPlan upsert
   */
  export type TreatmentPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the TreatmentPlan to update in case it exists.
     */
    where: TreatmentPlanWhereUniqueInput
    /**
     * In case the TreatmentPlan found by the `where` argument doesn't exist, create a new TreatmentPlan with this data.
     */
    create: XOR<TreatmentPlanCreateInput, TreatmentPlanUncheckedCreateInput>
    /**
     * In case the TreatmentPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentPlanUpdateInput, TreatmentPlanUncheckedUpdateInput>
  }

  /**
   * TreatmentPlan delete
   */
  export type TreatmentPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    /**
     * Filter which TreatmentPlan to delete.
     */
    where: TreatmentPlanWhereUniqueInput
  }

  /**
   * TreatmentPlan deleteMany
   */
  export type TreatmentPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentPlans to delete
     */
    where?: TreatmentPlanWhereInput
  }

  /**
   * TreatmentPlan.phases
   */
  export type TreatmentPlan$phasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    where?: TreatmentPhaseWhereInput
    orderBy?: TreatmentPhaseOrderByWithRelationInput | TreatmentPhaseOrderByWithRelationInput[]
    cursor?: TreatmentPhaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TreatmentPhaseScalarFieldEnum | TreatmentPhaseScalarFieldEnum[]
  }

  /**
   * TreatmentPlan.clinicalNotes
   */
  export type TreatmentPlan$clinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    where?: ClinicalNoteWhereInput
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    cursor?: ClinicalNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * TreatmentPlan.appointments
   */
  export type TreatmentPlan$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * TreatmentPlan.payments
   */
  export type TreatmentPlan$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * TreatmentPlan without action
   */
  export type TreatmentPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
  }


  /**
   * Model TreatmentPhase
   */

  export type AggregateTreatmentPhase = {
    _count: TreatmentPhaseCountAggregateOutputType | null
    _avg: TreatmentPhaseAvgAggregateOutputType | null
    _sum: TreatmentPhaseSumAggregateOutputType | null
    _min: TreatmentPhaseMinAggregateOutputType | null
    _max: TreatmentPhaseMaxAggregateOutputType | null
  }

  export type TreatmentPhaseAvgAggregateOutputType = {
    phaseNumber: number | null
    progress: number | null
  }

  export type TreatmentPhaseSumAggregateOutputType = {
    phaseNumber: number | null
    progress: number | null
  }

  export type TreatmentPhaseMinAggregateOutputType = {
    id: string | null
    treatmentPlanId: string | null
    patientId: string | null
    phaseNumber: number | null
    title: string | null
    description: string | null
    instructions: string | null
    startDate: Date | null
    estimatedEndDate: Date | null
    actualEndDate: Date | null
    status: $Enums.PhaseStatus | null
    progress: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentPhaseMaxAggregateOutputType = {
    id: string | null
    treatmentPlanId: string | null
    patientId: string | null
    phaseNumber: number | null
    title: string | null
    description: string | null
    instructions: string | null
    startDate: Date | null
    estimatedEndDate: Date | null
    actualEndDate: Date | null
    status: $Enums.PhaseStatus | null
    progress: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TreatmentPhaseCountAggregateOutputType = {
    id: number
    treatmentPlanId: number
    patientId: number
    phaseNumber: number
    title: number
    description: number
    objectives: number
    appliances: number
    instructions: number
    startDate: number
    estimatedEndDate: number
    actualEndDate: number
    status: number
    progress: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TreatmentPhaseAvgAggregateInputType = {
    phaseNumber?: true
    progress?: true
  }

  export type TreatmentPhaseSumAggregateInputType = {
    phaseNumber?: true
    progress?: true
  }

  export type TreatmentPhaseMinAggregateInputType = {
    id?: true
    treatmentPlanId?: true
    patientId?: true
    phaseNumber?: true
    title?: true
    description?: true
    instructions?: true
    startDate?: true
    estimatedEndDate?: true
    actualEndDate?: true
    status?: true
    progress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentPhaseMaxAggregateInputType = {
    id?: true
    treatmentPlanId?: true
    patientId?: true
    phaseNumber?: true
    title?: true
    description?: true
    instructions?: true
    startDate?: true
    estimatedEndDate?: true
    actualEndDate?: true
    status?: true
    progress?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TreatmentPhaseCountAggregateInputType = {
    id?: true
    treatmentPlanId?: true
    patientId?: true
    phaseNumber?: true
    title?: true
    description?: true
    objectives?: true
    appliances?: true
    instructions?: true
    startDate?: true
    estimatedEndDate?: true
    actualEndDate?: true
    status?: true
    progress?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TreatmentPhaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentPhase to aggregate.
     */
    where?: TreatmentPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPhases to fetch.
     */
    orderBy?: TreatmentPhaseOrderByWithRelationInput | TreatmentPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TreatmentPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TreatmentPhases
    **/
    _count?: true | TreatmentPhaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TreatmentPhaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TreatmentPhaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TreatmentPhaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TreatmentPhaseMaxAggregateInputType
  }

  export type GetTreatmentPhaseAggregateType<T extends TreatmentPhaseAggregateArgs> = {
        [P in keyof T & keyof AggregateTreatmentPhase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTreatmentPhase[P]>
      : GetScalarType<T[P], AggregateTreatmentPhase[P]>
  }




  export type TreatmentPhaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TreatmentPhaseWhereInput
    orderBy?: TreatmentPhaseOrderByWithAggregationInput | TreatmentPhaseOrderByWithAggregationInput[]
    by: TreatmentPhaseScalarFieldEnum[] | TreatmentPhaseScalarFieldEnum
    having?: TreatmentPhaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TreatmentPhaseCountAggregateInputType | true
    _avg?: TreatmentPhaseAvgAggregateInputType
    _sum?: TreatmentPhaseSumAggregateInputType
    _min?: TreatmentPhaseMinAggregateInputType
    _max?: TreatmentPhaseMaxAggregateInputType
  }

  export type TreatmentPhaseGroupByOutputType = {
    id: string
    treatmentPlanId: string
    patientId: string
    phaseNumber: number
    title: string
    description: string | null
    objectives: string[]
    appliances: JsonValue
    instructions: string | null
    startDate: Date | null
    estimatedEndDate: Date | null
    actualEndDate: Date | null
    status: $Enums.PhaseStatus
    progress: number
    createdAt: Date
    updatedAt: Date
    _count: TreatmentPhaseCountAggregateOutputType | null
    _avg: TreatmentPhaseAvgAggregateOutputType | null
    _sum: TreatmentPhaseSumAggregateOutputType | null
    _min: TreatmentPhaseMinAggregateOutputType | null
    _max: TreatmentPhaseMaxAggregateOutputType | null
  }

  type GetTreatmentPhaseGroupByPayload<T extends TreatmentPhaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TreatmentPhaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TreatmentPhaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TreatmentPhaseGroupByOutputType[P]>
            : GetScalarType<T[P], TreatmentPhaseGroupByOutputType[P]>
        }
      >
    >


  export type TreatmentPhaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentPlanId?: boolean
    patientId?: boolean
    phaseNumber?: boolean
    title?: boolean
    description?: boolean
    objectives?: boolean
    appliances?: boolean
    instructions?: boolean
    startDate?: boolean
    estimatedEndDate?: boolean
    actualEndDate?: boolean
    status?: boolean
    progress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatmentPlan?: boolean | TreatmentPlanDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    photos?: boolean | TreatmentPhase$photosArgs<ExtArgs>
    clinicalNotes?: boolean | TreatmentPhase$clinicalNotesArgs<ExtArgs>
    appointments?: boolean | TreatmentPhase$appointmentsArgs<ExtArgs>
    _count?: boolean | TreatmentPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentPhase"]>

  export type TreatmentPhaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    treatmentPlanId?: boolean
    patientId?: boolean
    phaseNumber?: boolean
    title?: boolean
    description?: boolean
    objectives?: boolean
    appliances?: boolean
    instructions?: boolean
    startDate?: boolean
    estimatedEndDate?: boolean
    actualEndDate?: boolean
    status?: boolean
    progress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    treatmentPlan?: boolean | TreatmentPlanDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["treatmentPhase"]>

  export type TreatmentPhaseSelectScalar = {
    id?: boolean
    treatmentPlanId?: boolean
    patientId?: boolean
    phaseNumber?: boolean
    title?: boolean
    description?: boolean
    objectives?: boolean
    appliances?: boolean
    instructions?: boolean
    startDate?: boolean
    estimatedEndDate?: boolean
    actualEndDate?: boolean
    status?: boolean
    progress?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TreatmentPhaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatmentPlan?: boolean | TreatmentPlanDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    photos?: boolean | TreatmentPhase$photosArgs<ExtArgs>
    clinicalNotes?: boolean | TreatmentPhase$clinicalNotesArgs<ExtArgs>
    appointments?: boolean | TreatmentPhase$appointmentsArgs<ExtArgs>
    _count?: boolean | TreatmentPhaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TreatmentPhaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    treatmentPlan?: boolean | TreatmentPlanDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $TreatmentPhasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TreatmentPhase"
    objects: {
      treatmentPlan: Prisma.$TreatmentPlanPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      photos: Prisma.$PhotoPayload<ExtArgs>[]
      clinicalNotes: Prisma.$ClinicalNotePayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      treatmentPlanId: string
      patientId: string
      phaseNumber: number
      title: string
      description: string | null
      objectives: string[]
      appliances: Prisma.JsonValue
      instructions: string | null
      startDate: Date | null
      estimatedEndDate: Date | null
      actualEndDate: Date | null
      status: $Enums.PhaseStatus
      progress: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["treatmentPhase"]>
    composites: {}
  }

  type TreatmentPhaseGetPayload<S extends boolean | null | undefined | TreatmentPhaseDefaultArgs> = $Result.GetResult<Prisma.$TreatmentPhasePayload, S>

  type TreatmentPhaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TreatmentPhaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TreatmentPhaseCountAggregateInputType | true
    }

  export interface TreatmentPhaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TreatmentPhase'], meta: { name: 'TreatmentPhase' } }
    /**
     * Find zero or one TreatmentPhase that matches the filter.
     * @param {TreatmentPhaseFindUniqueArgs} args - Arguments to find a TreatmentPhase
     * @example
     * // Get one TreatmentPhase
     * const treatmentPhase = await prisma.treatmentPhase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TreatmentPhaseFindUniqueArgs>(args: SelectSubset<T, TreatmentPhaseFindUniqueArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TreatmentPhase that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TreatmentPhaseFindUniqueOrThrowArgs} args - Arguments to find a TreatmentPhase
     * @example
     * // Get one TreatmentPhase
     * const treatmentPhase = await prisma.treatmentPhase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TreatmentPhaseFindUniqueOrThrowArgs>(args: SelectSubset<T, TreatmentPhaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TreatmentPhase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPhaseFindFirstArgs} args - Arguments to find a TreatmentPhase
     * @example
     * // Get one TreatmentPhase
     * const treatmentPhase = await prisma.treatmentPhase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TreatmentPhaseFindFirstArgs>(args?: SelectSubset<T, TreatmentPhaseFindFirstArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TreatmentPhase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPhaseFindFirstOrThrowArgs} args - Arguments to find a TreatmentPhase
     * @example
     * // Get one TreatmentPhase
     * const treatmentPhase = await prisma.treatmentPhase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TreatmentPhaseFindFirstOrThrowArgs>(args?: SelectSubset<T, TreatmentPhaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TreatmentPhases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPhaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TreatmentPhases
     * const treatmentPhases = await prisma.treatmentPhase.findMany()
     * 
     * // Get first 10 TreatmentPhases
     * const treatmentPhases = await prisma.treatmentPhase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const treatmentPhaseWithIdOnly = await prisma.treatmentPhase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TreatmentPhaseFindManyArgs>(args?: SelectSubset<T, TreatmentPhaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TreatmentPhase.
     * @param {TreatmentPhaseCreateArgs} args - Arguments to create a TreatmentPhase.
     * @example
     * // Create one TreatmentPhase
     * const TreatmentPhase = await prisma.treatmentPhase.create({
     *   data: {
     *     // ... data to create a TreatmentPhase
     *   }
     * })
     * 
     */
    create<T extends TreatmentPhaseCreateArgs>(args: SelectSubset<T, TreatmentPhaseCreateArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TreatmentPhases.
     * @param {TreatmentPhaseCreateManyArgs} args - Arguments to create many TreatmentPhases.
     * @example
     * // Create many TreatmentPhases
     * const treatmentPhase = await prisma.treatmentPhase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TreatmentPhaseCreateManyArgs>(args?: SelectSubset<T, TreatmentPhaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TreatmentPhases and returns the data saved in the database.
     * @param {TreatmentPhaseCreateManyAndReturnArgs} args - Arguments to create many TreatmentPhases.
     * @example
     * // Create many TreatmentPhases
     * const treatmentPhase = await prisma.treatmentPhase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TreatmentPhases and only return the `id`
     * const treatmentPhaseWithIdOnly = await prisma.treatmentPhase.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TreatmentPhaseCreateManyAndReturnArgs>(args?: SelectSubset<T, TreatmentPhaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TreatmentPhase.
     * @param {TreatmentPhaseDeleteArgs} args - Arguments to delete one TreatmentPhase.
     * @example
     * // Delete one TreatmentPhase
     * const TreatmentPhase = await prisma.treatmentPhase.delete({
     *   where: {
     *     // ... filter to delete one TreatmentPhase
     *   }
     * })
     * 
     */
    delete<T extends TreatmentPhaseDeleteArgs>(args: SelectSubset<T, TreatmentPhaseDeleteArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TreatmentPhase.
     * @param {TreatmentPhaseUpdateArgs} args - Arguments to update one TreatmentPhase.
     * @example
     * // Update one TreatmentPhase
     * const treatmentPhase = await prisma.treatmentPhase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TreatmentPhaseUpdateArgs>(args: SelectSubset<T, TreatmentPhaseUpdateArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TreatmentPhases.
     * @param {TreatmentPhaseDeleteManyArgs} args - Arguments to filter TreatmentPhases to delete.
     * @example
     * // Delete a few TreatmentPhases
     * const { count } = await prisma.treatmentPhase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TreatmentPhaseDeleteManyArgs>(args?: SelectSubset<T, TreatmentPhaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TreatmentPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPhaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TreatmentPhases
     * const treatmentPhase = await prisma.treatmentPhase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TreatmentPhaseUpdateManyArgs>(args: SelectSubset<T, TreatmentPhaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TreatmentPhase.
     * @param {TreatmentPhaseUpsertArgs} args - Arguments to update or create a TreatmentPhase.
     * @example
     * // Update or create a TreatmentPhase
     * const treatmentPhase = await prisma.treatmentPhase.upsert({
     *   create: {
     *     // ... data to create a TreatmentPhase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TreatmentPhase we want to update
     *   }
     * })
     */
    upsert<T extends TreatmentPhaseUpsertArgs>(args: SelectSubset<T, TreatmentPhaseUpsertArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TreatmentPhases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPhaseCountArgs} args - Arguments to filter TreatmentPhases to count.
     * @example
     * // Count the number of TreatmentPhases
     * const count = await prisma.treatmentPhase.count({
     *   where: {
     *     // ... the filter for the TreatmentPhases we want to count
     *   }
     * })
    **/
    count<T extends TreatmentPhaseCountArgs>(
      args?: Subset<T, TreatmentPhaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TreatmentPhaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TreatmentPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPhaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TreatmentPhaseAggregateArgs>(args: Subset<T, TreatmentPhaseAggregateArgs>): Prisma.PrismaPromise<GetTreatmentPhaseAggregateType<T>>

    /**
     * Group by TreatmentPhase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TreatmentPhaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TreatmentPhaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TreatmentPhaseGroupByArgs['orderBy'] }
        : { orderBy?: TreatmentPhaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TreatmentPhaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTreatmentPhaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TreatmentPhase model
   */
  readonly fields: TreatmentPhaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TreatmentPhase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TreatmentPhaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    treatmentPlan<T extends TreatmentPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPlanDefaultArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    photos<T extends TreatmentPhase$photosArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPhase$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findMany"> | Null>
    clinicalNotes<T extends TreatmentPhase$clinicalNotesArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPhase$clinicalNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findMany"> | Null>
    appointments<T extends TreatmentPhase$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, TreatmentPhase$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TreatmentPhase model
   */ 
  interface TreatmentPhaseFieldRefs {
    readonly id: FieldRef<"TreatmentPhase", 'String'>
    readonly treatmentPlanId: FieldRef<"TreatmentPhase", 'String'>
    readonly patientId: FieldRef<"TreatmentPhase", 'String'>
    readonly phaseNumber: FieldRef<"TreatmentPhase", 'Int'>
    readonly title: FieldRef<"TreatmentPhase", 'String'>
    readonly description: FieldRef<"TreatmentPhase", 'String'>
    readonly objectives: FieldRef<"TreatmentPhase", 'String[]'>
    readonly appliances: FieldRef<"TreatmentPhase", 'Json'>
    readonly instructions: FieldRef<"TreatmentPhase", 'String'>
    readonly startDate: FieldRef<"TreatmentPhase", 'DateTime'>
    readonly estimatedEndDate: FieldRef<"TreatmentPhase", 'DateTime'>
    readonly actualEndDate: FieldRef<"TreatmentPhase", 'DateTime'>
    readonly status: FieldRef<"TreatmentPhase", 'PhaseStatus'>
    readonly progress: FieldRef<"TreatmentPhase", 'Int'>
    readonly createdAt: FieldRef<"TreatmentPhase", 'DateTime'>
    readonly updatedAt: FieldRef<"TreatmentPhase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TreatmentPhase findUnique
   */
  export type TreatmentPhaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPhase to fetch.
     */
    where: TreatmentPhaseWhereUniqueInput
  }

  /**
   * TreatmentPhase findUniqueOrThrow
   */
  export type TreatmentPhaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPhase to fetch.
     */
    where: TreatmentPhaseWhereUniqueInput
  }

  /**
   * TreatmentPhase findFirst
   */
  export type TreatmentPhaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPhase to fetch.
     */
    where?: TreatmentPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPhases to fetch.
     */
    orderBy?: TreatmentPhaseOrderByWithRelationInput | TreatmentPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentPhases.
     */
    cursor?: TreatmentPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentPhases.
     */
    distinct?: TreatmentPhaseScalarFieldEnum | TreatmentPhaseScalarFieldEnum[]
  }

  /**
   * TreatmentPhase findFirstOrThrow
   */
  export type TreatmentPhaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPhase to fetch.
     */
    where?: TreatmentPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPhases to fetch.
     */
    orderBy?: TreatmentPhaseOrderByWithRelationInput | TreatmentPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TreatmentPhases.
     */
    cursor?: TreatmentPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPhases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TreatmentPhases.
     */
    distinct?: TreatmentPhaseScalarFieldEnum | TreatmentPhaseScalarFieldEnum[]
  }

  /**
   * TreatmentPhase findMany
   */
  export type TreatmentPhaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * Filter, which TreatmentPhases to fetch.
     */
    where?: TreatmentPhaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TreatmentPhases to fetch.
     */
    orderBy?: TreatmentPhaseOrderByWithRelationInput | TreatmentPhaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TreatmentPhases.
     */
    cursor?: TreatmentPhaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TreatmentPhases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TreatmentPhases.
     */
    skip?: number
    distinct?: TreatmentPhaseScalarFieldEnum | TreatmentPhaseScalarFieldEnum[]
  }

  /**
   * TreatmentPhase create
   */
  export type TreatmentPhaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * The data needed to create a TreatmentPhase.
     */
    data: XOR<TreatmentPhaseCreateInput, TreatmentPhaseUncheckedCreateInput>
  }

  /**
   * TreatmentPhase createMany
   */
  export type TreatmentPhaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TreatmentPhases.
     */
    data: TreatmentPhaseCreateManyInput | TreatmentPhaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TreatmentPhase createManyAndReturn
   */
  export type TreatmentPhaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TreatmentPhases.
     */
    data: TreatmentPhaseCreateManyInput | TreatmentPhaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TreatmentPhase update
   */
  export type TreatmentPhaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * The data needed to update a TreatmentPhase.
     */
    data: XOR<TreatmentPhaseUpdateInput, TreatmentPhaseUncheckedUpdateInput>
    /**
     * Choose, which TreatmentPhase to update.
     */
    where: TreatmentPhaseWhereUniqueInput
  }

  /**
   * TreatmentPhase updateMany
   */
  export type TreatmentPhaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TreatmentPhases.
     */
    data: XOR<TreatmentPhaseUpdateManyMutationInput, TreatmentPhaseUncheckedUpdateManyInput>
    /**
     * Filter which TreatmentPhases to update
     */
    where?: TreatmentPhaseWhereInput
  }

  /**
   * TreatmentPhase upsert
   */
  export type TreatmentPhaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * The filter to search for the TreatmentPhase to update in case it exists.
     */
    where: TreatmentPhaseWhereUniqueInput
    /**
     * In case the TreatmentPhase found by the `where` argument doesn't exist, create a new TreatmentPhase with this data.
     */
    create: XOR<TreatmentPhaseCreateInput, TreatmentPhaseUncheckedCreateInput>
    /**
     * In case the TreatmentPhase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TreatmentPhaseUpdateInput, TreatmentPhaseUncheckedUpdateInput>
  }

  /**
   * TreatmentPhase delete
   */
  export type TreatmentPhaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    /**
     * Filter which TreatmentPhase to delete.
     */
    where: TreatmentPhaseWhereUniqueInput
  }

  /**
   * TreatmentPhase deleteMany
   */
  export type TreatmentPhaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TreatmentPhases to delete
     */
    where?: TreatmentPhaseWhereInput
  }

  /**
   * TreatmentPhase.photos
   */
  export type TreatmentPhase$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * TreatmentPhase.clinicalNotes
   */
  export type TreatmentPhase$clinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    where?: ClinicalNoteWhereInput
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    cursor?: ClinicalNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * TreatmentPhase.appointments
   */
  export type TreatmentPhase$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * TreatmentPhase without action
   */
  export type TreatmentPhaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
  }


  /**
   * Model ClinicalNote
   */

  export type AggregateClinicalNote = {
    _count: ClinicalNoteCountAggregateOutputType | null
    _min: ClinicalNoteMinAggregateOutputType | null
    _max: ClinicalNoteMaxAggregateOutputType | null
  }

  export type ClinicalNoteMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    treatmentPlanId: string | null
    treatmentPhaseId: string | null
    appointmentId: string | null
    title: string | null
    content: string | null
    noteType: $Enums.NoteType | null
    recommendations: string | null
    nextSteps: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClinicalNoteMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    treatmentPlanId: string | null
    treatmentPhaseId: string | null
    appointmentId: string | null
    title: string | null
    content: string | null
    noteType: $Enums.NoteType | null
    recommendations: string | null
    nextSteps: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClinicalNoteCountAggregateOutputType = {
    id: number
    patientId: number
    treatmentPlanId: number
    treatmentPhaseId: number
    appointmentId: number
    title: number
    content: number
    noteType: number
    tags: number
    observations: number
    recommendations: number
    nextSteps: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClinicalNoteMinAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    treatmentPhaseId?: true
    appointmentId?: true
    title?: true
    content?: true
    noteType?: true
    recommendations?: true
    nextSteps?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClinicalNoteMaxAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    treatmentPhaseId?: true
    appointmentId?: true
    title?: true
    content?: true
    noteType?: true
    recommendations?: true
    nextSteps?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClinicalNoteCountAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    treatmentPhaseId?: true
    appointmentId?: true
    title?: true
    content?: true
    noteType?: true
    tags?: true
    observations?: true
    recommendations?: true
    nextSteps?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClinicalNoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicalNote to aggregate.
     */
    where?: ClinicalNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicalNotes to fetch.
     */
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicalNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicalNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicalNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClinicalNotes
    **/
    _count?: true | ClinicalNoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicalNoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicalNoteMaxAggregateInputType
  }

  export type GetClinicalNoteAggregateType<T extends ClinicalNoteAggregateArgs> = {
        [P in keyof T & keyof AggregateClinicalNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinicalNote[P]>
      : GetScalarType<T[P], AggregateClinicalNote[P]>
  }




  export type ClinicalNoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClinicalNoteWhereInput
    orderBy?: ClinicalNoteOrderByWithAggregationInput | ClinicalNoteOrderByWithAggregationInput[]
    by: ClinicalNoteScalarFieldEnum[] | ClinicalNoteScalarFieldEnum
    having?: ClinicalNoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicalNoteCountAggregateInputType | true
    _min?: ClinicalNoteMinAggregateInputType
    _max?: ClinicalNoteMaxAggregateInputType
  }

  export type ClinicalNoteGroupByOutputType = {
    id: string
    patientId: string
    treatmentPlanId: string | null
    treatmentPhaseId: string | null
    appointmentId: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags: string[]
    observations: JsonValue | null
    recommendations: string | null
    nextSteps: string | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: ClinicalNoteCountAggregateOutputType | null
    _min: ClinicalNoteMinAggregateOutputType | null
    _max: ClinicalNoteMaxAggregateOutputType | null
  }

  type GetClinicalNoteGroupByPayload<T extends ClinicalNoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicalNoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicalNoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicalNoteGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicalNoteGroupByOutputType[P]>
        }
      >
    >


  export type ClinicalNoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    treatmentPhaseId?: boolean
    appointmentId?: boolean
    title?: boolean
    content?: boolean
    noteType?: boolean
    tags?: boolean
    observations?: boolean
    recommendations?: boolean
    nextSteps?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | ClinicalNote$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | ClinicalNote$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | ClinicalNote$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["clinicalNote"]>

  export type ClinicalNoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    treatmentPhaseId?: boolean
    appointmentId?: boolean
    title?: boolean
    content?: boolean
    noteType?: boolean
    tags?: boolean
    observations?: boolean
    recommendations?: boolean
    nextSteps?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | ClinicalNote$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | ClinicalNote$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | ClinicalNote$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["clinicalNote"]>

  export type ClinicalNoteSelectScalar = {
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    treatmentPhaseId?: boolean
    appointmentId?: boolean
    title?: boolean
    content?: boolean
    noteType?: boolean
    tags?: boolean
    observations?: boolean
    recommendations?: boolean
    nextSteps?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClinicalNoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | ClinicalNote$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | ClinicalNote$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | ClinicalNote$appointmentArgs<ExtArgs>
  }
  export type ClinicalNoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | ClinicalNote$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | ClinicalNote$treatmentPhaseArgs<ExtArgs>
    appointment?: boolean | ClinicalNote$appointmentArgs<ExtArgs>
  }

  export type $ClinicalNotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClinicalNote"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      treatmentPlan: Prisma.$TreatmentPlanPayload<ExtArgs> | null
      treatmentPhase: Prisma.$TreatmentPhasePayload<ExtArgs> | null
      appointment: Prisma.$AppointmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      treatmentPlanId: string | null
      treatmentPhaseId: string | null
      appointmentId: string | null
      title: string
      content: string
      noteType: $Enums.NoteType
      tags: string[]
      observations: Prisma.JsonValue | null
      recommendations: string | null
      nextSteps: string | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["clinicalNote"]>
    composites: {}
  }

  type ClinicalNoteGetPayload<S extends boolean | null | undefined | ClinicalNoteDefaultArgs> = $Result.GetResult<Prisma.$ClinicalNotePayload, S>

  type ClinicalNoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClinicalNoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClinicalNoteCountAggregateInputType | true
    }

  export interface ClinicalNoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClinicalNote'], meta: { name: 'ClinicalNote' } }
    /**
     * Find zero or one ClinicalNote that matches the filter.
     * @param {ClinicalNoteFindUniqueArgs} args - Arguments to find a ClinicalNote
     * @example
     * // Get one ClinicalNote
     * const clinicalNote = await prisma.clinicalNote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClinicalNoteFindUniqueArgs>(args: SelectSubset<T, ClinicalNoteFindUniqueArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClinicalNote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClinicalNoteFindUniqueOrThrowArgs} args - Arguments to find a ClinicalNote
     * @example
     * // Get one ClinicalNote
     * const clinicalNote = await prisma.clinicalNote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClinicalNoteFindUniqueOrThrowArgs>(args: SelectSubset<T, ClinicalNoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClinicalNote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicalNoteFindFirstArgs} args - Arguments to find a ClinicalNote
     * @example
     * // Get one ClinicalNote
     * const clinicalNote = await prisma.clinicalNote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClinicalNoteFindFirstArgs>(args?: SelectSubset<T, ClinicalNoteFindFirstArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClinicalNote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicalNoteFindFirstOrThrowArgs} args - Arguments to find a ClinicalNote
     * @example
     * // Get one ClinicalNote
     * const clinicalNote = await prisma.clinicalNote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClinicalNoteFindFirstOrThrowArgs>(args?: SelectSubset<T, ClinicalNoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClinicalNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicalNoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClinicalNotes
     * const clinicalNotes = await prisma.clinicalNote.findMany()
     * 
     * // Get first 10 ClinicalNotes
     * const clinicalNotes = await prisma.clinicalNote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicalNoteWithIdOnly = await prisma.clinicalNote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClinicalNoteFindManyArgs>(args?: SelectSubset<T, ClinicalNoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClinicalNote.
     * @param {ClinicalNoteCreateArgs} args - Arguments to create a ClinicalNote.
     * @example
     * // Create one ClinicalNote
     * const ClinicalNote = await prisma.clinicalNote.create({
     *   data: {
     *     // ... data to create a ClinicalNote
     *   }
     * })
     * 
     */
    create<T extends ClinicalNoteCreateArgs>(args: SelectSubset<T, ClinicalNoteCreateArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClinicalNotes.
     * @param {ClinicalNoteCreateManyArgs} args - Arguments to create many ClinicalNotes.
     * @example
     * // Create many ClinicalNotes
     * const clinicalNote = await prisma.clinicalNote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClinicalNoteCreateManyArgs>(args?: SelectSubset<T, ClinicalNoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClinicalNotes and returns the data saved in the database.
     * @param {ClinicalNoteCreateManyAndReturnArgs} args - Arguments to create many ClinicalNotes.
     * @example
     * // Create many ClinicalNotes
     * const clinicalNote = await prisma.clinicalNote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClinicalNotes and only return the `id`
     * const clinicalNoteWithIdOnly = await prisma.clinicalNote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClinicalNoteCreateManyAndReturnArgs>(args?: SelectSubset<T, ClinicalNoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClinicalNote.
     * @param {ClinicalNoteDeleteArgs} args - Arguments to delete one ClinicalNote.
     * @example
     * // Delete one ClinicalNote
     * const ClinicalNote = await prisma.clinicalNote.delete({
     *   where: {
     *     // ... filter to delete one ClinicalNote
     *   }
     * })
     * 
     */
    delete<T extends ClinicalNoteDeleteArgs>(args: SelectSubset<T, ClinicalNoteDeleteArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClinicalNote.
     * @param {ClinicalNoteUpdateArgs} args - Arguments to update one ClinicalNote.
     * @example
     * // Update one ClinicalNote
     * const clinicalNote = await prisma.clinicalNote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClinicalNoteUpdateArgs>(args: SelectSubset<T, ClinicalNoteUpdateArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClinicalNotes.
     * @param {ClinicalNoteDeleteManyArgs} args - Arguments to filter ClinicalNotes to delete.
     * @example
     * // Delete a few ClinicalNotes
     * const { count } = await prisma.clinicalNote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClinicalNoteDeleteManyArgs>(args?: SelectSubset<T, ClinicalNoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClinicalNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicalNoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClinicalNotes
     * const clinicalNote = await prisma.clinicalNote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClinicalNoteUpdateManyArgs>(args: SelectSubset<T, ClinicalNoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClinicalNote.
     * @param {ClinicalNoteUpsertArgs} args - Arguments to update or create a ClinicalNote.
     * @example
     * // Update or create a ClinicalNote
     * const clinicalNote = await prisma.clinicalNote.upsert({
     *   create: {
     *     // ... data to create a ClinicalNote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClinicalNote we want to update
     *   }
     * })
     */
    upsert<T extends ClinicalNoteUpsertArgs>(args: SelectSubset<T, ClinicalNoteUpsertArgs<ExtArgs>>): Prisma__ClinicalNoteClient<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClinicalNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicalNoteCountArgs} args - Arguments to filter ClinicalNotes to count.
     * @example
     * // Count the number of ClinicalNotes
     * const count = await prisma.clinicalNote.count({
     *   where: {
     *     // ... the filter for the ClinicalNotes we want to count
     *   }
     * })
    **/
    count<T extends ClinicalNoteCountArgs>(
      args?: Subset<T, ClinicalNoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicalNoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClinicalNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicalNoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicalNoteAggregateArgs>(args: Subset<T, ClinicalNoteAggregateArgs>): Prisma.PrismaPromise<GetClinicalNoteAggregateType<T>>

    /**
     * Group by ClinicalNote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicalNoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicalNoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicalNoteGroupByArgs['orderBy'] }
        : { orderBy?: ClinicalNoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicalNoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicalNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClinicalNote model
   */
  readonly fields: ClinicalNoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClinicalNote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicalNoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    treatmentPlan<T extends ClinicalNote$treatmentPlanArgs<ExtArgs> = {}>(args?: Subset<T, ClinicalNote$treatmentPlanArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    treatmentPhase<T extends ClinicalNote$treatmentPhaseArgs<ExtArgs> = {}>(args?: Subset<T, ClinicalNote$treatmentPhaseArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    appointment<T extends ClinicalNote$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, ClinicalNote$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClinicalNote model
   */ 
  interface ClinicalNoteFieldRefs {
    readonly id: FieldRef<"ClinicalNote", 'String'>
    readonly patientId: FieldRef<"ClinicalNote", 'String'>
    readonly treatmentPlanId: FieldRef<"ClinicalNote", 'String'>
    readonly treatmentPhaseId: FieldRef<"ClinicalNote", 'String'>
    readonly appointmentId: FieldRef<"ClinicalNote", 'String'>
    readonly title: FieldRef<"ClinicalNote", 'String'>
    readonly content: FieldRef<"ClinicalNote", 'String'>
    readonly noteType: FieldRef<"ClinicalNote", 'NoteType'>
    readonly tags: FieldRef<"ClinicalNote", 'String[]'>
    readonly observations: FieldRef<"ClinicalNote", 'Json'>
    readonly recommendations: FieldRef<"ClinicalNote", 'String'>
    readonly nextSteps: FieldRef<"ClinicalNote", 'String'>
    readonly createdBy: FieldRef<"ClinicalNote", 'String'>
    readonly createdAt: FieldRef<"ClinicalNote", 'DateTime'>
    readonly updatedAt: FieldRef<"ClinicalNote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClinicalNote findUnique
   */
  export type ClinicalNoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * Filter, which ClinicalNote to fetch.
     */
    where: ClinicalNoteWhereUniqueInput
  }

  /**
   * ClinicalNote findUniqueOrThrow
   */
  export type ClinicalNoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * Filter, which ClinicalNote to fetch.
     */
    where: ClinicalNoteWhereUniqueInput
  }

  /**
   * ClinicalNote findFirst
   */
  export type ClinicalNoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * Filter, which ClinicalNote to fetch.
     */
    where?: ClinicalNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicalNotes to fetch.
     */
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicalNotes.
     */
    cursor?: ClinicalNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicalNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicalNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicalNotes.
     */
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * ClinicalNote findFirstOrThrow
   */
  export type ClinicalNoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * Filter, which ClinicalNote to fetch.
     */
    where?: ClinicalNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicalNotes to fetch.
     */
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicalNotes.
     */
    cursor?: ClinicalNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicalNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicalNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicalNotes.
     */
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * ClinicalNote findMany
   */
  export type ClinicalNoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * Filter, which ClinicalNotes to fetch.
     */
    where?: ClinicalNoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicalNotes to fetch.
     */
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClinicalNotes.
     */
    cursor?: ClinicalNoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicalNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicalNotes.
     */
    skip?: number
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * ClinicalNote create
   */
  export type ClinicalNoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * The data needed to create a ClinicalNote.
     */
    data: XOR<ClinicalNoteCreateInput, ClinicalNoteUncheckedCreateInput>
  }

  /**
   * ClinicalNote createMany
   */
  export type ClinicalNoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClinicalNotes.
     */
    data: ClinicalNoteCreateManyInput | ClinicalNoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClinicalNote createManyAndReturn
   */
  export type ClinicalNoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClinicalNotes.
     */
    data: ClinicalNoteCreateManyInput | ClinicalNoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClinicalNote update
   */
  export type ClinicalNoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * The data needed to update a ClinicalNote.
     */
    data: XOR<ClinicalNoteUpdateInput, ClinicalNoteUncheckedUpdateInput>
    /**
     * Choose, which ClinicalNote to update.
     */
    where: ClinicalNoteWhereUniqueInput
  }

  /**
   * ClinicalNote updateMany
   */
  export type ClinicalNoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClinicalNotes.
     */
    data: XOR<ClinicalNoteUpdateManyMutationInput, ClinicalNoteUncheckedUpdateManyInput>
    /**
     * Filter which ClinicalNotes to update
     */
    where?: ClinicalNoteWhereInput
  }

  /**
   * ClinicalNote upsert
   */
  export type ClinicalNoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * The filter to search for the ClinicalNote to update in case it exists.
     */
    where: ClinicalNoteWhereUniqueInput
    /**
     * In case the ClinicalNote found by the `where` argument doesn't exist, create a new ClinicalNote with this data.
     */
    create: XOR<ClinicalNoteCreateInput, ClinicalNoteUncheckedCreateInput>
    /**
     * In case the ClinicalNote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicalNoteUpdateInput, ClinicalNoteUncheckedUpdateInput>
  }

  /**
   * ClinicalNote delete
   */
  export type ClinicalNoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    /**
     * Filter which ClinicalNote to delete.
     */
    where: ClinicalNoteWhereUniqueInput
  }

  /**
   * ClinicalNote deleteMany
   */
  export type ClinicalNoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicalNotes to delete
     */
    where?: ClinicalNoteWhereInput
  }

  /**
   * ClinicalNote.treatmentPlan
   */
  export type ClinicalNote$treatmentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    where?: TreatmentPlanWhereInput
  }

  /**
   * ClinicalNote.treatmentPhase
   */
  export type ClinicalNote$treatmentPhaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    where?: TreatmentPhaseWhereInput
  }

  /**
   * ClinicalNote.appointment
   */
  export type ClinicalNote$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * ClinicalNote without action
   */
  export type ClinicalNoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    duration: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    duration: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    treatmentPlanId: string | null
    treatmentPhaseId: string | null
    appointmentDate: Date | null
    appointmentTime: string | null
    duration: number | null
    appointmentType: $Enums.AppointmentType | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    reasonForVisit: string | null
    treatmentPerformed: string | null
    legacyBookingId: string | null
    bookingNumber: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    treatmentPlanId: string | null
    treatmentPhaseId: string | null
    appointmentDate: Date | null
    appointmentTime: string | null
    duration: number | null
    appointmentType: $Enums.AppointmentType | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    reasonForVisit: string | null
    treatmentPerformed: string | null
    legacyBookingId: string | null
    bookingNumber: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    patientId: number
    treatmentPlanId: number
    treatmentPhaseId: number
    appointmentDate: number
    appointmentTime: number
    duration: number
    appointmentType: number
    status: number
    notes: number
    reasonForVisit: number
    treatmentPerformed: number
    legacyBookingId: number
    bookingNumber: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    duration?: true
  }

  export type AppointmentSumAggregateInputType = {
    duration?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    treatmentPhaseId?: true
    appointmentDate?: true
    appointmentTime?: true
    duration?: true
    appointmentType?: true
    status?: true
    notes?: true
    reasonForVisit?: true
    treatmentPerformed?: true
    legacyBookingId?: true
    bookingNumber?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    treatmentPhaseId?: true
    appointmentDate?: true
    appointmentTime?: true
    duration?: true
    appointmentType?: true
    status?: true
    notes?: true
    reasonForVisit?: true
    treatmentPerformed?: true
    legacyBookingId?: true
    bookingNumber?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    treatmentPhaseId?: true
    appointmentDate?: true
    appointmentTime?: true
    duration?: true
    appointmentType?: true
    status?: true
    notes?: true
    reasonForVisit?: true
    treatmentPerformed?: true
    legacyBookingId?: true
    bookingNumber?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    patientId: string
    treatmentPlanId: string | null
    treatmentPhaseId: string | null
    appointmentDate: Date
    appointmentTime: string
    duration: number
    appointmentType: $Enums.AppointmentType
    status: $Enums.AppointmentStatus
    notes: string | null
    reasonForVisit: string | null
    treatmentPerformed: string | null
    legacyBookingId: string | null
    bookingNumber: string | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    treatmentPhaseId?: boolean
    appointmentDate?: boolean
    appointmentTime?: boolean
    duration?: boolean
    appointmentType?: boolean
    status?: boolean
    notes?: boolean
    reasonForVisit?: boolean
    treatmentPerformed?: boolean
    legacyBookingId?: boolean
    bookingNumber?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Appointment$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | Appointment$treatmentPhaseArgs<ExtArgs>
    photos?: boolean | Appointment$photosArgs<ExtArgs>
    clinicalNotes?: boolean | Appointment$clinicalNotesArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    treatmentPhaseId?: boolean
    appointmentDate?: boolean
    appointmentTime?: boolean
    duration?: boolean
    appointmentType?: boolean
    status?: boolean
    notes?: boolean
    reasonForVisit?: boolean
    treatmentPerformed?: boolean
    legacyBookingId?: boolean
    bookingNumber?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Appointment$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | Appointment$treatmentPhaseArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    treatmentPhaseId?: boolean
    appointmentDate?: boolean
    appointmentTime?: boolean
    duration?: boolean
    appointmentType?: boolean
    status?: boolean
    notes?: boolean
    reasonForVisit?: boolean
    treatmentPerformed?: boolean
    legacyBookingId?: boolean
    bookingNumber?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Appointment$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | Appointment$treatmentPhaseArgs<ExtArgs>
    photos?: boolean | Appointment$photosArgs<ExtArgs>
    clinicalNotes?: boolean | Appointment$clinicalNotesArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Appointment$treatmentPlanArgs<ExtArgs>
    treatmentPhase?: boolean | Appointment$treatmentPhaseArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      treatmentPlan: Prisma.$TreatmentPlanPayload<ExtArgs> | null
      treatmentPhase: Prisma.$TreatmentPhasePayload<ExtArgs> | null
      photos: Prisma.$PhotoPayload<ExtArgs>[]
      clinicalNotes: Prisma.$ClinicalNotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      treatmentPlanId: string | null
      treatmentPhaseId: string | null
      appointmentDate: Date
      appointmentTime: string
      duration: number
      appointmentType: $Enums.AppointmentType
      status: $Enums.AppointmentStatus
      notes: string | null
      reasonForVisit: string | null
      treatmentPerformed: string | null
      legacyBookingId: string | null
      bookingNumber: string | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    treatmentPlan<T extends Appointment$treatmentPlanArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$treatmentPlanArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    treatmentPhase<T extends Appointment$treatmentPhaseArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$treatmentPhaseArgs<ExtArgs>>): Prisma__TreatmentPhaseClient<$Result.GetResult<Prisma.$TreatmentPhasePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    photos<T extends Appointment$photosArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$photosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PhotoPayload<ExtArgs>, T, "findMany"> | Null>
    clinicalNotes<T extends Appointment$clinicalNotesArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$clinicalNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicalNotePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */ 
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly patientId: FieldRef<"Appointment", 'String'>
    readonly treatmentPlanId: FieldRef<"Appointment", 'String'>
    readonly treatmentPhaseId: FieldRef<"Appointment", 'String'>
    readonly appointmentDate: FieldRef<"Appointment", 'DateTime'>
    readonly appointmentTime: FieldRef<"Appointment", 'String'>
    readonly duration: FieldRef<"Appointment", 'Int'>
    readonly appointmentType: FieldRef<"Appointment", 'AppointmentType'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly reasonForVisit: FieldRef<"Appointment", 'String'>
    readonly treatmentPerformed: FieldRef<"Appointment", 'String'>
    readonly legacyBookingId: FieldRef<"Appointment", 'String'>
    readonly bookingNumber: FieldRef<"Appointment", 'String'>
    readonly createdBy: FieldRef<"Appointment", 'String'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
  }

  /**
   * Appointment.treatmentPlan
   */
  export type Appointment$treatmentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    where?: TreatmentPlanWhereInput
  }

  /**
   * Appointment.treatmentPhase
   */
  export type Appointment$treatmentPhaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPhase
     */
    select?: TreatmentPhaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPhaseInclude<ExtArgs> | null
    where?: TreatmentPhaseWhereInput
  }

  /**
   * Appointment.photos
   */
  export type Appointment$photosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Photo
     */
    select?: PhotoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PhotoInclude<ExtArgs> | null
    where?: PhotoWhereInput
    orderBy?: PhotoOrderByWithRelationInput | PhotoOrderByWithRelationInput[]
    cursor?: PhotoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PhotoScalarFieldEnum | PhotoScalarFieldEnum[]
  }

  /**
   * Appointment.clinicalNotes
   */
  export type Appointment$clinicalNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicalNote
     */
    select?: ClinicalNoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClinicalNoteInclude<ExtArgs> | null
    where?: ClinicalNoteWhereInput
    orderBy?: ClinicalNoteOrderByWithRelationInput | ClinicalNoteOrderByWithRelationInput[]
    cursor?: ClinicalNoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicalNoteScalarFieldEnum | ClinicalNoteScalarFieldEnum[]
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    treatmentPlanId: string | null
    amount: Decimal | null
    currency: string | null
    paymentMethod: $Enums.PaymentMethod | null
    transactionId: string | null
    description: string | null
    notes: string | null
    status: $Enums.PaymentStatus | null
    dueDate: Date | null
    paidDate: Date | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    treatmentPlanId: string | null
    amount: Decimal | null
    currency: string | null
    paymentMethod: $Enums.PaymentMethod | null
    transactionId: string | null
    description: string | null
    notes: string | null
    status: $Enums.PaymentStatus | null
    dueDate: Date | null
    paidDate: Date | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    patientId: number
    treatmentPlanId: number
    amount: number
    currency: number
    paymentMethod: number
    transactionId: number
    description: number
    notes: number
    status: number
    dueDate: number
    paidDate: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    transactionId?: true
    description?: true
    notes?: true
    status?: true
    dueDate?: true
    paidDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    transactionId?: true
    description?: true
    notes?: true
    status?: true
    dueDate?: true
    paidDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    patientId?: true
    treatmentPlanId?: true
    amount?: true
    currency?: true
    paymentMethod?: true
    transactionId?: true
    description?: true
    notes?: true
    status?: true
    dueDate?: true
    paidDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    patientId: string
    treatmentPlanId: string | null
    amount: Decimal
    currency: string
    paymentMethod: $Enums.PaymentMethod
    transactionId: string | null
    description: string | null
    notes: string | null
    status: $Enums.PaymentStatus
    dueDate: Date | null
    paidDate: Date | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    description?: boolean
    notes?: boolean
    status?: boolean
    dueDate?: boolean
    paidDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Payment$treatmentPlanArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    description?: boolean
    notes?: boolean
    status?: boolean
    dueDate?: boolean
    paidDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Payment$treatmentPlanArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    patientId?: boolean
    treatmentPlanId?: boolean
    amount?: boolean
    currency?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    description?: boolean
    notes?: boolean
    status?: boolean
    dueDate?: boolean
    paidDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Payment$treatmentPlanArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    treatmentPlan?: boolean | Payment$treatmentPlanArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      creator: Prisma.$UserPayload<ExtArgs>
      treatmentPlan: Prisma.$TreatmentPlanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      treatmentPlanId: string | null
      amount: Prisma.Decimal
      currency: string
      paymentMethod: $Enums.PaymentMethod
      transactionId: string | null
      description: string | null
      notes: string | null
      status: $Enums.PaymentStatus
      dueDate: Date | null
      paidDate: Date | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    treatmentPlan<T extends Payment$treatmentPlanArgs<ExtArgs> = {}>(args?: Subset<T, Payment$treatmentPlanArgs<ExtArgs>>): Prisma__TreatmentPlanClient<$Result.GetResult<Prisma.$TreatmentPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly patientId: FieldRef<"Payment", 'String'>
    readonly treatmentPlanId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Decimal'>
    readonly currency: FieldRef<"Payment", 'String'>
    readonly paymentMethod: FieldRef<"Payment", 'PaymentMethod'>
    readonly transactionId: FieldRef<"Payment", 'String'>
    readonly description: FieldRef<"Payment", 'String'>
    readonly notes: FieldRef<"Payment", 'String'>
    readonly status: FieldRef<"Payment", 'PaymentStatus'>
    readonly dueDate: FieldRef<"Payment", 'DateTime'>
    readonly paidDate: FieldRef<"Payment", 'DateTime'>
    readonly createdBy: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment.treatmentPlan
   */
  export type Payment$treatmentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TreatmentPlan
     */
    select?: TreatmentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TreatmentPlanInclude<ExtArgs> | null
    where?: TreatmentPlanWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model Setting
   */

  export type AggregateSetting = {
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  export type SettingMinAggregateOutputType = {
    id: string | null
    key: string | null
    category: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingMaxAggregateOutputType = {
    id: string | null
    key: string | null
    category: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingCountAggregateOutputType = {
    id: number
    key: number
    value: number
    category: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SettingMinAggregateInputType = {
    id?: true
    key?: true
    category?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingMaxAggregateInputType = {
    id?: true
    key?: true
    category?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    category?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Setting to aggregate.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingMaxAggregateInputType
  }

  export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetting[P]>
      : GetScalarType<T[P], AggregateSetting[P]>
  }




  export type SettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingWhereInput
    orderBy?: SettingOrderByWithAggregationInput | SettingOrderByWithAggregationInput[]
    by: SettingScalarFieldEnum[] | SettingScalarFieldEnum
    having?: SettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingCountAggregateInputType | true
    _min?: SettingMinAggregateInputType
    _max?: SettingMaxAggregateInputType
  }

  export type SettingGroupByOutputType = {
    id: string
    key: string
    value: JsonValue
    category: string
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: SettingCountAggregateOutputType | null
    _min: SettingMinAggregateOutputType | null
    _max: SettingMaxAggregateOutputType | null
  }

  type GetSettingGroupByPayload<T extends SettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingGroupByOutputType[P]>
            : GetScalarType<T[P], SettingGroupByOutputType[P]>
        }
      >
    >


  export type SettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    category?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    category?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setting"]>

  export type SettingSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    category?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Setting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: Prisma.JsonValue
      category: string
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["setting"]>
    composites: {}
  }

  type SettingGetPayload<S extends boolean | null | undefined | SettingDefaultArgs> = $Result.GetResult<Prisma.$SettingPayload, S>

  type SettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SettingCountAggregateInputType | true
    }

  export interface SettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Setting'], meta: { name: 'Setting' } }
    /**
     * Find zero or one Setting that matches the filter.
     * @param {SettingFindUniqueArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingFindUniqueArgs>(args: SelectSubset<T, SettingFindUniqueArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Setting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SettingFindUniqueOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Setting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingFindFirstArgs>(args?: SelectSubset<T, SettingFindFirstArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Setting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindFirstOrThrowArgs} args - Arguments to find a Setting
     * @example
     * // Get one Setting
     * const setting = await prisma.setting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.setting.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.setting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingWithIdOnly = await prisma.setting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingFindManyArgs>(args?: SelectSubset<T, SettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Setting.
     * @param {SettingCreateArgs} args - Arguments to create a Setting.
     * @example
     * // Create one Setting
     * const Setting = await prisma.setting.create({
     *   data: {
     *     // ... data to create a Setting
     *   }
     * })
     * 
     */
    create<T extends SettingCreateArgs>(args: SelectSubset<T, SettingCreateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Settings.
     * @param {SettingCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingCreateManyArgs>(args?: SelectSubset<T, SettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Settings and returns the data saved in the database.
     * @param {SettingCreateManyAndReturnArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const setting = await prisma.setting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Settings and only return the `id`
     * const settingWithIdOnly = await prisma.setting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Setting.
     * @param {SettingDeleteArgs} args - Arguments to delete one Setting.
     * @example
     * // Delete one Setting
     * const Setting = await prisma.setting.delete({
     *   where: {
     *     // ... filter to delete one Setting
     *   }
     * })
     * 
     */
    delete<T extends SettingDeleteArgs>(args: SelectSubset<T, SettingDeleteArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Setting.
     * @param {SettingUpdateArgs} args - Arguments to update one Setting.
     * @example
     * // Update one Setting
     * const setting = await prisma.setting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingUpdateArgs>(args: SelectSubset<T, SettingUpdateArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Settings.
     * @param {SettingDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.setting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingDeleteManyArgs>(args?: SelectSubset<T, SettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const setting = await prisma.setting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingUpdateManyArgs>(args: SelectSubset<T, SettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setting.
     * @param {SettingUpsertArgs} args - Arguments to update or create a Setting.
     * @example
     * // Update or create a Setting
     * const setting = await prisma.setting.upsert({
     *   create: {
     *     // ... data to create a Setting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setting we want to update
     *   }
     * })
     */
    upsert<T extends SettingUpsertArgs>(args: SelectSubset<T, SettingUpsertArgs<ExtArgs>>): Prisma__SettingClient<$Result.GetResult<Prisma.$SettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.setting.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingCountArgs>(
      args?: Subset<T, SettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingAggregateArgs>(args: Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

    /**
     * Group by Setting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingGroupByArgs['orderBy'] }
        : { orderBy?: SettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Setting model
   */
  readonly fields: SettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Setting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Setting model
   */ 
  interface SettingFieldRefs {
    readonly id: FieldRef<"Setting", 'String'>
    readonly key: FieldRef<"Setting", 'String'>
    readonly value: FieldRef<"Setting", 'Json'>
    readonly category: FieldRef<"Setting", 'String'>
    readonly isPublic: FieldRef<"Setting", 'Boolean'>
    readonly createdAt: FieldRef<"Setting", 'DateTime'>
    readonly updatedAt: FieldRef<"Setting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Setting findUnique
   */
  export type SettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findUniqueOrThrow
   */
  export type SettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting findFirst
   */
  export type SettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findFirstOrThrow
   */
  export type SettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Setting to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting findMany
   */
  export type SettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingOrderByWithRelationInput | SettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingScalarFieldEnum | SettingScalarFieldEnum[]
  }

  /**
   * Setting create
   */
  export type SettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to create a Setting.
     */
    data: XOR<SettingCreateInput, SettingUncheckedCreateInput>
  }

  /**
   * Setting createMany
   */
  export type SettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting createManyAndReturn
   */
  export type SettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Settings.
     */
    data: SettingCreateManyInput | SettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Setting update
   */
  export type SettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The data needed to update a Setting.
     */
    data: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
    /**
     * Choose, which Setting to update.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting updateMany
   */
  export type SettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingUpdateManyMutationInput, SettingUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingWhereInput
  }

  /**
   * Setting upsert
   */
  export type SettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * The filter to search for the Setting to update in case it exists.
     */
    where: SettingWhereUniqueInput
    /**
     * In case the Setting found by the `where` argument doesn't exist, create a new Setting with this data.
     */
    create: XOR<SettingCreateInput, SettingUncheckedCreateInput>
    /**
     * In case the Setting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingUpdateInput, SettingUncheckedUpdateInput>
  }

  /**
   * Setting delete
   */
  export type SettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
    /**
     * Filter which Setting to delete.
     */
    where: SettingWhereUniqueInput
  }

  /**
   * Setting deleteMany
   */
  export type SettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingWhereInput
  }

  /**
   * Setting without action
   */
  export type SettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Setting
     */
    select?: SettingSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    address: 'address',
    city: 'city',
    postalCode: 'postalCode',
    country: 'country',
    medicalHistory: 'medicalHistory',
    allergies: 'allergies',
    medications: 'medications',
    emergencyContact: 'emergencyContact',
    insuranceInfo: 'insuranceInfo',
    orthodonticHistory: 'orthodonticHistory',
    referralSource: 'referralSource',
    isActive: 'isActive',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const PhotoScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    filename: 'filename',
    originalName: 'originalName',
    cloudinaryId: 'cloudinaryId',
    cloudinaryUrl: 'cloudinaryUrl',
    category: 'category',
    subcategory: 'subcategory',
    description: 'description',
    tags: 'tags',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    width: 'width',
    height: 'height',
    treatmentPhaseId: 'treatmentPhaseId',
    appointmentId: 'appointmentId',
    isBeforeAfter: 'isBeforeAfter',
    beforeAfterPairId: 'beforeAfterPairId',
    uploadedBy: 'uploadedBy',
    uploadedAt: 'uploadedAt',
    updatedAt: 'updatedAt'
  };

  export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


  export const TreatmentPlanScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    title: 'title',
    description: 'description',
    diagnosis: 'diagnosis',
    treatmentGoals: 'treatmentGoals',
    estimatedDuration: 'estimatedDuration',
    complexity: 'complexity',
    initialAssessment: 'initialAssessment',
    treatmentOptions: 'treatmentOptions',
    selectedOption: 'selectedOption',
    appliancesUsed: 'appliancesUsed',
    materialsList: 'materialsList',
    status: 'status',
    startDate: 'startDate',
    estimatedEndDate: 'estimatedEndDate',
    actualEndDate: 'actualEndDate',
    totalCost: 'totalCost',
    paymentPlan: 'paymentPlan',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TreatmentPlanScalarFieldEnum = (typeof TreatmentPlanScalarFieldEnum)[keyof typeof TreatmentPlanScalarFieldEnum]


  export const TreatmentPhaseScalarFieldEnum: {
    id: 'id',
    treatmentPlanId: 'treatmentPlanId',
    patientId: 'patientId',
    phaseNumber: 'phaseNumber',
    title: 'title',
    description: 'description',
    objectives: 'objectives',
    appliances: 'appliances',
    instructions: 'instructions',
    startDate: 'startDate',
    estimatedEndDate: 'estimatedEndDate',
    actualEndDate: 'actualEndDate',
    status: 'status',
    progress: 'progress',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TreatmentPhaseScalarFieldEnum = (typeof TreatmentPhaseScalarFieldEnum)[keyof typeof TreatmentPhaseScalarFieldEnum]


  export const ClinicalNoteScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    treatmentPlanId: 'treatmentPlanId',
    treatmentPhaseId: 'treatmentPhaseId',
    appointmentId: 'appointmentId',
    title: 'title',
    content: 'content',
    noteType: 'noteType',
    tags: 'tags',
    observations: 'observations',
    recommendations: 'recommendations',
    nextSteps: 'nextSteps',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClinicalNoteScalarFieldEnum = (typeof ClinicalNoteScalarFieldEnum)[keyof typeof ClinicalNoteScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    treatmentPlanId: 'treatmentPlanId',
    treatmentPhaseId: 'treatmentPhaseId',
    appointmentDate: 'appointmentDate',
    appointmentTime: 'appointmentTime',
    duration: 'duration',
    appointmentType: 'appointmentType',
    status: 'status',
    notes: 'notes',
    reasonForVisit: 'reasonForVisit',
    treatmentPerformed: 'treatmentPerformed',
    legacyBookingId: 'legacyBookingId',
    bookingNumber: 'bookingNumber',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    treatmentPlanId: 'treatmentPlanId',
    amount: 'amount',
    currency: 'currency',
    paymentMethod: 'paymentMethod',
    transactionId: 'transactionId',
    description: 'description',
    notes: 'notes',
    status: 'status',
    dueDate: 'dueDate',
    paidDate: 'paidDate',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const SettingScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    category: 'category',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'PhotoCategory'
   */
  export type EnumPhotoCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhotoCategory'>
    


  /**
   * Reference to a field of type 'PhotoCategory[]'
   */
  export type ListEnumPhotoCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhotoCategory[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TreatmentComplexity'
   */
  export type EnumTreatmentComplexityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TreatmentComplexity'>
    


  /**
   * Reference to a field of type 'TreatmentComplexity[]'
   */
  export type ListEnumTreatmentComplexityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TreatmentComplexity[]'>
    


  /**
   * Reference to a field of type 'TreatmentStatus'
   */
  export type EnumTreatmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TreatmentStatus'>
    


  /**
   * Reference to a field of type 'TreatmentStatus[]'
   */
  export type ListEnumTreatmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TreatmentStatus[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'PhaseStatus'
   */
  export type EnumPhaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhaseStatus'>
    


  /**
   * Reference to a field of type 'PhaseStatus[]'
   */
  export type ListEnumPhaseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PhaseStatus[]'>
    


  /**
   * Reference to a field of type 'NoteType'
   */
  export type EnumNoteTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NoteType'>
    


  /**
   * Reference to a field of type 'NoteType[]'
   */
  export type ListEnumNoteTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NoteType[]'>
    


  /**
   * Reference to a field of type 'AppointmentType'
   */
  export type EnumAppointmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentType'>
    


  /**
   * Reference to a field of type 'AppointmentType[]'
   */
  export type ListEnumAppointmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentType[]'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    patients?: PatientListRelationFilter
    treatmentPlans?: TreatmentPlanListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    payments?: PaymentListRelationFilter
    createdPhotos?: PhotoListRelationFilter
    createdAppointments?: AppointmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patients?: PatientOrderByRelationAggregateInput
    treatmentPlans?: TreatmentPlanOrderByRelationAggregateInput
    clinicalNotes?: ClinicalNoteOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    createdPhotos?: PhotoOrderByRelationAggregateInput
    createdAppointments?: AppointmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    patients?: PatientListRelationFilter
    treatmentPlans?: TreatmentPlanListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    payments?: PaymentListRelationFilter
    createdPhotos?: PhotoListRelationFilter
    createdAppointments?: AppointmentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    firstName?: StringFilter<"Patient"> | string
    lastName?: StringFilter<"Patient"> | string
    email?: StringNullableFilter<"Patient"> | string | null
    phone?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Patient"> | $Enums.Gender | null
    address?: StringNullableFilter<"Patient"> | string | null
    city?: StringNullableFilter<"Patient"> | string | null
    postalCode?: StringNullableFilter<"Patient"> | string | null
    country?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableFilter<"Patient">
    allergies?: StringNullableFilter<"Patient"> | string | null
    medications?: StringNullableFilter<"Patient"> | string | null
    emergencyContact?: JsonNullableFilter<"Patient">
    insuranceInfo?: JsonNullableFilter<"Patient">
    orthodonticHistory?: JsonNullableFilter<"Patient">
    referralSource?: StringNullableFilter<"Patient"> | string | null
    isActive?: BoolFilter<"Patient"> | boolean
    createdBy?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    photos?: PhotoListRelationFilter
    treatmentPlans?: TreatmentPlanListRelationFilter
    appointments?: AppointmentListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    payments?: PaymentListRelationFilter
    treatmentPhases?: TreatmentPhaseListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    medications?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    insuranceInfo?: SortOrderInput | SortOrder
    orthodonticHistory?: SortOrderInput | SortOrder
    referralSource?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    creator?: UserOrderByWithRelationInput
    photos?: PhotoOrderByRelationAggregateInput
    treatmentPlans?: TreatmentPlanOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    clinicalNotes?: ClinicalNoteOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
    treatmentPhases?: TreatmentPhaseOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    firstName?: StringFilter<"Patient"> | string
    lastName?: StringFilter<"Patient"> | string
    phone?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Patient"> | $Enums.Gender | null
    address?: StringNullableFilter<"Patient"> | string | null
    city?: StringNullableFilter<"Patient"> | string | null
    postalCode?: StringNullableFilter<"Patient"> | string | null
    country?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableFilter<"Patient">
    allergies?: StringNullableFilter<"Patient"> | string | null
    medications?: StringNullableFilter<"Patient"> | string | null
    emergencyContact?: JsonNullableFilter<"Patient">
    insuranceInfo?: JsonNullableFilter<"Patient">
    orthodonticHistory?: JsonNullableFilter<"Patient">
    referralSource?: StringNullableFilter<"Patient"> | string | null
    isActive?: BoolFilter<"Patient"> | boolean
    createdBy?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    creator?: XOR<UserRelationFilter, UserWhereInput>
    photos?: PhotoListRelationFilter
    treatmentPlans?: TreatmentPlanListRelationFilter
    appointments?: AppointmentListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    payments?: PaymentListRelationFilter
    treatmentPhases?: TreatmentPhaseListRelationFilter
  }, "id" | "email">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    postalCode?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    medications?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    insuranceInfo?: SortOrderInput | SortOrder
    orthodonticHistory?: SortOrderInput | SortOrder
    referralSource?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    firstName?: StringWithAggregatesFilter<"Patient"> | string
    lastName?: StringWithAggregatesFilter<"Patient"> | string
    email?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"Patient"> | $Enums.Gender | null
    address?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    city?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    postalCode?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    country?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableWithAggregatesFilter<"Patient">
    allergies?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    medications?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    emergencyContact?: JsonNullableWithAggregatesFilter<"Patient">
    insuranceInfo?: JsonNullableWithAggregatesFilter<"Patient">
    orthodonticHistory?: JsonNullableWithAggregatesFilter<"Patient">
    referralSource?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    isActive?: BoolWithAggregatesFilter<"Patient"> | boolean
    createdBy?: StringWithAggregatesFilter<"Patient"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type PhotoWhereInput = {
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    id?: StringFilter<"Photo"> | string
    patientId?: StringFilter<"Photo"> | string
    filename?: StringFilter<"Photo"> | string
    originalName?: StringFilter<"Photo"> | string
    cloudinaryId?: StringFilter<"Photo"> | string
    cloudinaryUrl?: StringFilter<"Photo"> | string
    category?: EnumPhotoCategoryFilter<"Photo"> | $Enums.PhotoCategory
    subcategory?: StringNullableFilter<"Photo"> | string | null
    description?: StringNullableFilter<"Photo"> | string | null
    tags?: StringNullableListFilter<"Photo">
    fileSize?: IntFilter<"Photo"> | number
    mimeType?: StringFilter<"Photo"> | string
    width?: IntNullableFilter<"Photo"> | number | null
    height?: IntNullableFilter<"Photo"> | number | null
    treatmentPhaseId?: StringNullableFilter<"Photo"> | string | null
    appointmentId?: StringNullableFilter<"Photo"> | string | null
    isBeforeAfter?: BoolFilter<"Photo"> | boolean
    beforeAfterPairId?: StringNullableFilter<"Photo"> | string | null
    uploadedBy?: StringFilter<"Photo"> | string
    uploadedAt?: DateTimeFilter<"Photo"> | Date | string
    updatedAt?: DateTimeFilter<"Photo"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    uploader?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPhase?: XOR<TreatmentPhaseNullableRelationFilter, TreatmentPhaseWhereInput> | null
    appointment?: XOR<AppointmentNullableRelationFilter, AppointmentWhereInput> | null
  }

  export type PhotoOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    cloudinaryId?: SortOrder
    cloudinaryUrl?: SortOrder
    category?: SortOrder
    subcategory?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    tags?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    treatmentPhaseId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    isBeforeAfter?: SortOrder
    beforeAfterPairId?: SortOrderInput | SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    uploader?: UserOrderByWithRelationInput
    treatmentPhase?: TreatmentPhaseOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type PhotoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PhotoWhereInput | PhotoWhereInput[]
    OR?: PhotoWhereInput[]
    NOT?: PhotoWhereInput | PhotoWhereInput[]
    patientId?: StringFilter<"Photo"> | string
    filename?: StringFilter<"Photo"> | string
    originalName?: StringFilter<"Photo"> | string
    cloudinaryId?: StringFilter<"Photo"> | string
    cloudinaryUrl?: StringFilter<"Photo"> | string
    category?: EnumPhotoCategoryFilter<"Photo"> | $Enums.PhotoCategory
    subcategory?: StringNullableFilter<"Photo"> | string | null
    description?: StringNullableFilter<"Photo"> | string | null
    tags?: StringNullableListFilter<"Photo">
    fileSize?: IntFilter<"Photo"> | number
    mimeType?: StringFilter<"Photo"> | string
    width?: IntNullableFilter<"Photo"> | number | null
    height?: IntNullableFilter<"Photo"> | number | null
    treatmentPhaseId?: StringNullableFilter<"Photo"> | string | null
    appointmentId?: StringNullableFilter<"Photo"> | string | null
    isBeforeAfter?: BoolFilter<"Photo"> | boolean
    beforeAfterPairId?: StringNullableFilter<"Photo"> | string | null
    uploadedBy?: StringFilter<"Photo"> | string
    uploadedAt?: DateTimeFilter<"Photo"> | Date | string
    updatedAt?: DateTimeFilter<"Photo"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    uploader?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPhase?: XOR<TreatmentPhaseNullableRelationFilter, TreatmentPhaseWhereInput> | null
    appointment?: XOR<AppointmentNullableRelationFilter, AppointmentWhereInput> | null
  }, "id">

  export type PhotoOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    cloudinaryId?: SortOrder
    cloudinaryUrl?: SortOrder
    category?: SortOrder
    subcategory?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    tags?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    treatmentPhaseId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    isBeforeAfter?: SortOrder
    beforeAfterPairId?: SortOrderInput | SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PhotoCountOrderByAggregateInput
    _avg?: PhotoAvgOrderByAggregateInput
    _max?: PhotoMaxOrderByAggregateInput
    _min?: PhotoMinOrderByAggregateInput
    _sum?: PhotoSumOrderByAggregateInput
  }

  export type PhotoScalarWhereWithAggregatesInput = {
    AND?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    OR?: PhotoScalarWhereWithAggregatesInput[]
    NOT?: PhotoScalarWhereWithAggregatesInput | PhotoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Photo"> | string
    patientId?: StringWithAggregatesFilter<"Photo"> | string
    filename?: StringWithAggregatesFilter<"Photo"> | string
    originalName?: StringWithAggregatesFilter<"Photo"> | string
    cloudinaryId?: StringWithAggregatesFilter<"Photo"> | string
    cloudinaryUrl?: StringWithAggregatesFilter<"Photo"> | string
    category?: EnumPhotoCategoryWithAggregatesFilter<"Photo"> | $Enums.PhotoCategory
    subcategory?: StringNullableWithAggregatesFilter<"Photo"> | string | null
    description?: StringNullableWithAggregatesFilter<"Photo"> | string | null
    tags?: StringNullableListFilter<"Photo">
    fileSize?: IntWithAggregatesFilter<"Photo"> | number
    mimeType?: StringWithAggregatesFilter<"Photo"> | string
    width?: IntNullableWithAggregatesFilter<"Photo"> | number | null
    height?: IntNullableWithAggregatesFilter<"Photo"> | number | null
    treatmentPhaseId?: StringNullableWithAggregatesFilter<"Photo"> | string | null
    appointmentId?: StringNullableWithAggregatesFilter<"Photo"> | string | null
    isBeforeAfter?: BoolWithAggregatesFilter<"Photo"> | boolean
    beforeAfterPairId?: StringNullableWithAggregatesFilter<"Photo"> | string | null
    uploadedBy?: StringWithAggregatesFilter<"Photo"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"Photo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Photo"> | Date | string
  }

  export type TreatmentPlanWhereInput = {
    AND?: TreatmentPlanWhereInput | TreatmentPlanWhereInput[]
    OR?: TreatmentPlanWhereInput[]
    NOT?: TreatmentPlanWhereInput | TreatmentPlanWhereInput[]
    id?: StringFilter<"TreatmentPlan"> | string
    patientId?: StringFilter<"TreatmentPlan"> | string
    title?: StringFilter<"TreatmentPlan"> | string
    description?: StringNullableFilter<"TreatmentPlan"> | string | null
    diagnosis?: StringFilter<"TreatmentPlan"> | string
    treatmentGoals?: StringNullableListFilter<"TreatmentPlan">
    estimatedDuration?: IntNullableFilter<"TreatmentPlan"> | number | null
    complexity?: EnumTreatmentComplexityFilter<"TreatmentPlan"> | $Enums.TreatmentComplexity
    initialAssessment?: JsonFilter<"TreatmentPlan">
    treatmentOptions?: JsonFilter<"TreatmentPlan">
    selectedOption?: StringFilter<"TreatmentPlan"> | string
    appliancesUsed?: StringNullableListFilter<"TreatmentPlan">
    materialsList?: JsonNullableFilter<"TreatmentPlan">
    status?: EnumTreatmentStatusFilter<"TreatmentPlan"> | $Enums.TreatmentStatus
    startDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    estimatedEndDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    actualEndDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    totalCost?: DecimalNullableFilter<"TreatmentPlan"> | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: JsonNullableFilter<"TreatmentPlan">
    createdBy?: StringFilter<"TreatmentPlan"> | string
    createdAt?: DateTimeFilter<"TreatmentPlan"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentPlan"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    phases?: TreatmentPhaseListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    appointments?: AppointmentListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type TreatmentPlanOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    diagnosis?: SortOrder
    treatmentGoals?: SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    complexity?: SortOrder
    initialAssessment?: SortOrder
    treatmentOptions?: SortOrder
    selectedOption?: SortOrder
    appliancesUsed?: SortOrder
    materialsList?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    estimatedEndDate?: SortOrderInput | SortOrder
    actualEndDate?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    paymentPlan?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    phases?: TreatmentPhaseOrderByRelationAggregateInput
    clinicalNotes?: ClinicalNoteOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type TreatmentPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TreatmentPlanWhereInput | TreatmentPlanWhereInput[]
    OR?: TreatmentPlanWhereInput[]
    NOT?: TreatmentPlanWhereInput | TreatmentPlanWhereInput[]
    patientId?: StringFilter<"TreatmentPlan"> | string
    title?: StringFilter<"TreatmentPlan"> | string
    description?: StringNullableFilter<"TreatmentPlan"> | string | null
    diagnosis?: StringFilter<"TreatmentPlan"> | string
    treatmentGoals?: StringNullableListFilter<"TreatmentPlan">
    estimatedDuration?: IntNullableFilter<"TreatmentPlan"> | number | null
    complexity?: EnumTreatmentComplexityFilter<"TreatmentPlan"> | $Enums.TreatmentComplexity
    initialAssessment?: JsonFilter<"TreatmentPlan">
    treatmentOptions?: JsonFilter<"TreatmentPlan">
    selectedOption?: StringFilter<"TreatmentPlan"> | string
    appliancesUsed?: StringNullableListFilter<"TreatmentPlan">
    materialsList?: JsonNullableFilter<"TreatmentPlan">
    status?: EnumTreatmentStatusFilter<"TreatmentPlan"> | $Enums.TreatmentStatus
    startDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    estimatedEndDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    actualEndDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    totalCost?: DecimalNullableFilter<"TreatmentPlan"> | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: JsonNullableFilter<"TreatmentPlan">
    createdBy?: StringFilter<"TreatmentPlan"> | string
    createdAt?: DateTimeFilter<"TreatmentPlan"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentPlan"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    phases?: TreatmentPhaseListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    appointments?: AppointmentListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id">

  export type TreatmentPlanOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    diagnosis?: SortOrder
    treatmentGoals?: SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    complexity?: SortOrder
    initialAssessment?: SortOrder
    treatmentOptions?: SortOrder
    selectedOption?: SortOrder
    appliancesUsed?: SortOrder
    materialsList?: SortOrderInput | SortOrder
    status?: SortOrder
    startDate?: SortOrderInput | SortOrder
    estimatedEndDate?: SortOrderInput | SortOrder
    actualEndDate?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    paymentPlan?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TreatmentPlanCountOrderByAggregateInput
    _avg?: TreatmentPlanAvgOrderByAggregateInput
    _max?: TreatmentPlanMaxOrderByAggregateInput
    _min?: TreatmentPlanMinOrderByAggregateInput
    _sum?: TreatmentPlanSumOrderByAggregateInput
  }

  export type TreatmentPlanScalarWhereWithAggregatesInput = {
    AND?: TreatmentPlanScalarWhereWithAggregatesInput | TreatmentPlanScalarWhereWithAggregatesInput[]
    OR?: TreatmentPlanScalarWhereWithAggregatesInput[]
    NOT?: TreatmentPlanScalarWhereWithAggregatesInput | TreatmentPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TreatmentPlan"> | string
    patientId?: StringWithAggregatesFilter<"TreatmentPlan"> | string
    title?: StringWithAggregatesFilter<"TreatmentPlan"> | string
    description?: StringNullableWithAggregatesFilter<"TreatmentPlan"> | string | null
    diagnosis?: StringWithAggregatesFilter<"TreatmentPlan"> | string
    treatmentGoals?: StringNullableListFilter<"TreatmentPlan">
    estimatedDuration?: IntNullableWithAggregatesFilter<"TreatmentPlan"> | number | null
    complexity?: EnumTreatmentComplexityWithAggregatesFilter<"TreatmentPlan"> | $Enums.TreatmentComplexity
    initialAssessment?: JsonWithAggregatesFilter<"TreatmentPlan">
    treatmentOptions?: JsonWithAggregatesFilter<"TreatmentPlan">
    selectedOption?: StringWithAggregatesFilter<"TreatmentPlan"> | string
    appliancesUsed?: StringNullableListFilter<"TreatmentPlan">
    materialsList?: JsonNullableWithAggregatesFilter<"TreatmentPlan">
    status?: EnumTreatmentStatusWithAggregatesFilter<"TreatmentPlan"> | $Enums.TreatmentStatus
    startDate?: DateTimeNullableWithAggregatesFilter<"TreatmentPlan"> | Date | string | null
    estimatedEndDate?: DateTimeNullableWithAggregatesFilter<"TreatmentPlan"> | Date | string | null
    actualEndDate?: DateTimeNullableWithAggregatesFilter<"TreatmentPlan"> | Date | string | null
    totalCost?: DecimalNullableWithAggregatesFilter<"TreatmentPlan"> | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: JsonNullableWithAggregatesFilter<"TreatmentPlan">
    createdBy?: StringWithAggregatesFilter<"TreatmentPlan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TreatmentPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TreatmentPlan"> | Date | string
  }

  export type TreatmentPhaseWhereInput = {
    AND?: TreatmentPhaseWhereInput | TreatmentPhaseWhereInput[]
    OR?: TreatmentPhaseWhereInput[]
    NOT?: TreatmentPhaseWhereInput | TreatmentPhaseWhereInput[]
    id?: StringFilter<"TreatmentPhase"> | string
    treatmentPlanId?: StringFilter<"TreatmentPhase"> | string
    patientId?: StringFilter<"TreatmentPhase"> | string
    phaseNumber?: IntFilter<"TreatmentPhase"> | number
    title?: StringFilter<"TreatmentPhase"> | string
    description?: StringNullableFilter<"TreatmentPhase"> | string | null
    objectives?: StringNullableListFilter<"TreatmentPhase">
    appliances?: JsonFilter<"TreatmentPhase">
    instructions?: StringNullableFilter<"TreatmentPhase"> | string | null
    startDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    estimatedEndDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    actualEndDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    status?: EnumPhaseStatusFilter<"TreatmentPhase"> | $Enums.PhaseStatus
    progress?: IntFilter<"TreatmentPhase"> | number
    createdAt?: DateTimeFilter<"TreatmentPhase"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentPhase"> | Date | string
    treatmentPlan?: XOR<TreatmentPlanRelationFilter, TreatmentPlanWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    photos?: PhotoListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    appointments?: AppointmentListRelationFilter
  }

  export type TreatmentPhaseOrderByWithRelationInput = {
    id?: SortOrder
    treatmentPlanId?: SortOrder
    patientId?: SortOrder
    phaseNumber?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    objectives?: SortOrder
    appliances?: SortOrder
    instructions?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    estimatedEndDate?: SortOrderInput | SortOrder
    actualEndDate?: SortOrderInput | SortOrder
    status?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    treatmentPlan?: TreatmentPlanOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    photos?: PhotoOrderByRelationAggregateInput
    clinicalNotes?: ClinicalNoteOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type TreatmentPhaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TreatmentPhaseWhereInput | TreatmentPhaseWhereInput[]
    OR?: TreatmentPhaseWhereInput[]
    NOT?: TreatmentPhaseWhereInput | TreatmentPhaseWhereInput[]
    treatmentPlanId?: StringFilter<"TreatmentPhase"> | string
    patientId?: StringFilter<"TreatmentPhase"> | string
    phaseNumber?: IntFilter<"TreatmentPhase"> | number
    title?: StringFilter<"TreatmentPhase"> | string
    description?: StringNullableFilter<"TreatmentPhase"> | string | null
    objectives?: StringNullableListFilter<"TreatmentPhase">
    appliances?: JsonFilter<"TreatmentPhase">
    instructions?: StringNullableFilter<"TreatmentPhase"> | string | null
    startDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    estimatedEndDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    actualEndDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    status?: EnumPhaseStatusFilter<"TreatmentPhase"> | $Enums.PhaseStatus
    progress?: IntFilter<"TreatmentPhase"> | number
    createdAt?: DateTimeFilter<"TreatmentPhase"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentPhase"> | Date | string
    treatmentPlan?: XOR<TreatmentPlanRelationFilter, TreatmentPlanWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    photos?: PhotoListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
    appointments?: AppointmentListRelationFilter
  }, "id">

  export type TreatmentPhaseOrderByWithAggregationInput = {
    id?: SortOrder
    treatmentPlanId?: SortOrder
    patientId?: SortOrder
    phaseNumber?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    objectives?: SortOrder
    appliances?: SortOrder
    instructions?: SortOrderInput | SortOrder
    startDate?: SortOrderInput | SortOrder
    estimatedEndDate?: SortOrderInput | SortOrder
    actualEndDate?: SortOrderInput | SortOrder
    status?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TreatmentPhaseCountOrderByAggregateInput
    _avg?: TreatmentPhaseAvgOrderByAggregateInput
    _max?: TreatmentPhaseMaxOrderByAggregateInput
    _min?: TreatmentPhaseMinOrderByAggregateInput
    _sum?: TreatmentPhaseSumOrderByAggregateInput
  }

  export type TreatmentPhaseScalarWhereWithAggregatesInput = {
    AND?: TreatmentPhaseScalarWhereWithAggregatesInput | TreatmentPhaseScalarWhereWithAggregatesInput[]
    OR?: TreatmentPhaseScalarWhereWithAggregatesInput[]
    NOT?: TreatmentPhaseScalarWhereWithAggregatesInput | TreatmentPhaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TreatmentPhase"> | string
    treatmentPlanId?: StringWithAggregatesFilter<"TreatmentPhase"> | string
    patientId?: StringWithAggregatesFilter<"TreatmentPhase"> | string
    phaseNumber?: IntWithAggregatesFilter<"TreatmentPhase"> | number
    title?: StringWithAggregatesFilter<"TreatmentPhase"> | string
    description?: StringNullableWithAggregatesFilter<"TreatmentPhase"> | string | null
    objectives?: StringNullableListFilter<"TreatmentPhase">
    appliances?: JsonWithAggregatesFilter<"TreatmentPhase">
    instructions?: StringNullableWithAggregatesFilter<"TreatmentPhase"> | string | null
    startDate?: DateTimeNullableWithAggregatesFilter<"TreatmentPhase"> | Date | string | null
    estimatedEndDate?: DateTimeNullableWithAggregatesFilter<"TreatmentPhase"> | Date | string | null
    actualEndDate?: DateTimeNullableWithAggregatesFilter<"TreatmentPhase"> | Date | string | null
    status?: EnumPhaseStatusWithAggregatesFilter<"TreatmentPhase"> | $Enums.PhaseStatus
    progress?: IntWithAggregatesFilter<"TreatmentPhase"> | number
    createdAt?: DateTimeWithAggregatesFilter<"TreatmentPhase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TreatmentPhase"> | Date | string
  }

  export type ClinicalNoteWhereInput = {
    AND?: ClinicalNoteWhereInput | ClinicalNoteWhereInput[]
    OR?: ClinicalNoteWhereInput[]
    NOT?: ClinicalNoteWhereInput | ClinicalNoteWhereInput[]
    id?: StringFilter<"ClinicalNote"> | string
    patientId?: StringFilter<"ClinicalNote"> | string
    treatmentPlanId?: StringNullableFilter<"ClinicalNote"> | string | null
    treatmentPhaseId?: StringNullableFilter<"ClinicalNote"> | string | null
    appointmentId?: StringNullableFilter<"ClinicalNote"> | string | null
    title?: StringFilter<"ClinicalNote"> | string
    content?: StringFilter<"ClinicalNote"> | string
    noteType?: EnumNoteTypeFilter<"ClinicalNote"> | $Enums.NoteType
    tags?: StringNullableListFilter<"ClinicalNote">
    observations?: JsonNullableFilter<"ClinicalNote">
    recommendations?: StringNullableFilter<"ClinicalNote"> | string | null
    nextSteps?: StringNullableFilter<"ClinicalNote"> | string | null
    createdBy?: StringFilter<"ClinicalNote"> | string
    createdAt?: DateTimeFilter<"ClinicalNote"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicalNote"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPlan?: XOR<TreatmentPlanNullableRelationFilter, TreatmentPlanWhereInput> | null
    treatmentPhase?: XOR<TreatmentPhaseNullableRelationFilter, TreatmentPhaseWhereInput> | null
    appointment?: XOR<AppointmentNullableRelationFilter, AppointmentWhereInput> | null
  }

  export type ClinicalNoteOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrderInput | SortOrder
    treatmentPhaseId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    noteType?: SortOrder
    tags?: SortOrder
    observations?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    nextSteps?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    treatmentPlan?: TreatmentPlanOrderByWithRelationInput
    treatmentPhase?: TreatmentPhaseOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type ClinicalNoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClinicalNoteWhereInput | ClinicalNoteWhereInput[]
    OR?: ClinicalNoteWhereInput[]
    NOT?: ClinicalNoteWhereInput | ClinicalNoteWhereInput[]
    patientId?: StringFilter<"ClinicalNote"> | string
    treatmentPlanId?: StringNullableFilter<"ClinicalNote"> | string | null
    treatmentPhaseId?: StringNullableFilter<"ClinicalNote"> | string | null
    appointmentId?: StringNullableFilter<"ClinicalNote"> | string | null
    title?: StringFilter<"ClinicalNote"> | string
    content?: StringFilter<"ClinicalNote"> | string
    noteType?: EnumNoteTypeFilter<"ClinicalNote"> | $Enums.NoteType
    tags?: StringNullableListFilter<"ClinicalNote">
    observations?: JsonNullableFilter<"ClinicalNote">
    recommendations?: StringNullableFilter<"ClinicalNote"> | string | null
    nextSteps?: StringNullableFilter<"ClinicalNote"> | string | null
    createdBy?: StringFilter<"ClinicalNote"> | string
    createdAt?: DateTimeFilter<"ClinicalNote"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicalNote"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPlan?: XOR<TreatmentPlanNullableRelationFilter, TreatmentPlanWhereInput> | null
    treatmentPhase?: XOR<TreatmentPhaseNullableRelationFilter, TreatmentPhaseWhereInput> | null
    appointment?: XOR<AppointmentNullableRelationFilter, AppointmentWhereInput> | null
  }, "id">

  export type ClinicalNoteOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrderInput | SortOrder
    treatmentPhaseId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    title?: SortOrder
    content?: SortOrder
    noteType?: SortOrder
    tags?: SortOrder
    observations?: SortOrderInput | SortOrder
    recommendations?: SortOrderInput | SortOrder
    nextSteps?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClinicalNoteCountOrderByAggregateInput
    _max?: ClinicalNoteMaxOrderByAggregateInput
    _min?: ClinicalNoteMinOrderByAggregateInput
  }

  export type ClinicalNoteScalarWhereWithAggregatesInput = {
    AND?: ClinicalNoteScalarWhereWithAggregatesInput | ClinicalNoteScalarWhereWithAggregatesInput[]
    OR?: ClinicalNoteScalarWhereWithAggregatesInput[]
    NOT?: ClinicalNoteScalarWhereWithAggregatesInput | ClinicalNoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClinicalNote"> | string
    patientId?: StringWithAggregatesFilter<"ClinicalNote"> | string
    treatmentPlanId?: StringNullableWithAggregatesFilter<"ClinicalNote"> | string | null
    treatmentPhaseId?: StringNullableWithAggregatesFilter<"ClinicalNote"> | string | null
    appointmentId?: StringNullableWithAggregatesFilter<"ClinicalNote"> | string | null
    title?: StringWithAggregatesFilter<"ClinicalNote"> | string
    content?: StringWithAggregatesFilter<"ClinicalNote"> | string
    noteType?: EnumNoteTypeWithAggregatesFilter<"ClinicalNote"> | $Enums.NoteType
    tags?: StringNullableListFilter<"ClinicalNote">
    observations?: JsonNullableWithAggregatesFilter<"ClinicalNote">
    recommendations?: StringNullableWithAggregatesFilter<"ClinicalNote"> | string | null
    nextSteps?: StringNullableWithAggregatesFilter<"ClinicalNote"> | string | null
    createdBy?: StringWithAggregatesFilter<"ClinicalNote"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ClinicalNote"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClinicalNote"> | Date | string
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    treatmentPlanId?: StringNullableFilter<"Appointment"> | string | null
    treatmentPhaseId?: StringNullableFilter<"Appointment"> | string | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    appointmentTime?: StringFilter<"Appointment"> | string
    duration?: IntFilter<"Appointment"> | number
    appointmentType?: EnumAppointmentTypeFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    reasonForVisit?: StringNullableFilter<"Appointment"> | string | null
    treatmentPerformed?: StringNullableFilter<"Appointment"> | string | null
    legacyBookingId?: StringNullableFilter<"Appointment"> | string | null
    bookingNumber?: StringNullableFilter<"Appointment"> | string | null
    createdBy?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPlan?: XOR<TreatmentPlanNullableRelationFilter, TreatmentPlanWhereInput> | null
    treatmentPhase?: XOR<TreatmentPhaseNullableRelationFilter, TreatmentPhaseWhereInput> | null
    photos?: PhotoListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrderInput | SortOrder
    treatmentPhaseId?: SortOrderInput | SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    duration?: SortOrder
    appointmentType?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    reasonForVisit?: SortOrderInput | SortOrder
    treatmentPerformed?: SortOrderInput | SortOrder
    legacyBookingId?: SortOrderInput | SortOrder
    bookingNumber?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    treatmentPlan?: TreatmentPlanOrderByWithRelationInput
    treatmentPhase?: TreatmentPhaseOrderByWithRelationInput
    photos?: PhotoOrderByRelationAggregateInput
    clinicalNotes?: ClinicalNoteOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    legacyBookingId?: string
    bookingNumber?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    patientId?: StringFilter<"Appointment"> | string
    treatmentPlanId?: StringNullableFilter<"Appointment"> | string | null
    treatmentPhaseId?: StringNullableFilter<"Appointment"> | string | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    appointmentTime?: StringFilter<"Appointment"> | string
    duration?: IntFilter<"Appointment"> | number
    appointmentType?: EnumAppointmentTypeFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    reasonForVisit?: StringNullableFilter<"Appointment"> | string | null
    treatmentPerformed?: StringNullableFilter<"Appointment"> | string | null
    createdBy?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPlan?: XOR<TreatmentPlanNullableRelationFilter, TreatmentPlanWhereInput> | null
    treatmentPhase?: XOR<TreatmentPhaseNullableRelationFilter, TreatmentPhaseWhereInput> | null
    photos?: PhotoListRelationFilter
    clinicalNotes?: ClinicalNoteListRelationFilter
  }, "id" | "legacyBookingId" | "bookingNumber">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrderInput | SortOrder
    treatmentPhaseId?: SortOrderInput | SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    duration?: SortOrder
    appointmentType?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    reasonForVisit?: SortOrderInput | SortOrder
    treatmentPerformed?: SortOrderInput | SortOrder
    legacyBookingId?: SortOrderInput | SortOrder
    bookingNumber?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    patientId?: StringWithAggregatesFilter<"Appointment"> | string
    treatmentPlanId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    treatmentPhaseId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    appointmentDate?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    appointmentTime?: StringWithAggregatesFilter<"Appointment"> | string
    duration?: IntWithAggregatesFilter<"Appointment"> | number
    appointmentType?: EnumAppointmentTypeWithAggregatesFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    reasonForVisit?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    treatmentPerformed?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    legacyBookingId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    bookingNumber?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    createdBy?: StringWithAggregatesFilter<"Appointment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    patientId?: StringFilter<"Payment"> | string
    treatmentPlanId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Payment"> | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    transactionId?: StringNullableFilter<"Payment"> | string | null
    description?: StringNullableFilter<"Payment"> | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    dueDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    paidDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    createdBy?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPlan?: XOR<TreatmentPlanNullableRelationFilter, TreatmentPlanWhereInput> | null
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    paidDate?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    creator?: UserOrderByWithRelationInput
    treatmentPlan?: TreatmentPlanOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    transactionId?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    patientId?: StringFilter<"Payment"> | string
    treatmentPlanId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Payment"> | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    description?: StringNullableFilter<"Payment"> | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    dueDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    paidDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    createdBy?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    creator?: XOR<UserRelationFilter, UserWhereInput>
    treatmentPlan?: XOR<TreatmentPlanNullableRelationFilter, TreatmentPlanWhereInput> | null
  }, "id" | "transactionId">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    status?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    paidDate?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    patientId?: StringWithAggregatesFilter<"Payment"> | string
    treatmentPlanId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"Payment"> | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    transactionId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    description?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    status?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    dueDate?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    paidDate?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    createdBy?: StringWithAggregatesFilter<"Payment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type SettingWhereInput = {
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    id?: StringFilter<"Setting"> | string
    key?: StringFilter<"Setting"> | string
    value?: JsonFilter<"Setting">
    category?: StringFilter<"Setting"> | string
    isPublic?: BoolFilter<"Setting"> | boolean
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }

  export type SettingOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SettingWhereInput | SettingWhereInput[]
    OR?: SettingWhereInput[]
    NOT?: SettingWhereInput | SettingWhereInput[]
    value?: JsonFilter<"Setting">
    category?: StringFilter<"Setting"> | string
    isPublic?: BoolFilter<"Setting"> | boolean
    createdAt?: DateTimeFilter<"Setting"> | Date | string
    updatedAt?: DateTimeFilter<"Setting"> | Date | string
  }, "id" | "key">

  export type SettingOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingCountOrderByAggregateInput
    _max?: SettingMaxOrderByAggregateInput
    _min?: SettingMinOrderByAggregateInput
  }

  export type SettingScalarWhereWithAggregatesInput = {
    AND?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    OR?: SettingScalarWhereWithAggregatesInput[]
    NOT?: SettingScalarWhereWithAggregatesInput | SettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Setting"> | string
    key?: StringWithAggregatesFilter<"Setting"> | string
    value?: JsonWithAggregatesFilter<"Setting">
    category?: StringWithAggregatesFilter<"Setting"> | string
    isPublic?: BoolWithAggregatesFilter<"Setting"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Setting"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutCreatorInput
    payments?: PaymentCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientUncheckedCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutCreatorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoUncheckedCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUncheckedUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUncheckedUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPatientsInput
    photos?: PhotoCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPatientsNestedInput
    photos?: PhotoUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoCreateInput = {
    id?: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPhotosInput
    uploader: UserCreateNestedOneWithoutCreatedPhotosInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutPhotosInput
    appointment?: AppointmentCreateNestedOneWithoutPhotosInput
  }

  export type PhotoUncheckedCreateInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPhotosNestedInput
    uploader?: UserUpdateOneRequiredWithoutCreatedPhotosNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutPhotosNestedInput
    appointment?: AppointmentUpdateOneWithoutPhotosNestedInput
  }

  export type PhotoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoCreateManyInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPlanCreateInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutTreatmentPlansInput
    creator: UserCreateNestedOneWithoutTreatmentPlansInput
    phases?: TreatmentPhaseCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUncheckedCreateInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: TreatmentPhaseUncheckedCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput
    creator?: UserUpdateOneRequiredWithoutTreatmentPlansNestedInput
    phases?: TreatmentPhaseUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanCreateManyInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPhaseCreateInput = {
    id?: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlan: TreatmentPlanCreateNestedOneWithoutPhasesInput
    patient: PatientCreateNestedOneWithoutTreatmentPhasesInput
    photos?: PhotoCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseUncheckedCreateInput = {
    id?: string
    treatmentPlanId: string
    patientId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlan?: TreatmentPlanUpdateOneRequiredWithoutPhasesNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentPhasesNestedInput
    photos?: PhotoUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseCreateManyInput = {
    id?: string
    treatmentPlanId: string
    patientId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentPhaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPhaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteCreateInput = {
    id?: string
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutClinicalNotesInput
    creator: UserCreateNestedOneWithoutClinicalNotesInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutClinicalNotesInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutClinicalNotesInput
    appointment?: AppointmentCreateNestedOneWithoutClinicalNotesInput
  }

  export type ClinicalNoteUncheckedCreateInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutClinicalNotesNestedInput
    creator?: UserUpdateOneRequiredWithoutClinicalNotesNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutClinicalNotesNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutClinicalNotesNestedInput
    appointment?: AppointmentUpdateOneWithoutClinicalNotesNestedInput
  }

  export type ClinicalNoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteCreateManyInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateInput = {
    id?: string
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    creator: UserCreateNestedOneWithoutCreatedAppointmentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutAppointmentsInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutAppointmentsInput
    photos?: PhotoCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutAppointmentsNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutAppointmentsNestedInput
    photos?: PhotoUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPaymentsInput
    creator: UserCreateNestedOneWithoutPaymentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    creator?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    category: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUncheckedCreateInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    category: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingCreateManyInput = {
    id?: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    category: string
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    category?: StringFieldUpdateOperationsInput | string
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type TreatmentPlanListRelationFilter = {
    every?: TreatmentPlanWhereInput
    some?: TreatmentPlanWhereInput
    none?: TreatmentPlanWhereInput
  }

  export type ClinicalNoteListRelationFilter = {
    every?: ClinicalNoteWhereInput
    some?: ClinicalNoteWhereInput
    none?: ClinicalNoteWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type PhotoListRelationFilter = {
    every?: PhotoWhereInput
    some?: PhotoWhereInput
    none?: PhotoWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TreatmentPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClinicalNoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PhotoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TreatmentPhaseListRelationFilter = {
    every?: TreatmentPhaseWhereInput
    some?: TreatmentPhaseWhereInput
    none?: TreatmentPhaseWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TreatmentPhaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    medicalHistory?: SortOrder
    allergies?: SortOrder
    medications?: SortOrder
    emergencyContact?: SortOrder
    insuranceInfo?: SortOrder
    orthodonticHistory?: SortOrder
    referralSource?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    allergies?: SortOrder
    medications?: SortOrder
    referralSource?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    country?: SortOrder
    allergies?: SortOrder
    medications?: SortOrder
    referralSource?: SortOrder
    isActive?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumPhotoCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoCategory | EnumPhotoCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoCategoryFilter<$PrismaModel> | $Enums.PhotoCategory
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type TreatmentPhaseNullableRelationFilter = {
    is?: TreatmentPhaseWhereInput | null
    isNot?: TreatmentPhaseWhereInput | null
  }

  export type AppointmentNullableRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type PhotoCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    cloudinaryId?: SortOrder
    cloudinaryUrl?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    description?: SortOrder
    tags?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentId?: SortOrder
    isBeforeAfter?: SortOrder
    beforeAfterPairId?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhotoAvgOrderByAggregateInput = {
    fileSize?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type PhotoMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    cloudinaryId?: SortOrder
    cloudinaryUrl?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    description?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentId?: SortOrder
    isBeforeAfter?: SortOrder
    beforeAfterPairId?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhotoMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    cloudinaryId?: SortOrder
    cloudinaryUrl?: SortOrder
    category?: SortOrder
    subcategory?: SortOrder
    description?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    width?: SortOrder
    height?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentId?: SortOrder
    isBeforeAfter?: SortOrder
    beforeAfterPairId?: SortOrder
    uploadedBy?: SortOrder
    uploadedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhotoSumOrderByAggregateInput = {
    fileSize?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type EnumPhotoCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoCategory | EnumPhotoCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoCategoryWithAggregatesFilter<$PrismaModel> | $Enums.PhotoCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhotoCategoryFilter<$PrismaModel>
    _max?: NestedEnumPhotoCategoryFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTreatmentComplexityFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentComplexity | EnumTreatmentComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentComplexityFilter<$PrismaModel> | $Enums.TreatmentComplexity
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumTreatmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentStatusFilter<$PrismaModel> | $Enums.TreatmentStatus
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type TreatmentPlanCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    diagnosis?: SortOrder
    treatmentGoals?: SortOrder
    estimatedDuration?: SortOrder
    complexity?: SortOrder
    initialAssessment?: SortOrder
    treatmentOptions?: SortOrder
    selectedOption?: SortOrder
    appliancesUsed?: SortOrder
    materialsList?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    estimatedEndDate?: SortOrder
    actualEndDate?: SortOrder
    totalCost?: SortOrder
    paymentPlan?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentPlanAvgOrderByAggregateInput = {
    estimatedDuration?: SortOrder
    totalCost?: SortOrder
  }

  export type TreatmentPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    diagnosis?: SortOrder
    estimatedDuration?: SortOrder
    complexity?: SortOrder
    selectedOption?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    estimatedEndDate?: SortOrder
    actualEndDate?: SortOrder
    totalCost?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentPlanMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    diagnosis?: SortOrder
    estimatedDuration?: SortOrder
    complexity?: SortOrder
    selectedOption?: SortOrder
    status?: SortOrder
    startDate?: SortOrder
    estimatedEndDate?: SortOrder
    actualEndDate?: SortOrder
    totalCost?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentPlanSumOrderByAggregateInput = {
    estimatedDuration?: SortOrder
    totalCost?: SortOrder
  }

  export type EnumTreatmentComplexityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentComplexity | EnumTreatmentComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentComplexityWithAggregatesFilter<$PrismaModel> | $Enums.TreatmentComplexity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTreatmentComplexityFilter<$PrismaModel>
    _max?: NestedEnumTreatmentComplexityFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumTreatmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.TreatmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTreatmentStatusFilter<$PrismaModel>
    _max?: NestedEnumTreatmentStatusFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumPhaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusFilter<$PrismaModel> | $Enums.PhaseStatus
  }

  export type TreatmentPlanRelationFilter = {
    is?: TreatmentPlanWhereInput
    isNot?: TreatmentPlanWhereInput
  }

  export type TreatmentPhaseCountOrderByAggregateInput = {
    id?: SortOrder
    treatmentPlanId?: SortOrder
    patientId?: SortOrder
    phaseNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    objectives?: SortOrder
    appliances?: SortOrder
    instructions?: SortOrder
    startDate?: SortOrder
    estimatedEndDate?: SortOrder
    actualEndDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentPhaseAvgOrderByAggregateInput = {
    phaseNumber?: SortOrder
    progress?: SortOrder
  }

  export type TreatmentPhaseMaxOrderByAggregateInput = {
    id?: SortOrder
    treatmentPlanId?: SortOrder
    patientId?: SortOrder
    phaseNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    startDate?: SortOrder
    estimatedEndDate?: SortOrder
    actualEndDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentPhaseMinOrderByAggregateInput = {
    id?: SortOrder
    treatmentPlanId?: SortOrder
    patientId?: SortOrder
    phaseNumber?: SortOrder
    title?: SortOrder
    description?: SortOrder
    instructions?: SortOrder
    startDate?: SortOrder
    estimatedEndDate?: SortOrder
    actualEndDate?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TreatmentPhaseSumOrderByAggregateInput = {
    phaseNumber?: SortOrder
    progress?: SortOrder
  }

  export type EnumPhaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.PhaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhaseStatusFilter<$PrismaModel>
    _max?: NestedEnumPhaseStatusFilter<$PrismaModel>
  }

  export type EnumNoteTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NoteType | EnumNoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNoteTypeFilter<$PrismaModel> | $Enums.NoteType
  }

  export type TreatmentPlanNullableRelationFilter = {
    is?: TreatmentPlanWhereInput | null
    isNot?: TreatmentPlanWhereInput | null
  }

  export type ClinicalNoteCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    noteType?: SortOrder
    tags?: SortOrder
    observations?: SortOrder
    recommendations?: SortOrder
    nextSteps?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClinicalNoteMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    noteType?: SortOrder
    recommendations?: SortOrder
    nextSteps?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClinicalNoteMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    noteType?: SortOrder
    recommendations?: SortOrder
    nextSteps?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNoteTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NoteType | EnumNoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNoteTypeWithAggregatesFilter<$PrismaModel> | $Enums.NoteType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNoteTypeFilter<$PrismaModel>
    _max?: NestedEnumNoteTypeFilter<$PrismaModel>
  }

  export type EnumAppointmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentTypeFilter<$PrismaModel> | $Enums.AppointmentType
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    duration?: SortOrder
    appointmentType?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    reasonForVisit?: SortOrder
    treatmentPerformed?: SortOrder
    legacyBookingId?: SortOrder
    bookingNumber?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    duration?: SortOrder
    appointmentType?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    reasonForVisit?: SortOrder
    treatmentPerformed?: SortOrder
    legacyBookingId?: SortOrder
    bookingNumber?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    treatmentPhaseId?: SortOrder
    appointmentDate?: SortOrder
    appointmentTime?: SortOrder
    duration?: SortOrder
    appointmentType?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    reasonForVisit?: SortOrder
    treatmentPerformed?: SortOrder
    legacyBookingId?: SortOrder
    bookingNumber?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type EnumAppointmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAppointmentTypeFilter<$PrismaModel>
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    description?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    description?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    treatmentPlanId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    description?: SortOrder
    notes?: SortOrder
    status?: SortOrder
    dueDate?: SortOrder
    paidDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type SettingCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    category?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientCreateNestedManyWithoutCreatorInput = {
    create?: XOR<PatientCreateWithoutCreatorInput, PatientUncheckedCreateWithoutCreatorInput> | PatientCreateWithoutCreatorInput[] | PatientUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatorInput | PatientCreateOrConnectWithoutCreatorInput[]
    createMany?: PatientCreateManyCreatorInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type TreatmentPlanCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TreatmentPlanCreateWithoutCreatorInput, TreatmentPlanUncheckedCreateWithoutCreatorInput> | TreatmentPlanCreateWithoutCreatorInput[] | TreatmentPlanUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutCreatorInput | TreatmentPlanCreateOrConnectWithoutCreatorInput[]
    createMany?: TreatmentPlanCreateManyCreatorInputEnvelope
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
  }

  export type ClinicalNoteCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClinicalNoteCreateWithoutCreatorInput, ClinicalNoteUncheckedCreateWithoutCreatorInput> | ClinicalNoteCreateWithoutCreatorInput[] | ClinicalNoteUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutCreatorInput | ClinicalNoteCreateOrConnectWithoutCreatorInput[]
    createMany?: ClinicalNoteCreateManyCreatorInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<PaymentCreateWithoutCreatorInput, PaymentUncheckedCreateWithoutCreatorInput> | PaymentCreateWithoutCreatorInput[] | PaymentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatorInput | PaymentCreateOrConnectWithoutCreatorInput[]
    createMany?: PaymentCreateManyCreatorInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PhotoCreateNestedManyWithoutUploaderInput = {
    create?: XOR<PhotoCreateWithoutUploaderInput, PhotoUncheckedCreateWithoutUploaderInput> | PhotoCreateWithoutUploaderInput[] | PhotoUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutUploaderInput | PhotoCreateOrConnectWithoutUploaderInput[]
    createMany?: PhotoCreateManyUploaderInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<PatientCreateWithoutCreatorInput, PatientUncheckedCreateWithoutCreatorInput> | PatientCreateWithoutCreatorInput[] | PatientUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatorInput | PatientCreateOrConnectWithoutCreatorInput[]
    createMany?: PatientCreateManyCreatorInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type TreatmentPlanUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<TreatmentPlanCreateWithoutCreatorInput, TreatmentPlanUncheckedCreateWithoutCreatorInput> | TreatmentPlanCreateWithoutCreatorInput[] | TreatmentPlanUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutCreatorInput | TreatmentPlanCreateOrConnectWithoutCreatorInput[]
    createMany?: TreatmentPlanCreateManyCreatorInputEnvelope
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
  }

  export type ClinicalNoteUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClinicalNoteCreateWithoutCreatorInput, ClinicalNoteUncheckedCreateWithoutCreatorInput> | ClinicalNoteCreateWithoutCreatorInput[] | ClinicalNoteUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutCreatorInput | ClinicalNoteCreateOrConnectWithoutCreatorInput[]
    createMany?: ClinicalNoteCreateManyCreatorInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<PaymentCreateWithoutCreatorInput, PaymentUncheckedCreateWithoutCreatorInput> | PaymentCreateWithoutCreatorInput[] | PaymentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatorInput | PaymentCreateOrConnectWithoutCreatorInput[]
    createMany?: PaymentCreateManyCreatorInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PhotoUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<PhotoCreateWithoutUploaderInput, PhotoUncheckedCreateWithoutUploaderInput> | PhotoCreateWithoutUploaderInput[] | PhotoUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutUploaderInput | PhotoCreateOrConnectWithoutUploaderInput[]
    createMany?: PhotoCreateManyUploaderInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PatientUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<PatientCreateWithoutCreatorInput, PatientUncheckedCreateWithoutCreatorInput> | PatientCreateWithoutCreatorInput[] | PatientUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatorInput | PatientCreateOrConnectWithoutCreatorInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatorInput | PatientUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: PatientCreateManyCreatorInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatorInput | PatientUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatorInput | PatientUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type TreatmentPlanUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutCreatorInput, TreatmentPlanUncheckedCreateWithoutCreatorInput> | TreatmentPlanCreateWithoutCreatorInput[] | TreatmentPlanUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutCreatorInput | TreatmentPlanCreateOrConnectWithoutCreatorInput[]
    upsert?: TreatmentPlanUpsertWithWhereUniqueWithoutCreatorInput | TreatmentPlanUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TreatmentPlanCreateManyCreatorInputEnvelope
    set?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    disconnect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    delete?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    update?: TreatmentPlanUpdateWithWhereUniqueWithoutCreatorInput | TreatmentPlanUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TreatmentPlanUpdateManyWithWhereWithoutCreatorInput | TreatmentPlanUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TreatmentPlanScalarWhereInput | TreatmentPlanScalarWhereInput[]
  }

  export type ClinicalNoteUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutCreatorInput, ClinicalNoteUncheckedCreateWithoutCreatorInput> | ClinicalNoteCreateWithoutCreatorInput[] | ClinicalNoteUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutCreatorInput | ClinicalNoteCreateOrConnectWithoutCreatorInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutCreatorInput | ClinicalNoteUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClinicalNoteCreateManyCreatorInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutCreatorInput | ClinicalNoteUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutCreatorInput | ClinicalNoteUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<PaymentCreateWithoutCreatorInput, PaymentUncheckedCreateWithoutCreatorInput> | PaymentCreateWithoutCreatorInput[] | PaymentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatorInput | PaymentCreateOrConnectWithoutCreatorInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCreatorInput | PaymentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: PaymentCreateManyCreatorInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCreatorInput | PaymentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCreatorInput | PaymentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PhotoUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<PhotoCreateWithoutUploaderInput, PhotoUncheckedCreateWithoutUploaderInput> | PhotoCreateWithoutUploaderInput[] | PhotoUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutUploaderInput | PhotoCreateOrConnectWithoutUploaderInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutUploaderInput | PhotoUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: PhotoCreateManyUploaderInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutUploaderInput | PhotoUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutUploaderInput | PhotoUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatorInput | AppointmentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatorInput | AppointmentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatorInput | AppointmentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<PatientCreateWithoutCreatorInput, PatientUncheckedCreateWithoutCreatorInput> | PatientCreateWithoutCreatorInput[] | PatientUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatorInput | PatientCreateOrConnectWithoutCreatorInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatorInput | PatientUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: PatientCreateManyCreatorInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatorInput | PatientUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatorInput | PatientUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type TreatmentPlanUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutCreatorInput, TreatmentPlanUncheckedCreateWithoutCreatorInput> | TreatmentPlanCreateWithoutCreatorInput[] | TreatmentPlanUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutCreatorInput | TreatmentPlanCreateOrConnectWithoutCreatorInput[]
    upsert?: TreatmentPlanUpsertWithWhereUniqueWithoutCreatorInput | TreatmentPlanUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: TreatmentPlanCreateManyCreatorInputEnvelope
    set?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    disconnect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    delete?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    update?: TreatmentPlanUpdateWithWhereUniqueWithoutCreatorInput | TreatmentPlanUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: TreatmentPlanUpdateManyWithWhereWithoutCreatorInput | TreatmentPlanUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: TreatmentPlanScalarWhereInput | TreatmentPlanScalarWhereInput[]
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutCreatorInput, ClinicalNoteUncheckedCreateWithoutCreatorInput> | ClinicalNoteCreateWithoutCreatorInput[] | ClinicalNoteUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutCreatorInput | ClinicalNoteCreateOrConnectWithoutCreatorInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutCreatorInput | ClinicalNoteUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClinicalNoteCreateManyCreatorInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutCreatorInput | ClinicalNoteUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutCreatorInput | ClinicalNoteUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<PaymentCreateWithoutCreatorInput, PaymentUncheckedCreateWithoutCreatorInput> | PaymentCreateWithoutCreatorInput[] | PaymentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatorInput | PaymentCreateOrConnectWithoutCreatorInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCreatorInput | PaymentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: PaymentCreateManyCreatorInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCreatorInput | PaymentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCreatorInput | PaymentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PhotoUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<PhotoCreateWithoutUploaderInput, PhotoUncheckedCreateWithoutUploaderInput> | PhotoCreateWithoutUploaderInput[] | PhotoUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutUploaderInput | PhotoCreateOrConnectWithoutUploaderInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutUploaderInput | PhotoUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: PhotoCreateManyUploaderInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutUploaderInput | PhotoUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutUploaderInput | PhotoUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput> | AppointmentCreateWithoutCreatorInput[] | AppointmentUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatorInput | AppointmentCreateOrConnectWithoutCreatorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatorInput | AppointmentUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: AppointmentCreateManyCreatorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatorInput | AppointmentUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatorInput | AppointmentUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPatientsInput = {
    create?: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsInput
    connect?: UserWhereUniqueInput
  }

  export type PhotoCreateNestedManyWithoutPatientInput = {
    create?: XOR<PhotoCreateWithoutPatientInput, PhotoUncheckedCreateWithoutPatientInput> | PhotoCreateWithoutPatientInput[] | PhotoUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutPatientInput | PhotoCreateOrConnectWithoutPatientInput[]
    createMany?: PhotoCreateManyPatientInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type TreatmentPlanCreateNestedManyWithoutPatientInput = {
    create?: XOR<TreatmentPlanCreateWithoutPatientInput, TreatmentPlanUncheckedCreateWithoutPatientInput> | TreatmentPlanCreateWithoutPatientInput[] | TreatmentPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPatientInput | TreatmentPlanCreateOrConnectWithoutPatientInput[]
    createMany?: TreatmentPlanCreateManyPatientInputEnvelope
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ClinicalNoteCreateNestedManyWithoutPatientInput = {
    create?: XOR<ClinicalNoteCreateWithoutPatientInput, ClinicalNoteUncheckedCreateWithoutPatientInput> | ClinicalNoteCreateWithoutPatientInput[] | ClinicalNoteUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutPatientInput | ClinicalNoteCreateOrConnectWithoutPatientInput[]
    createMany?: ClinicalNoteCreateManyPatientInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutPatientInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type TreatmentPhaseCreateNestedManyWithoutPatientInput = {
    create?: XOR<TreatmentPhaseCreateWithoutPatientInput, TreatmentPhaseUncheckedCreateWithoutPatientInput> | TreatmentPhaseCreateWithoutPatientInput[] | TreatmentPhaseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutPatientInput | TreatmentPhaseCreateOrConnectWithoutPatientInput[]
    createMany?: TreatmentPhaseCreateManyPatientInputEnvelope
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
  }

  export type PhotoUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PhotoCreateWithoutPatientInput, PhotoUncheckedCreateWithoutPatientInput> | PhotoCreateWithoutPatientInput[] | PhotoUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutPatientInput | PhotoCreateOrConnectWithoutPatientInput[]
    createMany?: PhotoCreateManyPatientInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<TreatmentPlanCreateWithoutPatientInput, TreatmentPlanUncheckedCreateWithoutPatientInput> | TreatmentPlanCreateWithoutPatientInput[] | TreatmentPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPatientInput | TreatmentPlanCreateOrConnectWithoutPatientInput[]
    createMany?: TreatmentPlanCreateManyPatientInputEnvelope
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<ClinicalNoteCreateWithoutPatientInput, ClinicalNoteUncheckedCreateWithoutPatientInput> | ClinicalNoteCreateWithoutPatientInput[] | ClinicalNoteUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutPatientInput | ClinicalNoteCreateOrConnectWithoutPatientInput[]
    createMany?: ClinicalNoteCreateManyPatientInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<TreatmentPhaseCreateWithoutPatientInput, TreatmentPhaseUncheckedCreateWithoutPatientInput> | TreatmentPhaseCreateWithoutPatientInput[] | TreatmentPhaseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutPatientInput | TreatmentPhaseCreateOrConnectWithoutPatientInput[]
    createMany?: TreatmentPhaseCreateManyPatientInputEnvelope
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type UserUpdateOneRequiredWithoutPatientsNestedInput = {
    create?: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsInput
    upsert?: UserUpsertWithoutPatientsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientsInput, UserUpdateWithoutPatientsInput>, UserUncheckedUpdateWithoutPatientsInput>
  }

  export type PhotoUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PhotoCreateWithoutPatientInput, PhotoUncheckedCreateWithoutPatientInput> | PhotoCreateWithoutPatientInput[] | PhotoUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutPatientInput | PhotoCreateOrConnectWithoutPatientInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutPatientInput | PhotoUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PhotoCreateManyPatientInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutPatientInput | PhotoUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutPatientInput | PhotoUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type TreatmentPlanUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutPatientInput, TreatmentPlanUncheckedCreateWithoutPatientInput> | TreatmentPlanCreateWithoutPatientInput[] | TreatmentPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPatientInput | TreatmentPlanCreateOrConnectWithoutPatientInput[]
    upsert?: TreatmentPlanUpsertWithWhereUniqueWithoutPatientInput | TreatmentPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TreatmentPlanCreateManyPatientInputEnvelope
    set?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    disconnect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    delete?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    update?: TreatmentPlanUpdateWithWhereUniqueWithoutPatientInput | TreatmentPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TreatmentPlanUpdateManyWithWhereWithoutPatientInput | TreatmentPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TreatmentPlanScalarWhereInput | TreatmentPlanScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ClinicalNoteUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutPatientInput, ClinicalNoteUncheckedCreateWithoutPatientInput> | ClinicalNoteCreateWithoutPatientInput[] | ClinicalNoteUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutPatientInput | ClinicalNoteCreateOrConnectWithoutPatientInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutPatientInput | ClinicalNoteUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ClinicalNoteCreateManyPatientInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutPatientInput | ClinicalNoteUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutPatientInput | ClinicalNoteUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPatientInput | PaymentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPatientInput | PaymentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPatientInput | PaymentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type TreatmentPhaseUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TreatmentPhaseCreateWithoutPatientInput, TreatmentPhaseUncheckedCreateWithoutPatientInput> | TreatmentPhaseCreateWithoutPatientInput[] | TreatmentPhaseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutPatientInput | TreatmentPhaseCreateOrConnectWithoutPatientInput[]
    upsert?: TreatmentPhaseUpsertWithWhereUniqueWithoutPatientInput | TreatmentPhaseUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TreatmentPhaseCreateManyPatientInputEnvelope
    set?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    disconnect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    delete?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    update?: TreatmentPhaseUpdateWithWhereUniqueWithoutPatientInput | TreatmentPhaseUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TreatmentPhaseUpdateManyWithWhereWithoutPatientInput | TreatmentPhaseUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TreatmentPhaseScalarWhereInput | TreatmentPhaseScalarWhereInput[]
  }

  export type PhotoUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PhotoCreateWithoutPatientInput, PhotoUncheckedCreateWithoutPatientInput> | PhotoCreateWithoutPatientInput[] | PhotoUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutPatientInput | PhotoCreateOrConnectWithoutPatientInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutPatientInput | PhotoUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PhotoCreateManyPatientInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutPatientInput | PhotoUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutPatientInput | PhotoUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutPatientInput, TreatmentPlanUncheckedCreateWithoutPatientInput> | TreatmentPlanCreateWithoutPatientInput[] | TreatmentPlanUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPatientInput | TreatmentPlanCreateOrConnectWithoutPatientInput[]
    upsert?: TreatmentPlanUpsertWithWhereUniqueWithoutPatientInput | TreatmentPlanUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TreatmentPlanCreateManyPatientInputEnvelope
    set?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    disconnect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    delete?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    connect?: TreatmentPlanWhereUniqueInput | TreatmentPlanWhereUniqueInput[]
    update?: TreatmentPlanUpdateWithWhereUniqueWithoutPatientInput | TreatmentPlanUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TreatmentPlanUpdateManyWithWhereWithoutPatientInput | TreatmentPlanUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TreatmentPlanScalarWhereInput | TreatmentPlanScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutPatientInput, ClinicalNoteUncheckedCreateWithoutPatientInput> | ClinicalNoteCreateWithoutPatientInput[] | ClinicalNoteUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutPatientInput | ClinicalNoteCreateOrConnectWithoutPatientInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutPatientInput | ClinicalNoteUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: ClinicalNoteCreateManyPatientInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutPatientInput | ClinicalNoteUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutPatientInput | ClinicalNoteUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPatientInput | PaymentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPatientInput | PaymentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPatientInput | PaymentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<TreatmentPhaseCreateWithoutPatientInput, TreatmentPhaseUncheckedCreateWithoutPatientInput> | TreatmentPhaseCreateWithoutPatientInput[] | TreatmentPhaseUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutPatientInput | TreatmentPhaseCreateOrConnectWithoutPatientInput[]
    upsert?: TreatmentPhaseUpsertWithWhereUniqueWithoutPatientInput | TreatmentPhaseUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: TreatmentPhaseCreateManyPatientInputEnvelope
    set?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    disconnect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    delete?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    update?: TreatmentPhaseUpdateWithWhereUniqueWithoutPatientInput | TreatmentPhaseUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: TreatmentPhaseUpdateManyWithWhereWithoutPatientInput | TreatmentPhaseUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: TreatmentPhaseScalarWhereInput | TreatmentPhaseScalarWhereInput[]
  }

  export type PhotoCreatetagsInput = {
    set: string[]
  }

  export type PatientCreateNestedOneWithoutPhotosInput = {
    create?: XOR<PatientCreateWithoutPhotosInput, PatientUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPhotosInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedPhotosInput = {
    create?: XOR<UserCreateWithoutCreatedPhotosInput, UserUncheckedCreateWithoutCreatedPhotosInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPhotosInput
    connect?: UserWhereUniqueInput
  }

  export type TreatmentPhaseCreateNestedOneWithoutPhotosInput = {
    create?: XOR<TreatmentPhaseCreateWithoutPhotosInput, TreatmentPhaseUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutPhotosInput
    connect?: TreatmentPhaseWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutPhotosInput = {
    create?: XOR<AppointmentCreateWithoutPhotosInput, AppointmentUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPhotosInput
    connect?: AppointmentWhereUniqueInput
  }

  export type EnumPhotoCategoryFieldUpdateOperationsInput = {
    set?: $Enums.PhotoCategory
  }

  export type PhotoUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUpdateOneRequiredWithoutPhotosNestedInput = {
    create?: XOR<PatientCreateWithoutPhotosInput, PatientUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPhotosInput
    upsert?: PatientUpsertWithoutPhotosInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPhotosInput, PatientUpdateWithoutPhotosInput>, PatientUncheckedUpdateWithoutPhotosInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedPhotosNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPhotosInput, UserUncheckedCreateWithoutCreatedPhotosInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPhotosInput
    upsert?: UserUpsertWithoutCreatedPhotosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPhotosInput, UserUpdateWithoutCreatedPhotosInput>, UserUncheckedUpdateWithoutCreatedPhotosInput>
  }

  export type TreatmentPhaseUpdateOneWithoutPhotosNestedInput = {
    create?: XOR<TreatmentPhaseCreateWithoutPhotosInput, TreatmentPhaseUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutPhotosInput
    upsert?: TreatmentPhaseUpsertWithoutPhotosInput
    disconnect?: TreatmentPhaseWhereInput | boolean
    delete?: TreatmentPhaseWhereInput | boolean
    connect?: TreatmentPhaseWhereUniqueInput
    update?: XOR<XOR<TreatmentPhaseUpdateToOneWithWhereWithoutPhotosInput, TreatmentPhaseUpdateWithoutPhotosInput>, TreatmentPhaseUncheckedUpdateWithoutPhotosInput>
  }

  export type AppointmentUpdateOneWithoutPhotosNestedInput = {
    create?: XOR<AppointmentCreateWithoutPhotosInput, AppointmentUncheckedCreateWithoutPhotosInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPhotosInput
    upsert?: AppointmentUpsertWithoutPhotosInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutPhotosInput, AppointmentUpdateWithoutPhotosInput>, AppointmentUncheckedUpdateWithoutPhotosInput>
  }

  export type TreatmentPlanCreatetreatmentGoalsInput = {
    set: string[]
  }

  export type TreatmentPlanCreateappliancesUsedInput = {
    set: string[]
  }

  export type PatientCreateNestedOneWithoutTreatmentPlansInput = {
    create?: XOR<PatientCreateWithoutTreatmentPlansInput, PatientUncheckedCreateWithoutTreatmentPlansInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentPlansInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTreatmentPlansInput = {
    create?: XOR<UserCreateWithoutTreatmentPlansInput, UserUncheckedCreateWithoutTreatmentPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutTreatmentPlansInput
    connect?: UserWhereUniqueInput
  }

  export type TreatmentPhaseCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<TreatmentPhaseCreateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput> | TreatmentPhaseCreateWithoutTreatmentPlanInput[] | TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput | TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: TreatmentPhaseCreateManyTreatmentPlanInputEnvelope
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
  }

  export type ClinicalNoteCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPlanInput, ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput> | ClinicalNoteCreateWithoutTreatmentPlanInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput | ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPlanInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPlanInput, AppointmentUncheckedCreateWithoutTreatmentPlanInput> | AppointmentCreateWithoutTreatmentPlanInput[] | AppointmentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPlanInput | AppointmentCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: AppointmentCreateManyTreatmentPlanInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<PaymentCreateWithoutTreatmentPlanInput, PaymentUncheckedCreateWithoutTreatmentPlanInput> | PaymentCreateWithoutTreatmentPlanInput[] | PaymentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTreatmentPlanInput | PaymentCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: PaymentCreateManyTreatmentPlanInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type TreatmentPhaseUncheckedCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<TreatmentPhaseCreateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput> | TreatmentPhaseCreateWithoutTreatmentPlanInput[] | TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput | TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: TreatmentPhaseCreateManyTreatmentPlanInputEnvelope
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
  }

  export type ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPlanInput, ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput> | ClinicalNoteCreateWithoutTreatmentPlanInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput | ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPlanInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPlanInput, AppointmentUncheckedCreateWithoutTreatmentPlanInput> | AppointmentCreateWithoutTreatmentPlanInput[] | AppointmentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPlanInput | AppointmentCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: AppointmentCreateManyTreatmentPlanInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutTreatmentPlanInput = {
    create?: XOR<PaymentCreateWithoutTreatmentPlanInput, PaymentUncheckedCreateWithoutTreatmentPlanInput> | PaymentCreateWithoutTreatmentPlanInput[] | PaymentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTreatmentPlanInput | PaymentCreateOrConnectWithoutTreatmentPlanInput[]
    createMany?: PaymentCreateManyTreatmentPlanInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type TreatmentPlanUpdatetreatmentGoalsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumTreatmentComplexityFieldUpdateOperationsInput = {
    set?: $Enums.TreatmentComplexity
  }

  export type TreatmentPlanUpdateappliancesUsedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumTreatmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.TreatmentStatus
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput = {
    create?: XOR<PatientCreateWithoutTreatmentPlansInput, PatientUncheckedCreateWithoutTreatmentPlansInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentPlansInput
    upsert?: PatientUpsertWithoutTreatmentPlansInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutTreatmentPlansInput, PatientUpdateWithoutTreatmentPlansInput>, PatientUncheckedUpdateWithoutTreatmentPlansInput>
  }

  export type UserUpdateOneRequiredWithoutTreatmentPlansNestedInput = {
    create?: XOR<UserCreateWithoutTreatmentPlansInput, UserUncheckedCreateWithoutTreatmentPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutTreatmentPlansInput
    upsert?: UserUpsertWithoutTreatmentPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTreatmentPlansInput, UserUpdateWithoutTreatmentPlansInput>, UserUncheckedUpdateWithoutTreatmentPlansInput>
  }

  export type TreatmentPhaseUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<TreatmentPhaseCreateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput> | TreatmentPhaseCreateWithoutTreatmentPlanInput[] | TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput | TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: TreatmentPhaseUpsertWithWhereUniqueWithoutTreatmentPlanInput | TreatmentPhaseUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: TreatmentPhaseCreateManyTreatmentPlanInputEnvelope
    set?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    disconnect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    delete?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    update?: TreatmentPhaseUpdateWithWhereUniqueWithoutTreatmentPlanInput | TreatmentPhaseUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: TreatmentPhaseUpdateManyWithWhereWithoutTreatmentPlanInput | TreatmentPhaseUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: TreatmentPhaseScalarWhereInput | TreatmentPhaseScalarWhereInput[]
  }

  export type ClinicalNoteUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPlanInput, ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput> | ClinicalNoteCreateWithoutTreatmentPlanInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput | ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPlanInput | ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPlanInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPlanInput | ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutTreatmentPlanInput | ClinicalNoteUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPlanInput, AppointmentUncheckedCreateWithoutTreatmentPlanInput> | AppointmentCreateWithoutTreatmentPlanInput[] | AppointmentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPlanInput | AppointmentCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTreatmentPlanInput | AppointmentUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: AppointmentCreateManyTreatmentPlanInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTreatmentPlanInput | AppointmentUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTreatmentPlanInput | AppointmentUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<PaymentCreateWithoutTreatmentPlanInput, PaymentUncheckedCreateWithoutTreatmentPlanInput> | PaymentCreateWithoutTreatmentPlanInput[] | PaymentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTreatmentPlanInput | PaymentCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutTreatmentPlanInput | PaymentUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: PaymentCreateManyTreatmentPlanInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutTreatmentPlanInput | PaymentUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutTreatmentPlanInput | PaymentUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<TreatmentPhaseCreateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput> | TreatmentPhaseCreateWithoutTreatmentPlanInput[] | TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput | TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: TreatmentPhaseUpsertWithWhereUniqueWithoutTreatmentPlanInput | TreatmentPhaseUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: TreatmentPhaseCreateManyTreatmentPlanInputEnvelope
    set?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    disconnect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    delete?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    connect?: TreatmentPhaseWhereUniqueInput | TreatmentPhaseWhereUniqueInput[]
    update?: TreatmentPhaseUpdateWithWhereUniqueWithoutTreatmentPlanInput | TreatmentPhaseUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: TreatmentPhaseUpdateManyWithWhereWithoutTreatmentPlanInput | TreatmentPhaseUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: TreatmentPhaseScalarWhereInput | TreatmentPhaseScalarWhereInput[]
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPlanInput, ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput> | ClinicalNoteCreateWithoutTreatmentPlanInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput | ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPlanInput | ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPlanInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPlanInput | ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutTreatmentPlanInput | ClinicalNoteUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPlanInput, AppointmentUncheckedCreateWithoutTreatmentPlanInput> | AppointmentCreateWithoutTreatmentPlanInput[] | AppointmentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPlanInput | AppointmentCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTreatmentPlanInput | AppointmentUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: AppointmentCreateManyTreatmentPlanInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTreatmentPlanInput | AppointmentUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTreatmentPlanInput | AppointmentUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutTreatmentPlanNestedInput = {
    create?: XOR<PaymentCreateWithoutTreatmentPlanInput, PaymentUncheckedCreateWithoutTreatmentPlanInput> | PaymentCreateWithoutTreatmentPlanInput[] | PaymentUncheckedCreateWithoutTreatmentPlanInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutTreatmentPlanInput | PaymentCreateOrConnectWithoutTreatmentPlanInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutTreatmentPlanInput | PaymentUpsertWithWhereUniqueWithoutTreatmentPlanInput[]
    createMany?: PaymentCreateManyTreatmentPlanInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutTreatmentPlanInput | PaymentUpdateWithWhereUniqueWithoutTreatmentPlanInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutTreatmentPlanInput | PaymentUpdateManyWithWhereWithoutTreatmentPlanInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type TreatmentPhaseCreateobjectivesInput = {
    set: string[]
  }

  export type TreatmentPlanCreateNestedOneWithoutPhasesInput = {
    create?: XOR<TreatmentPlanCreateWithoutPhasesInput, TreatmentPlanUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPhasesInput
    connect?: TreatmentPlanWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutTreatmentPhasesInput = {
    create?: XOR<PatientCreateWithoutTreatmentPhasesInput, PatientUncheckedCreateWithoutTreatmentPhasesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentPhasesInput
    connect?: PatientWhereUniqueInput
  }

  export type PhotoCreateNestedManyWithoutTreatmentPhaseInput = {
    create?: XOR<PhotoCreateWithoutTreatmentPhaseInput, PhotoUncheckedCreateWithoutTreatmentPhaseInput> | PhotoCreateWithoutTreatmentPhaseInput[] | PhotoUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutTreatmentPhaseInput | PhotoCreateOrConnectWithoutTreatmentPhaseInput[]
    createMany?: PhotoCreateManyTreatmentPhaseInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type ClinicalNoteCreateNestedManyWithoutTreatmentPhaseInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput> | ClinicalNoteCreateWithoutTreatmentPhaseInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput | ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPhaseInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutTreatmentPhaseInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPhaseInput, AppointmentUncheckedCreateWithoutTreatmentPhaseInput> | AppointmentCreateWithoutTreatmentPhaseInput[] | AppointmentUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPhaseInput | AppointmentCreateOrConnectWithoutTreatmentPhaseInput[]
    createMany?: AppointmentCreateManyTreatmentPhaseInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PhotoUncheckedCreateNestedManyWithoutTreatmentPhaseInput = {
    create?: XOR<PhotoCreateWithoutTreatmentPhaseInput, PhotoUncheckedCreateWithoutTreatmentPhaseInput> | PhotoCreateWithoutTreatmentPhaseInput[] | PhotoUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutTreatmentPhaseInput | PhotoCreateOrConnectWithoutTreatmentPhaseInput[]
    createMany?: PhotoCreateManyTreatmentPhaseInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPhaseInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput> | ClinicalNoteCreateWithoutTreatmentPhaseInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput | ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPhaseInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutTreatmentPhaseInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPhaseInput, AppointmentUncheckedCreateWithoutTreatmentPhaseInput> | AppointmentCreateWithoutTreatmentPhaseInput[] | AppointmentUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPhaseInput | AppointmentCreateOrConnectWithoutTreatmentPhaseInput[]
    createMany?: AppointmentCreateManyTreatmentPhaseInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type TreatmentPhaseUpdateobjectivesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumPhaseStatusFieldUpdateOperationsInput = {
    set?: $Enums.PhaseStatus
  }

  export type TreatmentPlanUpdateOneRequiredWithoutPhasesNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutPhasesInput, TreatmentPlanUncheckedCreateWithoutPhasesInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPhasesInput
    upsert?: TreatmentPlanUpsertWithoutPhasesInput
    connect?: TreatmentPlanWhereUniqueInput
    update?: XOR<XOR<TreatmentPlanUpdateToOneWithWhereWithoutPhasesInput, TreatmentPlanUpdateWithoutPhasesInput>, TreatmentPlanUncheckedUpdateWithoutPhasesInput>
  }

  export type PatientUpdateOneRequiredWithoutTreatmentPhasesNestedInput = {
    create?: XOR<PatientCreateWithoutTreatmentPhasesInput, PatientUncheckedCreateWithoutTreatmentPhasesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutTreatmentPhasesInput
    upsert?: PatientUpsertWithoutTreatmentPhasesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutTreatmentPhasesInput, PatientUpdateWithoutTreatmentPhasesInput>, PatientUncheckedUpdateWithoutTreatmentPhasesInput>
  }

  export type PhotoUpdateManyWithoutTreatmentPhaseNestedInput = {
    create?: XOR<PhotoCreateWithoutTreatmentPhaseInput, PhotoUncheckedCreateWithoutTreatmentPhaseInput> | PhotoCreateWithoutTreatmentPhaseInput[] | PhotoUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutTreatmentPhaseInput | PhotoCreateOrConnectWithoutTreatmentPhaseInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutTreatmentPhaseInput | PhotoUpsertWithWhereUniqueWithoutTreatmentPhaseInput[]
    createMany?: PhotoCreateManyTreatmentPhaseInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutTreatmentPhaseInput | PhotoUpdateWithWhereUniqueWithoutTreatmentPhaseInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutTreatmentPhaseInput | PhotoUpdateManyWithWhereWithoutTreatmentPhaseInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type ClinicalNoteUpdateManyWithoutTreatmentPhaseNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput> | ClinicalNoteCreateWithoutTreatmentPhaseInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput | ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPhaseInput | ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPhaseInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPhaseInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPhaseInput | ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPhaseInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutTreatmentPhaseInput | ClinicalNoteUpdateManyWithWhereWithoutTreatmentPhaseInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutTreatmentPhaseNestedInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPhaseInput, AppointmentUncheckedCreateWithoutTreatmentPhaseInput> | AppointmentCreateWithoutTreatmentPhaseInput[] | AppointmentUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPhaseInput | AppointmentCreateOrConnectWithoutTreatmentPhaseInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTreatmentPhaseInput | AppointmentUpsertWithWhereUniqueWithoutTreatmentPhaseInput[]
    createMany?: AppointmentCreateManyTreatmentPhaseInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTreatmentPhaseInput | AppointmentUpdateWithWhereUniqueWithoutTreatmentPhaseInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTreatmentPhaseInput | AppointmentUpdateManyWithWhereWithoutTreatmentPhaseInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PhotoUncheckedUpdateManyWithoutTreatmentPhaseNestedInput = {
    create?: XOR<PhotoCreateWithoutTreatmentPhaseInput, PhotoUncheckedCreateWithoutTreatmentPhaseInput> | PhotoCreateWithoutTreatmentPhaseInput[] | PhotoUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutTreatmentPhaseInput | PhotoCreateOrConnectWithoutTreatmentPhaseInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutTreatmentPhaseInput | PhotoUpsertWithWhereUniqueWithoutTreatmentPhaseInput[]
    createMany?: PhotoCreateManyTreatmentPhaseInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutTreatmentPhaseInput | PhotoUpdateWithWhereUniqueWithoutTreatmentPhaseInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutTreatmentPhaseInput | PhotoUpdateManyWithWhereWithoutTreatmentPhaseInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput> | ClinicalNoteCreateWithoutTreatmentPhaseInput[] | ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput | ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPhaseInput | ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPhaseInput[]
    createMany?: ClinicalNoteCreateManyTreatmentPhaseInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPhaseInput | ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPhaseInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutTreatmentPhaseInput | ClinicalNoteUpdateManyWithWhereWithoutTreatmentPhaseInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutTreatmentPhaseNestedInput = {
    create?: XOR<AppointmentCreateWithoutTreatmentPhaseInput, AppointmentUncheckedCreateWithoutTreatmentPhaseInput> | AppointmentCreateWithoutTreatmentPhaseInput[] | AppointmentUncheckedCreateWithoutTreatmentPhaseInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutTreatmentPhaseInput | AppointmentCreateOrConnectWithoutTreatmentPhaseInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutTreatmentPhaseInput | AppointmentUpsertWithWhereUniqueWithoutTreatmentPhaseInput[]
    createMany?: AppointmentCreateManyTreatmentPhaseInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutTreatmentPhaseInput | AppointmentUpdateWithWhereUniqueWithoutTreatmentPhaseInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutTreatmentPhaseInput | AppointmentUpdateManyWithWhereWithoutTreatmentPhaseInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ClinicalNoteCreatetagsInput = {
    set: string[]
  }

  export type PatientCreateNestedOneWithoutClinicalNotesInput = {
    create?: XOR<PatientCreateWithoutClinicalNotesInput, PatientUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutClinicalNotesInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutClinicalNotesInput = {
    create?: XOR<UserCreateWithoutClinicalNotesInput, UserUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClinicalNotesInput
    connect?: UserWhereUniqueInput
  }

  export type TreatmentPlanCreateNestedOneWithoutClinicalNotesInput = {
    create?: XOR<TreatmentPlanCreateWithoutClinicalNotesInput, TreatmentPlanUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutClinicalNotesInput
    connect?: TreatmentPlanWhereUniqueInput
  }

  export type TreatmentPhaseCreateNestedOneWithoutClinicalNotesInput = {
    create?: XOR<TreatmentPhaseCreateWithoutClinicalNotesInput, TreatmentPhaseUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutClinicalNotesInput
    connect?: TreatmentPhaseWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutClinicalNotesInput = {
    create?: XOR<AppointmentCreateWithoutClinicalNotesInput, AppointmentUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutClinicalNotesInput
    connect?: AppointmentWhereUniqueInput
  }

  export type EnumNoteTypeFieldUpdateOperationsInput = {
    set?: $Enums.NoteType
  }

  export type ClinicalNoteUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PatientUpdateOneRequiredWithoutClinicalNotesNestedInput = {
    create?: XOR<PatientCreateWithoutClinicalNotesInput, PatientUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutClinicalNotesInput
    upsert?: PatientUpsertWithoutClinicalNotesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutClinicalNotesInput, PatientUpdateWithoutClinicalNotesInput>, PatientUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type UserUpdateOneRequiredWithoutClinicalNotesNestedInput = {
    create?: XOR<UserCreateWithoutClinicalNotesInput, UserUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutClinicalNotesInput
    upsert?: UserUpsertWithoutClinicalNotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClinicalNotesInput, UserUpdateWithoutClinicalNotesInput>, UserUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type TreatmentPlanUpdateOneWithoutClinicalNotesNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutClinicalNotesInput, TreatmentPlanUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutClinicalNotesInput
    upsert?: TreatmentPlanUpsertWithoutClinicalNotesInput
    disconnect?: TreatmentPlanWhereInput | boolean
    delete?: TreatmentPlanWhereInput | boolean
    connect?: TreatmentPlanWhereUniqueInput
    update?: XOR<XOR<TreatmentPlanUpdateToOneWithWhereWithoutClinicalNotesInput, TreatmentPlanUpdateWithoutClinicalNotesInput>, TreatmentPlanUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type TreatmentPhaseUpdateOneWithoutClinicalNotesNestedInput = {
    create?: XOR<TreatmentPhaseCreateWithoutClinicalNotesInput, TreatmentPhaseUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutClinicalNotesInput
    upsert?: TreatmentPhaseUpsertWithoutClinicalNotesInput
    disconnect?: TreatmentPhaseWhereInput | boolean
    delete?: TreatmentPhaseWhereInput | boolean
    connect?: TreatmentPhaseWhereUniqueInput
    update?: XOR<XOR<TreatmentPhaseUpdateToOneWithWhereWithoutClinicalNotesInput, TreatmentPhaseUpdateWithoutClinicalNotesInput>, TreatmentPhaseUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type AppointmentUpdateOneWithoutClinicalNotesNestedInput = {
    create?: XOR<AppointmentCreateWithoutClinicalNotesInput, AppointmentUncheckedCreateWithoutClinicalNotesInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutClinicalNotesInput
    upsert?: AppointmentUpsertWithoutClinicalNotesInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutClinicalNotesInput, AppointmentUpdateWithoutClinicalNotesInput>, AppointmentUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type PatientCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAppointmentsInput = {
    create?: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type TreatmentPlanCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<TreatmentPlanCreateWithoutAppointmentsInput, TreatmentPlanUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutAppointmentsInput
    connect?: TreatmentPlanWhereUniqueInput
  }

  export type TreatmentPhaseCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<TreatmentPhaseCreateWithoutAppointmentsInput, TreatmentPhaseUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutAppointmentsInput
    connect?: TreatmentPhaseWhereUniqueInput
  }

  export type PhotoCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<PhotoCreateWithoutAppointmentInput, PhotoUncheckedCreateWithoutAppointmentInput> | PhotoCreateWithoutAppointmentInput[] | PhotoUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutAppointmentInput | PhotoCreateOrConnectWithoutAppointmentInput[]
    createMany?: PhotoCreateManyAppointmentInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type ClinicalNoteCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<ClinicalNoteCreateWithoutAppointmentInput, ClinicalNoteUncheckedCreateWithoutAppointmentInput> | ClinicalNoteCreateWithoutAppointmentInput[] | ClinicalNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutAppointmentInput | ClinicalNoteCreateOrConnectWithoutAppointmentInput[]
    createMany?: ClinicalNoteCreateManyAppointmentInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type PhotoUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<PhotoCreateWithoutAppointmentInput, PhotoUncheckedCreateWithoutAppointmentInput> | PhotoCreateWithoutAppointmentInput[] | PhotoUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutAppointmentInput | PhotoCreateOrConnectWithoutAppointmentInput[]
    createMany?: PhotoCreateManyAppointmentInputEnvelope
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
  }

  export type ClinicalNoteUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<ClinicalNoteCreateWithoutAppointmentInput, ClinicalNoteUncheckedCreateWithoutAppointmentInput> | ClinicalNoteCreateWithoutAppointmentInput[] | ClinicalNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutAppointmentInput | ClinicalNoteCreateOrConnectWithoutAppointmentInput[]
    createMany?: ClinicalNoteCreateManyAppointmentInputEnvelope
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
  }

  export type EnumAppointmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentType
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type PatientUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    upsert?: PatientUpsertWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAppointmentsInput, PatientUpdateWithoutAppointmentsInput>, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAppointmentsInput
    upsert?: UserUpsertWithoutCreatedAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAppointmentsInput, UserUpdateWithoutCreatedAppointmentsInput>, UserUncheckedUpdateWithoutCreatedAppointmentsInput>
  }

  export type TreatmentPlanUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutAppointmentsInput, TreatmentPlanUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutAppointmentsInput
    upsert?: TreatmentPlanUpsertWithoutAppointmentsInput
    disconnect?: TreatmentPlanWhereInput | boolean
    delete?: TreatmentPlanWhereInput | boolean
    connect?: TreatmentPlanWhereUniqueInput
    update?: XOR<XOR<TreatmentPlanUpdateToOneWithWhereWithoutAppointmentsInput, TreatmentPlanUpdateWithoutAppointmentsInput>, TreatmentPlanUncheckedUpdateWithoutAppointmentsInput>
  }

  export type TreatmentPhaseUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<TreatmentPhaseCreateWithoutAppointmentsInput, TreatmentPhaseUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: TreatmentPhaseCreateOrConnectWithoutAppointmentsInput
    upsert?: TreatmentPhaseUpsertWithoutAppointmentsInput
    disconnect?: TreatmentPhaseWhereInput | boolean
    delete?: TreatmentPhaseWhereInput | boolean
    connect?: TreatmentPhaseWhereUniqueInput
    update?: XOR<XOR<TreatmentPhaseUpdateToOneWithWhereWithoutAppointmentsInput, TreatmentPhaseUpdateWithoutAppointmentsInput>, TreatmentPhaseUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PhotoUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<PhotoCreateWithoutAppointmentInput, PhotoUncheckedCreateWithoutAppointmentInput> | PhotoCreateWithoutAppointmentInput[] | PhotoUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutAppointmentInput | PhotoCreateOrConnectWithoutAppointmentInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutAppointmentInput | PhotoUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: PhotoCreateManyAppointmentInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutAppointmentInput | PhotoUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutAppointmentInput | PhotoUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type ClinicalNoteUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutAppointmentInput, ClinicalNoteUncheckedCreateWithoutAppointmentInput> | ClinicalNoteCreateWithoutAppointmentInput[] | ClinicalNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutAppointmentInput | ClinicalNoteCreateOrConnectWithoutAppointmentInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutAppointmentInput | ClinicalNoteUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: ClinicalNoteCreateManyAppointmentInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutAppointmentInput | ClinicalNoteUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutAppointmentInput | ClinicalNoteUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type PhotoUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<PhotoCreateWithoutAppointmentInput, PhotoUncheckedCreateWithoutAppointmentInput> | PhotoCreateWithoutAppointmentInput[] | PhotoUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PhotoCreateOrConnectWithoutAppointmentInput | PhotoCreateOrConnectWithoutAppointmentInput[]
    upsert?: PhotoUpsertWithWhereUniqueWithoutAppointmentInput | PhotoUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: PhotoCreateManyAppointmentInputEnvelope
    set?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    disconnect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    delete?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    connect?: PhotoWhereUniqueInput | PhotoWhereUniqueInput[]
    update?: PhotoUpdateWithWhereUniqueWithoutAppointmentInput | PhotoUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: PhotoUpdateManyWithWhereWithoutAppointmentInput | PhotoUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<ClinicalNoteCreateWithoutAppointmentInput, ClinicalNoteUncheckedCreateWithoutAppointmentInput> | ClinicalNoteCreateWithoutAppointmentInput[] | ClinicalNoteUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: ClinicalNoteCreateOrConnectWithoutAppointmentInput | ClinicalNoteCreateOrConnectWithoutAppointmentInput[]
    upsert?: ClinicalNoteUpsertWithWhereUniqueWithoutAppointmentInput | ClinicalNoteUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: ClinicalNoteCreateManyAppointmentInputEnvelope
    set?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    disconnect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    delete?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    connect?: ClinicalNoteWhereUniqueInput | ClinicalNoteWhereUniqueInput[]
    update?: ClinicalNoteUpdateWithWhereUniqueWithoutAppointmentInput | ClinicalNoteUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: ClinicalNoteUpdateManyWithWhereWithoutAppointmentInput | ClinicalNoteUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPaymentsInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type TreatmentPlanCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<TreatmentPlanCreateWithoutPaymentsInput, TreatmentPlanUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPaymentsInput
    connect?: TreatmentPlanWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type PatientUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPaymentsInput
    upsert?: PatientUpsertWithoutPaymentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPaymentsInput, PatientUpdateWithoutPaymentsInput>, PatientUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    upsert?: UserUpsertWithoutPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentsInput, UserUpdateWithoutPaymentsInput>, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type TreatmentPlanUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<TreatmentPlanCreateWithoutPaymentsInput, TreatmentPlanUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: TreatmentPlanCreateOrConnectWithoutPaymentsInput
    upsert?: TreatmentPlanUpsertWithoutPaymentsInput
    disconnect?: TreatmentPlanWhereInput | boolean
    delete?: TreatmentPlanWhereInput | boolean
    connect?: TreatmentPlanWhereUniqueInput
    update?: XOR<XOR<TreatmentPlanUpdateToOneWithWhereWithoutPaymentsInput, TreatmentPlanUpdateWithoutPaymentsInput>, TreatmentPlanUncheckedUpdateWithoutPaymentsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumPhotoCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoCategory | EnumPhotoCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoCategoryFilter<$PrismaModel> | $Enums.PhotoCategory
  }

  export type NestedEnumPhotoCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhotoCategory | EnumPhotoCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhotoCategory[] | ListEnumPhotoCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPhotoCategoryWithAggregatesFilter<$PrismaModel> | $Enums.PhotoCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhotoCategoryFilter<$PrismaModel>
    _max?: NestedEnumPhotoCategoryFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTreatmentComplexityFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentComplexity | EnumTreatmentComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentComplexityFilter<$PrismaModel> | $Enums.TreatmentComplexity
  }

  export type NestedEnumTreatmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentStatusFilter<$PrismaModel> | $Enums.TreatmentStatus
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumTreatmentComplexityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentComplexity | EnumTreatmentComplexityFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentComplexity[] | ListEnumTreatmentComplexityFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentComplexityWithAggregatesFilter<$PrismaModel> | $Enums.TreatmentComplexity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTreatmentComplexityFilter<$PrismaModel>
    _max?: NestedEnumTreatmentComplexityFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumTreatmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TreatmentStatus | EnumTreatmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TreatmentStatus[] | ListEnumTreatmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTreatmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.TreatmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTreatmentStatusFilter<$PrismaModel>
    _max?: NestedEnumTreatmentStatusFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumPhaseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusFilter<$PrismaModel> | $Enums.PhaseStatus
  }

  export type NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PhaseStatus | EnumPhaseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PhaseStatus[] | ListEnumPhaseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPhaseStatusWithAggregatesFilter<$PrismaModel> | $Enums.PhaseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPhaseStatusFilter<$PrismaModel>
    _max?: NestedEnumPhaseStatusFilter<$PrismaModel>
  }

  export type NestedEnumNoteTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NoteType | EnumNoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNoteTypeFilter<$PrismaModel> | $Enums.NoteType
  }

  export type NestedEnumNoteTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NoteType | EnumNoteTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NoteType[] | ListEnumNoteTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNoteTypeWithAggregatesFilter<$PrismaModel> | $Enums.NoteType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNoteTypeFilter<$PrismaModel>
    _max?: NestedEnumNoteTypeFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentTypeFilter<$PrismaModel> | $Enums.AppointmentType
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentType | EnumAppointmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentType[] | ListEnumAppointmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAppointmentTypeFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type PatientCreateWithoutCreatorInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutCreatorInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutCreatorInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutCreatorInput, PatientUncheckedCreateWithoutCreatorInput>
  }

  export type PatientCreateManyCreatorInputEnvelope = {
    data: PatientCreateManyCreatorInput | PatientCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentPlanCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutTreatmentPlansInput
    phases?: TreatmentPhaseCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUncheckedCreateWithoutCreatorInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: TreatmentPhaseUncheckedCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanCreateOrConnectWithoutCreatorInput = {
    where: TreatmentPlanWhereUniqueInput
    create: XOR<TreatmentPlanCreateWithoutCreatorInput, TreatmentPlanUncheckedCreateWithoutCreatorInput>
  }

  export type TreatmentPlanCreateManyCreatorInputEnvelope = {
    data: TreatmentPlanCreateManyCreatorInput | TreatmentPlanCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ClinicalNoteCreateWithoutCreatorInput = {
    id?: string
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutClinicalNotesInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutClinicalNotesInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutClinicalNotesInput
    appointment?: AppointmentCreateNestedOneWithoutClinicalNotesInput
  }

  export type ClinicalNoteUncheckedCreateWithoutCreatorInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateOrConnectWithoutCreatorInput = {
    where: ClinicalNoteWhereUniqueInput
    create: XOR<ClinicalNoteCreateWithoutCreatorInput, ClinicalNoteUncheckedCreateWithoutCreatorInput>
  }

  export type ClinicalNoteCreateManyCreatorInputEnvelope = {
    data: ClinicalNoteCreateManyCreatorInput | ClinicalNoteCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutCreatorInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPaymentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutCreatorInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutCreatorInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutCreatorInput, PaymentUncheckedCreateWithoutCreatorInput>
  }

  export type PaymentCreateManyCreatorInputEnvelope = {
    data: PaymentCreateManyCreatorInput | PaymentCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type PhotoCreateWithoutUploaderInput = {
    id?: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPhotosInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutPhotosInput
    appointment?: AppointmentCreateNestedOneWithoutPhotosInput
  }

  export type PhotoUncheckedCreateWithoutUploaderInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoCreateOrConnectWithoutUploaderInput = {
    where: PhotoWhereUniqueInput
    create: XOR<PhotoCreateWithoutUploaderInput, PhotoUncheckedCreateWithoutUploaderInput>
  }

  export type PhotoCreateManyUploaderInputEnvelope = {
    data: PhotoCreateManyUploaderInput | PhotoCreateManyUploaderInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutCreatorInput = {
    id?: string
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutAppointmentsInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutAppointmentsInput
    photos?: PhotoCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutCreatorInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutCreatorInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput>
  }

  export type AppointmentCreateManyCreatorInputEnvelope = {
    data: AppointmentCreateManyCreatorInput | AppointmentCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutCreatorInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutCreatorInput, PatientUncheckedUpdateWithoutCreatorInput>
    create: XOR<PatientCreateWithoutCreatorInput, PatientUncheckedCreateWithoutCreatorInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutCreatorInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutCreatorInput, PatientUncheckedUpdateWithoutCreatorInput>
  }

  export type PatientUpdateManyWithWhereWithoutCreatorInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutCreatorInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: StringFilter<"Patient"> | string
    firstName?: StringFilter<"Patient"> | string
    lastName?: StringFilter<"Patient"> | string
    email?: StringNullableFilter<"Patient"> | string | null
    phone?: StringNullableFilter<"Patient"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Patient"> | $Enums.Gender | null
    address?: StringNullableFilter<"Patient"> | string | null
    city?: StringNullableFilter<"Patient"> | string | null
    postalCode?: StringNullableFilter<"Patient"> | string | null
    country?: StringNullableFilter<"Patient"> | string | null
    medicalHistory?: JsonNullableFilter<"Patient">
    allergies?: StringNullableFilter<"Patient"> | string | null
    medications?: StringNullableFilter<"Patient"> | string | null
    emergencyContact?: JsonNullableFilter<"Patient">
    insuranceInfo?: JsonNullableFilter<"Patient">
    orthodonticHistory?: JsonNullableFilter<"Patient">
    referralSource?: StringNullableFilter<"Patient"> | string | null
    isActive?: BoolFilter<"Patient"> | boolean
    createdBy?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
  }

  export type TreatmentPlanUpsertWithWhereUniqueWithoutCreatorInput = {
    where: TreatmentPlanWhereUniqueInput
    update: XOR<TreatmentPlanUpdateWithoutCreatorInput, TreatmentPlanUncheckedUpdateWithoutCreatorInput>
    create: XOR<TreatmentPlanCreateWithoutCreatorInput, TreatmentPlanUncheckedCreateWithoutCreatorInput>
  }

  export type TreatmentPlanUpdateWithWhereUniqueWithoutCreatorInput = {
    where: TreatmentPlanWhereUniqueInput
    data: XOR<TreatmentPlanUpdateWithoutCreatorInput, TreatmentPlanUncheckedUpdateWithoutCreatorInput>
  }

  export type TreatmentPlanUpdateManyWithWhereWithoutCreatorInput = {
    where: TreatmentPlanScalarWhereInput
    data: XOR<TreatmentPlanUpdateManyMutationInput, TreatmentPlanUncheckedUpdateManyWithoutCreatorInput>
  }

  export type TreatmentPlanScalarWhereInput = {
    AND?: TreatmentPlanScalarWhereInput | TreatmentPlanScalarWhereInput[]
    OR?: TreatmentPlanScalarWhereInput[]
    NOT?: TreatmentPlanScalarWhereInput | TreatmentPlanScalarWhereInput[]
    id?: StringFilter<"TreatmentPlan"> | string
    patientId?: StringFilter<"TreatmentPlan"> | string
    title?: StringFilter<"TreatmentPlan"> | string
    description?: StringNullableFilter<"TreatmentPlan"> | string | null
    diagnosis?: StringFilter<"TreatmentPlan"> | string
    treatmentGoals?: StringNullableListFilter<"TreatmentPlan">
    estimatedDuration?: IntNullableFilter<"TreatmentPlan"> | number | null
    complexity?: EnumTreatmentComplexityFilter<"TreatmentPlan"> | $Enums.TreatmentComplexity
    initialAssessment?: JsonFilter<"TreatmentPlan">
    treatmentOptions?: JsonFilter<"TreatmentPlan">
    selectedOption?: StringFilter<"TreatmentPlan"> | string
    appliancesUsed?: StringNullableListFilter<"TreatmentPlan">
    materialsList?: JsonNullableFilter<"TreatmentPlan">
    status?: EnumTreatmentStatusFilter<"TreatmentPlan"> | $Enums.TreatmentStatus
    startDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    estimatedEndDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    actualEndDate?: DateTimeNullableFilter<"TreatmentPlan"> | Date | string | null
    totalCost?: DecimalNullableFilter<"TreatmentPlan"> | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: JsonNullableFilter<"TreatmentPlan">
    createdBy?: StringFilter<"TreatmentPlan"> | string
    createdAt?: DateTimeFilter<"TreatmentPlan"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentPlan"> | Date | string
  }

  export type ClinicalNoteUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ClinicalNoteWhereUniqueInput
    update: XOR<ClinicalNoteUpdateWithoutCreatorInput, ClinicalNoteUncheckedUpdateWithoutCreatorInput>
    create: XOR<ClinicalNoteCreateWithoutCreatorInput, ClinicalNoteUncheckedCreateWithoutCreatorInput>
  }

  export type ClinicalNoteUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ClinicalNoteWhereUniqueInput
    data: XOR<ClinicalNoteUpdateWithoutCreatorInput, ClinicalNoteUncheckedUpdateWithoutCreatorInput>
  }

  export type ClinicalNoteUpdateManyWithWhereWithoutCreatorInput = {
    where: ClinicalNoteScalarWhereInput
    data: XOR<ClinicalNoteUpdateManyMutationInput, ClinicalNoteUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ClinicalNoteScalarWhereInput = {
    AND?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
    OR?: ClinicalNoteScalarWhereInput[]
    NOT?: ClinicalNoteScalarWhereInput | ClinicalNoteScalarWhereInput[]
    id?: StringFilter<"ClinicalNote"> | string
    patientId?: StringFilter<"ClinicalNote"> | string
    treatmentPlanId?: StringNullableFilter<"ClinicalNote"> | string | null
    treatmentPhaseId?: StringNullableFilter<"ClinicalNote"> | string | null
    appointmentId?: StringNullableFilter<"ClinicalNote"> | string | null
    title?: StringFilter<"ClinicalNote"> | string
    content?: StringFilter<"ClinicalNote"> | string
    noteType?: EnumNoteTypeFilter<"ClinicalNote"> | $Enums.NoteType
    tags?: StringNullableListFilter<"ClinicalNote">
    observations?: JsonNullableFilter<"ClinicalNote">
    recommendations?: StringNullableFilter<"ClinicalNote"> | string | null
    nextSteps?: StringNullableFilter<"ClinicalNote"> | string | null
    createdBy?: StringFilter<"ClinicalNote"> | string
    createdAt?: DateTimeFilter<"ClinicalNote"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicalNote"> | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutCreatorInput, PaymentUncheckedUpdateWithoutCreatorInput>
    create: XOR<PaymentCreateWithoutCreatorInput, PaymentUncheckedCreateWithoutCreatorInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutCreatorInput, PaymentUncheckedUpdateWithoutCreatorInput>
  }

  export type PaymentUpdateManyWithWhereWithoutCreatorInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutCreatorInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    patientId?: StringFilter<"Payment"> | string
    treatmentPlanId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Payment"> | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    transactionId?: StringNullableFilter<"Payment"> | string | null
    description?: StringNullableFilter<"Payment"> | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    dueDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    paidDate?: DateTimeNullableFilter<"Payment"> | Date | string | null
    createdBy?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type PhotoUpsertWithWhereUniqueWithoutUploaderInput = {
    where: PhotoWhereUniqueInput
    update: XOR<PhotoUpdateWithoutUploaderInput, PhotoUncheckedUpdateWithoutUploaderInput>
    create: XOR<PhotoCreateWithoutUploaderInput, PhotoUncheckedCreateWithoutUploaderInput>
  }

  export type PhotoUpdateWithWhereUniqueWithoutUploaderInput = {
    where: PhotoWhereUniqueInput
    data: XOR<PhotoUpdateWithoutUploaderInput, PhotoUncheckedUpdateWithoutUploaderInput>
  }

  export type PhotoUpdateManyWithWhereWithoutUploaderInput = {
    where: PhotoScalarWhereInput
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyWithoutUploaderInput>
  }

  export type PhotoScalarWhereInput = {
    AND?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    OR?: PhotoScalarWhereInput[]
    NOT?: PhotoScalarWhereInput | PhotoScalarWhereInput[]
    id?: StringFilter<"Photo"> | string
    patientId?: StringFilter<"Photo"> | string
    filename?: StringFilter<"Photo"> | string
    originalName?: StringFilter<"Photo"> | string
    cloudinaryId?: StringFilter<"Photo"> | string
    cloudinaryUrl?: StringFilter<"Photo"> | string
    category?: EnumPhotoCategoryFilter<"Photo"> | $Enums.PhotoCategory
    subcategory?: StringNullableFilter<"Photo"> | string | null
    description?: StringNullableFilter<"Photo"> | string | null
    tags?: StringNullableListFilter<"Photo">
    fileSize?: IntFilter<"Photo"> | number
    mimeType?: StringFilter<"Photo"> | string
    width?: IntNullableFilter<"Photo"> | number | null
    height?: IntNullableFilter<"Photo"> | number | null
    treatmentPhaseId?: StringNullableFilter<"Photo"> | string | null
    appointmentId?: StringNullableFilter<"Photo"> | string | null
    isBeforeAfter?: BoolFilter<"Photo"> | boolean
    beforeAfterPairId?: StringNullableFilter<"Photo"> | string | null
    uploadedBy?: StringFilter<"Photo"> | string
    uploadedAt?: DateTimeFilter<"Photo"> | Date | string
    updatedAt?: DateTimeFilter<"Photo"> | Date | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutCreatorInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutCreatorInput, AppointmentUncheckedUpdateWithoutCreatorInput>
    create: XOR<AppointmentCreateWithoutCreatorInput, AppointmentUncheckedCreateWithoutCreatorInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutCreatorInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutCreatorInput, AppointmentUncheckedUpdateWithoutCreatorInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutCreatorInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutCreatorInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    treatmentPlanId?: StringNullableFilter<"Appointment"> | string | null
    treatmentPhaseId?: StringNullableFilter<"Appointment"> | string | null
    appointmentDate?: DateTimeFilter<"Appointment"> | Date | string
    appointmentTime?: StringFilter<"Appointment"> | string
    duration?: IntFilter<"Appointment"> | number
    appointmentType?: EnumAppointmentTypeFilter<"Appointment"> | $Enums.AppointmentType
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    reasonForVisit?: StringNullableFilter<"Appointment"> | string | null
    treatmentPerformed?: StringNullableFilter<"Appointment"> | string | null
    legacyBookingId?: StringNullableFilter<"Appointment"> | string | null
    bookingNumber?: StringNullableFilter<"Appointment"> | string | null
    createdBy?: StringFilter<"Appointment"> | string
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type UserCreateWithoutPatientsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutCreatorInput
    payments?: PaymentCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutPatientsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutCreatorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoUncheckedCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutPatientsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
  }

  export type PhotoCreateWithoutPatientInput = {
    id?: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedAt?: Date | string
    updatedAt?: Date | string
    uploader: UserCreateNestedOneWithoutCreatedPhotosInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutPhotosInput
    appointment?: AppointmentCreateNestedOneWithoutPhotosInput
  }

  export type PhotoUncheckedCreateWithoutPatientInput = {
    id?: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoCreateOrConnectWithoutPatientInput = {
    where: PhotoWhereUniqueInput
    create: XOR<PhotoCreateWithoutPatientInput, PhotoUncheckedCreateWithoutPatientInput>
  }

  export type PhotoCreateManyPatientInputEnvelope = {
    data: PhotoCreateManyPatientInput | PhotoCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentPlanCreateWithoutPatientInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutTreatmentPlansInput
    phases?: TreatmentPhaseCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUncheckedCreateWithoutPatientInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: TreatmentPhaseUncheckedCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanCreateOrConnectWithoutPatientInput = {
    where: TreatmentPlanWhereUniqueInput
    create: XOR<TreatmentPlanCreateWithoutPatientInput, TreatmentPlanUncheckedCreateWithoutPatientInput>
  }

  export type TreatmentPlanCreateManyPatientInputEnvelope = {
    data: TreatmentPlanCreateManyPatientInput | TreatmentPlanCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutPatientInput = {
    id?: string
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutCreatedAppointmentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutAppointmentsInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutAppointmentsInput
    photos?: PhotoCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: AppointmentCreateManyPatientInput | AppointmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type ClinicalNoteCreateWithoutPatientInput = {
    id?: string
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutClinicalNotesInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutClinicalNotesInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutClinicalNotesInput
    appointment?: AppointmentCreateNestedOneWithoutClinicalNotesInput
  }

  export type ClinicalNoteUncheckedCreateWithoutPatientInput = {
    id?: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateOrConnectWithoutPatientInput = {
    where: ClinicalNoteWhereUniqueInput
    create: XOR<ClinicalNoteCreateWithoutPatientInput, ClinicalNoteUncheckedCreateWithoutPatientInput>
  }

  export type ClinicalNoteCreateManyPatientInputEnvelope = {
    data: ClinicalNoteCreateManyPatientInput | ClinicalNoteCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutPatientInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPaymentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutPatientInput = {
    id?: string
    treatmentPlanId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput>
  }

  export type PaymentCreateManyPatientInputEnvelope = {
    data: PaymentCreateManyPatientInput | PaymentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentPhaseCreateWithoutPatientInput = {
    id?: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlan: TreatmentPlanCreateNestedOneWithoutPhasesInput
    photos?: PhotoCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseUncheckedCreateWithoutPatientInput = {
    id?: string
    treatmentPlanId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseCreateOrConnectWithoutPatientInput = {
    where: TreatmentPhaseWhereUniqueInput
    create: XOR<TreatmentPhaseCreateWithoutPatientInput, TreatmentPhaseUncheckedCreateWithoutPatientInput>
  }

  export type TreatmentPhaseCreateManyPatientInputEnvelope = {
    data: TreatmentPhaseCreateManyPatientInput | TreatmentPhaseCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientsInput = {
    update: XOR<UserUpdateWithoutPatientsInput, UserUncheckedUpdateWithoutPatientsInput>
    create: XOR<UserCreateWithoutPatientsInput, UserUncheckedCreateWithoutPatientsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientsInput, UserUncheckedUpdateWithoutPatientsInput>
  }

  export type UserUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlans?: TreatmentPlanUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUncheckedUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type PhotoUpsertWithWhereUniqueWithoutPatientInput = {
    where: PhotoWhereUniqueInput
    update: XOR<PhotoUpdateWithoutPatientInput, PhotoUncheckedUpdateWithoutPatientInput>
    create: XOR<PhotoCreateWithoutPatientInput, PhotoUncheckedCreateWithoutPatientInput>
  }

  export type PhotoUpdateWithWhereUniqueWithoutPatientInput = {
    where: PhotoWhereUniqueInput
    data: XOR<PhotoUpdateWithoutPatientInput, PhotoUncheckedUpdateWithoutPatientInput>
  }

  export type PhotoUpdateManyWithWhereWithoutPatientInput = {
    where: PhotoScalarWhereInput
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyWithoutPatientInput>
  }

  export type TreatmentPlanUpsertWithWhereUniqueWithoutPatientInput = {
    where: TreatmentPlanWhereUniqueInput
    update: XOR<TreatmentPlanUpdateWithoutPatientInput, TreatmentPlanUncheckedUpdateWithoutPatientInput>
    create: XOR<TreatmentPlanCreateWithoutPatientInput, TreatmentPlanUncheckedCreateWithoutPatientInput>
  }

  export type TreatmentPlanUpdateWithWhereUniqueWithoutPatientInput = {
    where: TreatmentPlanWhereUniqueInput
    data: XOR<TreatmentPlanUpdateWithoutPatientInput, TreatmentPlanUncheckedUpdateWithoutPatientInput>
  }

  export type TreatmentPlanUpdateManyWithWhereWithoutPatientInput = {
    where: TreatmentPlanScalarWhereInput
    data: XOR<TreatmentPlanUpdateManyMutationInput, TreatmentPlanUncheckedUpdateManyWithoutPatientInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type ClinicalNoteUpsertWithWhereUniqueWithoutPatientInput = {
    where: ClinicalNoteWhereUniqueInput
    update: XOR<ClinicalNoteUpdateWithoutPatientInput, ClinicalNoteUncheckedUpdateWithoutPatientInput>
    create: XOR<ClinicalNoteCreateWithoutPatientInput, ClinicalNoteUncheckedCreateWithoutPatientInput>
  }

  export type ClinicalNoteUpdateWithWhereUniqueWithoutPatientInput = {
    where: ClinicalNoteWhereUniqueInput
    data: XOR<ClinicalNoteUpdateWithoutPatientInput, ClinicalNoteUncheckedUpdateWithoutPatientInput>
  }

  export type ClinicalNoteUpdateManyWithWhereWithoutPatientInput = {
    where: ClinicalNoteScalarWhereInput
    data: XOR<ClinicalNoteUpdateManyMutationInput, ClinicalNoteUncheckedUpdateManyWithoutPatientInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutPatientInput, PaymentUncheckedUpdateWithoutPatientInput>
    create: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutPatientInput, PaymentUncheckedUpdateWithoutPatientInput>
  }

  export type PaymentUpdateManyWithWhereWithoutPatientInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPatientInput>
  }

  export type TreatmentPhaseUpsertWithWhereUniqueWithoutPatientInput = {
    where: TreatmentPhaseWhereUniqueInput
    update: XOR<TreatmentPhaseUpdateWithoutPatientInput, TreatmentPhaseUncheckedUpdateWithoutPatientInput>
    create: XOR<TreatmentPhaseCreateWithoutPatientInput, TreatmentPhaseUncheckedCreateWithoutPatientInput>
  }

  export type TreatmentPhaseUpdateWithWhereUniqueWithoutPatientInput = {
    where: TreatmentPhaseWhereUniqueInput
    data: XOR<TreatmentPhaseUpdateWithoutPatientInput, TreatmentPhaseUncheckedUpdateWithoutPatientInput>
  }

  export type TreatmentPhaseUpdateManyWithWhereWithoutPatientInput = {
    where: TreatmentPhaseScalarWhereInput
    data: XOR<TreatmentPhaseUpdateManyMutationInput, TreatmentPhaseUncheckedUpdateManyWithoutPatientInput>
  }

  export type TreatmentPhaseScalarWhereInput = {
    AND?: TreatmentPhaseScalarWhereInput | TreatmentPhaseScalarWhereInput[]
    OR?: TreatmentPhaseScalarWhereInput[]
    NOT?: TreatmentPhaseScalarWhereInput | TreatmentPhaseScalarWhereInput[]
    id?: StringFilter<"TreatmentPhase"> | string
    treatmentPlanId?: StringFilter<"TreatmentPhase"> | string
    patientId?: StringFilter<"TreatmentPhase"> | string
    phaseNumber?: IntFilter<"TreatmentPhase"> | number
    title?: StringFilter<"TreatmentPhase"> | string
    description?: StringNullableFilter<"TreatmentPhase"> | string | null
    objectives?: StringNullableListFilter<"TreatmentPhase">
    appliances?: JsonFilter<"TreatmentPhase">
    instructions?: StringNullableFilter<"TreatmentPhase"> | string | null
    startDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    estimatedEndDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    actualEndDate?: DateTimeNullableFilter<"TreatmentPhase"> | Date | string | null
    status?: EnumPhaseStatusFilter<"TreatmentPhase"> | $Enums.PhaseStatus
    progress?: IntFilter<"TreatmentPhase"> | number
    createdAt?: DateTimeFilter<"TreatmentPhase"> | Date | string
    updatedAt?: DateTimeFilter<"TreatmentPhase"> | Date | string
  }

  export type PatientCreateWithoutPhotosInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPatientsInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPhotosInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPhotosInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPhotosInput, PatientUncheckedCreateWithoutPhotosInput>
  }

  export type UserCreateWithoutCreatedPhotosInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutCreatorInput
    payments?: PaymentCreateNestedManyWithoutCreatorInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutCreatedPhotosInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientUncheckedCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutCreatorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCreatorInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutCreatedPhotosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPhotosInput, UserUncheckedCreateWithoutCreatedPhotosInput>
  }

  export type TreatmentPhaseCreateWithoutPhotosInput = {
    id?: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlan: TreatmentPlanCreateNestedOneWithoutPhasesInput
    patient: PatientCreateNestedOneWithoutTreatmentPhasesInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseUncheckedCreateWithoutPhotosInput = {
    id?: string
    treatmentPlanId: string
    patientId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseCreateOrConnectWithoutPhotosInput = {
    where: TreatmentPhaseWhereUniqueInput
    create: XOR<TreatmentPhaseCreateWithoutPhotosInput, TreatmentPhaseUncheckedCreateWithoutPhotosInput>
  }

  export type AppointmentCreateWithoutPhotosInput = {
    id?: string
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    creator: UserCreateNestedOneWithoutCreatedAppointmentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutAppointmentsInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutAppointmentsInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPhotosInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPhotosInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPhotosInput, AppointmentUncheckedCreateWithoutPhotosInput>
  }

  export type PatientUpsertWithoutPhotosInput = {
    update: XOR<PatientUpdateWithoutPhotosInput, PatientUncheckedUpdateWithoutPhotosInput>
    create: XOR<PatientCreateWithoutPhotosInput, PatientUncheckedCreateWithoutPhotosInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPhotosInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPhotosInput, PatientUncheckedUpdateWithoutPhotosInput>
  }

  export type PatientUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPatientsNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutCreatedPhotosInput = {
    update: XOR<UserUpdateWithoutCreatedPhotosInput, UserUncheckedUpdateWithoutCreatedPhotosInput>
    create: XOR<UserCreateWithoutCreatedPhotosInput, UserUncheckedCreateWithoutCreatedPhotosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPhotosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPhotosInput, UserUncheckedUpdateWithoutCreatedPhotosInput>
  }

  export type UserUpdateWithoutCreatedPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUpdateManyWithoutCreatorNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUncheckedUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCreatorNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TreatmentPhaseUpsertWithoutPhotosInput = {
    update: XOR<TreatmentPhaseUpdateWithoutPhotosInput, TreatmentPhaseUncheckedUpdateWithoutPhotosInput>
    create: XOR<TreatmentPhaseCreateWithoutPhotosInput, TreatmentPhaseUncheckedCreateWithoutPhotosInput>
    where?: TreatmentPhaseWhereInput
  }

  export type TreatmentPhaseUpdateToOneWithWhereWithoutPhotosInput = {
    where?: TreatmentPhaseWhereInput
    data: XOR<TreatmentPhaseUpdateWithoutPhotosInput, TreatmentPhaseUncheckedUpdateWithoutPhotosInput>
  }

  export type TreatmentPhaseUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlan?: TreatmentPlanUpdateOneRequiredWithoutPhasesNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentPhasesNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type AppointmentUpsertWithoutPhotosInput = {
    update: XOR<AppointmentUpdateWithoutPhotosInput, AppointmentUncheckedUpdateWithoutPhotosInput>
    create: XOR<AppointmentCreateWithoutPhotosInput, AppointmentUncheckedCreateWithoutPhotosInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutPhotosInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutPhotosInput, AppointmentUncheckedUpdateWithoutPhotosInput>
  }

  export type AppointmentUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutAppointmentsNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutAppointmentsNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPhotosInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type PatientCreateWithoutTreatmentPlansInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPatientsInput
    photos?: PhotoCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutTreatmentPlansInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutTreatmentPlansInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutTreatmentPlansInput, PatientUncheckedCreateWithoutTreatmentPlansInput>
  }

  export type UserCreateWithoutTreatmentPlansInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutCreatorInput
    payments?: PaymentCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutTreatmentPlansInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientUncheckedCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutCreatorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoUncheckedCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutTreatmentPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTreatmentPlansInput, UserUncheckedCreateWithoutTreatmentPlansInput>
  }

  export type TreatmentPhaseCreateWithoutTreatmentPlanInput = {
    id?: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutTreatmentPhasesInput
    photos?: PhotoCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput = {
    id?: string
    patientId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseCreateOrConnectWithoutTreatmentPlanInput = {
    where: TreatmentPhaseWhereUniqueInput
    create: XOR<TreatmentPhaseCreateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type TreatmentPhaseCreateManyTreatmentPlanInputEnvelope = {
    data: TreatmentPhaseCreateManyTreatmentPlanInput | TreatmentPhaseCreateManyTreatmentPlanInput[]
    skipDuplicates?: boolean
  }

  export type ClinicalNoteCreateWithoutTreatmentPlanInput = {
    id?: string
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutClinicalNotesInput
    creator: UserCreateNestedOneWithoutClinicalNotesInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutClinicalNotesInput
    appointment?: AppointmentCreateNestedOneWithoutClinicalNotesInput
  }

  export type ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput = {
    id?: string
    patientId: string
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateOrConnectWithoutTreatmentPlanInput = {
    where: ClinicalNoteWhereUniqueInput
    create: XOR<ClinicalNoteCreateWithoutTreatmentPlanInput, ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type ClinicalNoteCreateManyTreatmentPlanInputEnvelope = {
    data: ClinicalNoteCreateManyTreatmentPlanInput | ClinicalNoteCreateManyTreatmentPlanInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutTreatmentPlanInput = {
    id?: string
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    creator: UserCreateNestedOneWithoutCreatedAppointmentsInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutAppointmentsInput
    photos?: PhotoCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutTreatmentPlanInput = {
    id?: string
    patientId: string
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutTreatmentPlanInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutTreatmentPlanInput, AppointmentUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type AppointmentCreateManyTreatmentPlanInputEnvelope = {
    data: AppointmentCreateManyTreatmentPlanInput | AppointmentCreateManyTreatmentPlanInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutTreatmentPlanInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPaymentsInput
    creator: UserCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutTreatmentPlanInput = {
    id?: string
    patientId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutTreatmentPlanInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutTreatmentPlanInput, PaymentUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type PaymentCreateManyTreatmentPlanInputEnvelope = {
    data: PaymentCreateManyTreatmentPlanInput | PaymentCreateManyTreatmentPlanInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutTreatmentPlansInput = {
    update: XOR<PatientUpdateWithoutTreatmentPlansInput, PatientUncheckedUpdateWithoutTreatmentPlansInput>
    create: XOR<PatientCreateWithoutTreatmentPlansInput, PatientUncheckedCreateWithoutTreatmentPlansInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutTreatmentPlansInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutTreatmentPlansInput, PatientUncheckedUpdateWithoutTreatmentPlansInput>
  }

  export type PatientUpdateWithoutTreatmentPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPatientsNestedInput
    photos?: PhotoUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutTreatmentPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutTreatmentPlansInput = {
    update: XOR<UserUpdateWithoutTreatmentPlansInput, UserUncheckedUpdateWithoutTreatmentPlansInput>
    create: XOR<UserCreateWithoutTreatmentPlansInput, UserUncheckedCreateWithoutTreatmentPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTreatmentPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTreatmentPlansInput, UserUncheckedUpdateWithoutTreatmentPlansInput>
  }

  export type UserUpdateWithoutTreatmentPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutTreatmentPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUncheckedUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUncheckedUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TreatmentPhaseUpsertWithWhereUniqueWithoutTreatmentPlanInput = {
    where: TreatmentPhaseWhereUniqueInput
    update: XOR<TreatmentPhaseUpdateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedUpdateWithoutTreatmentPlanInput>
    create: XOR<TreatmentPhaseCreateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type TreatmentPhaseUpdateWithWhereUniqueWithoutTreatmentPlanInput = {
    where: TreatmentPhaseWhereUniqueInput
    data: XOR<TreatmentPhaseUpdateWithoutTreatmentPlanInput, TreatmentPhaseUncheckedUpdateWithoutTreatmentPlanInput>
  }

  export type TreatmentPhaseUpdateManyWithWhereWithoutTreatmentPlanInput = {
    where: TreatmentPhaseScalarWhereInput
    data: XOR<TreatmentPhaseUpdateManyMutationInput, TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanInput>
  }

  export type ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPlanInput = {
    where: ClinicalNoteWhereUniqueInput
    update: XOR<ClinicalNoteUpdateWithoutTreatmentPlanInput, ClinicalNoteUncheckedUpdateWithoutTreatmentPlanInput>
    create: XOR<ClinicalNoteCreateWithoutTreatmentPlanInput, ClinicalNoteUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPlanInput = {
    where: ClinicalNoteWhereUniqueInput
    data: XOR<ClinicalNoteUpdateWithoutTreatmentPlanInput, ClinicalNoteUncheckedUpdateWithoutTreatmentPlanInput>
  }

  export type ClinicalNoteUpdateManyWithWhereWithoutTreatmentPlanInput = {
    where: ClinicalNoteScalarWhereInput
    data: XOR<ClinicalNoteUpdateManyMutationInput, ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutTreatmentPlanInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutTreatmentPlanInput, AppointmentUncheckedUpdateWithoutTreatmentPlanInput>
    create: XOR<AppointmentCreateWithoutTreatmentPlanInput, AppointmentUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutTreatmentPlanInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutTreatmentPlanInput, AppointmentUncheckedUpdateWithoutTreatmentPlanInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutTreatmentPlanInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutTreatmentPlanInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutTreatmentPlanInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutTreatmentPlanInput, PaymentUncheckedUpdateWithoutTreatmentPlanInput>
    create: XOR<PaymentCreateWithoutTreatmentPlanInput, PaymentUncheckedCreateWithoutTreatmentPlanInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutTreatmentPlanInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutTreatmentPlanInput, PaymentUncheckedUpdateWithoutTreatmentPlanInput>
  }

  export type PaymentUpdateManyWithWhereWithoutTreatmentPlanInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutTreatmentPlanInput>
  }

  export type TreatmentPlanCreateWithoutPhasesInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutTreatmentPlansInput
    creator: UserCreateNestedOneWithoutTreatmentPlansInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUncheckedCreateWithoutPhasesInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanCreateOrConnectWithoutPhasesInput = {
    where: TreatmentPlanWhereUniqueInput
    create: XOR<TreatmentPlanCreateWithoutPhasesInput, TreatmentPlanUncheckedCreateWithoutPhasesInput>
  }

  export type PatientCreateWithoutTreatmentPhasesInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPatientsInput
    photos?: PhotoCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutTreatmentPhasesInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutTreatmentPhasesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutTreatmentPhasesInput, PatientUncheckedCreateWithoutTreatmentPhasesInput>
  }

  export type PhotoCreateWithoutTreatmentPhaseInput = {
    id?: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPhotosInput
    uploader: UserCreateNestedOneWithoutCreatedPhotosInput
    appointment?: AppointmentCreateNestedOneWithoutPhotosInput
  }

  export type PhotoUncheckedCreateWithoutTreatmentPhaseInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoCreateOrConnectWithoutTreatmentPhaseInput = {
    where: PhotoWhereUniqueInput
    create: XOR<PhotoCreateWithoutTreatmentPhaseInput, PhotoUncheckedCreateWithoutTreatmentPhaseInput>
  }

  export type PhotoCreateManyTreatmentPhaseInputEnvelope = {
    data: PhotoCreateManyTreatmentPhaseInput | PhotoCreateManyTreatmentPhaseInput[]
    skipDuplicates?: boolean
  }

  export type ClinicalNoteCreateWithoutTreatmentPhaseInput = {
    id?: string
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutClinicalNotesInput
    creator: UserCreateNestedOneWithoutClinicalNotesInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutClinicalNotesInput
    appointment?: AppointmentCreateNestedOneWithoutClinicalNotesInput
  }

  export type ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateOrConnectWithoutTreatmentPhaseInput = {
    where: ClinicalNoteWhereUniqueInput
    create: XOR<ClinicalNoteCreateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput>
  }

  export type ClinicalNoteCreateManyTreatmentPhaseInputEnvelope = {
    data: ClinicalNoteCreateManyTreatmentPhaseInput | ClinicalNoteCreateManyTreatmentPhaseInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutTreatmentPhaseInput = {
    id?: string
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    creator: UserCreateNestedOneWithoutCreatedAppointmentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutAppointmentsInput
    photos?: PhotoCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutTreatmentPhaseInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutAppointmentInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutTreatmentPhaseInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutTreatmentPhaseInput, AppointmentUncheckedCreateWithoutTreatmentPhaseInput>
  }

  export type AppointmentCreateManyTreatmentPhaseInputEnvelope = {
    data: AppointmentCreateManyTreatmentPhaseInput | AppointmentCreateManyTreatmentPhaseInput[]
    skipDuplicates?: boolean
  }

  export type TreatmentPlanUpsertWithoutPhasesInput = {
    update: XOR<TreatmentPlanUpdateWithoutPhasesInput, TreatmentPlanUncheckedUpdateWithoutPhasesInput>
    create: XOR<TreatmentPlanCreateWithoutPhasesInput, TreatmentPlanUncheckedCreateWithoutPhasesInput>
    where?: TreatmentPlanWhereInput
  }

  export type TreatmentPlanUpdateToOneWithWhereWithoutPhasesInput = {
    where?: TreatmentPlanWhereInput
    data: XOR<TreatmentPlanUpdateWithoutPhasesInput, TreatmentPlanUncheckedUpdateWithoutPhasesInput>
  }

  export type TreatmentPlanUpdateWithoutPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput
    creator?: UserUpdateOneRequiredWithoutTreatmentPlansNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateWithoutPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type PatientUpsertWithoutTreatmentPhasesInput = {
    update: XOR<PatientUpdateWithoutTreatmentPhasesInput, PatientUncheckedUpdateWithoutTreatmentPhasesInput>
    create: XOR<PatientCreateWithoutTreatmentPhasesInput, PatientUncheckedCreateWithoutTreatmentPhasesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutTreatmentPhasesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutTreatmentPhasesInput, PatientUncheckedUpdateWithoutTreatmentPhasesInput>
  }

  export type PatientUpdateWithoutTreatmentPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPatientsNestedInput
    photos?: PhotoUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutTreatmentPhasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PhotoUpsertWithWhereUniqueWithoutTreatmentPhaseInput = {
    where: PhotoWhereUniqueInput
    update: XOR<PhotoUpdateWithoutTreatmentPhaseInput, PhotoUncheckedUpdateWithoutTreatmentPhaseInput>
    create: XOR<PhotoCreateWithoutTreatmentPhaseInput, PhotoUncheckedCreateWithoutTreatmentPhaseInput>
  }

  export type PhotoUpdateWithWhereUniqueWithoutTreatmentPhaseInput = {
    where: PhotoWhereUniqueInput
    data: XOR<PhotoUpdateWithoutTreatmentPhaseInput, PhotoUncheckedUpdateWithoutTreatmentPhaseInput>
  }

  export type PhotoUpdateManyWithWhereWithoutTreatmentPhaseInput = {
    where: PhotoScalarWhereInput
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyWithoutTreatmentPhaseInput>
  }

  export type ClinicalNoteUpsertWithWhereUniqueWithoutTreatmentPhaseInput = {
    where: ClinicalNoteWhereUniqueInput
    update: XOR<ClinicalNoteUpdateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedUpdateWithoutTreatmentPhaseInput>
    create: XOR<ClinicalNoteCreateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedCreateWithoutTreatmentPhaseInput>
  }

  export type ClinicalNoteUpdateWithWhereUniqueWithoutTreatmentPhaseInput = {
    where: ClinicalNoteWhereUniqueInput
    data: XOR<ClinicalNoteUpdateWithoutTreatmentPhaseInput, ClinicalNoteUncheckedUpdateWithoutTreatmentPhaseInput>
  }

  export type ClinicalNoteUpdateManyWithWhereWithoutTreatmentPhaseInput = {
    where: ClinicalNoteScalarWhereInput
    data: XOR<ClinicalNoteUpdateManyMutationInput, ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutTreatmentPhaseInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutTreatmentPhaseInput, AppointmentUncheckedUpdateWithoutTreatmentPhaseInput>
    create: XOR<AppointmentCreateWithoutTreatmentPhaseInput, AppointmentUncheckedCreateWithoutTreatmentPhaseInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutTreatmentPhaseInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutTreatmentPhaseInput, AppointmentUncheckedUpdateWithoutTreatmentPhaseInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutTreatmentPhaseInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutTreatmentPhaseInput>
  }

  export type PatientCreateWithoutClinicalNotesInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPatientsInput
    photos?: PhotoCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutClinicalNotesInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutClinicalNotesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutClinicalNotesInput, PatientUncheckedCreateWithoutClinicalNotesInput>
  }

  export type UserCreateWithoutClinicalNotesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutCreatorInput
    payments?: PaymentCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutClinicalNotesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientUncheckedCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutCreatorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoUncheckedCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutClinicalNotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClinicalNotesInput, UserUncheckedCreateWithoutClinicalNotesInput>
  }

  export type TreatmentPlanCreateWithoutClinicalNotesInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutTreatmentPlansInput
    creator: UserCreateNestedOneWithoutTreatmentPlansInput
    phases?: TreatmentPhaseCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUncheckedCreateWithoutClinicalNotesInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: TreatmentPhaseUncheckedCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanCreateOrConnectWithoutClinicalNotesInput = {
    where: TreatmentPlanWhereUniqueInput
    create: XOR<TreatmentPlanCreateWithoutClinicalNotesInput, TreatmentPlanUncheckedCreateWithoutClinicalNotesInput>
  }

  export type TreatmentPhaseCreateWithoutClinicalNotesInput = {
    id?: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlan: TreatmentPlanCreateNestedOneWithoutPhasesInput
    patient: PatientCreateNestedOneWithoutTreatmentPhasesInput
    photos?: PhotoCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseUncheckedCreateWithoutClinicalNotesInput = {
    id?: string
    treatmentPlanId: string
    patientId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseCreateOrConnectWithoutClinicalNotesInput = {
    where: TreatmentPhaseWhereUniqueInput
    create: XOR<TreatmentPhaseCreateWithoutClinicalNotesInput, TreatmentPhaseUncheckedCreateWithoutClinicalNotesInput>
  }

  export type AppointmentCreateWithoutClinicalNotesInput = {
    id?: string
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    creator: UserCreateNestedOneWithoutCreatedAppointmentsInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutAppointmentsInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutAppointmentsInput
    photos?: PhotoCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutClinicalNotesInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutClinicalNotesInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutClinicalNotesInput, AppointmentUncheckedCreateWithoutClinicalNotesInput>
  }

  export type PatientUpsertWithoutClinicalNotesInput = {
    update: XOR<PatientUpdateWithoutClinicalNotesInput, PatientUncheckedUpdateWithoutClinicalNotesInput>
    create: XOR<PatientCreateWithoutClinicalNotesInput, PatientUncheckedCreateWithoutClinicalNotesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutClinicalNotesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutClinicalNotesInput, PatientUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type PatientUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPatientsNestedInput
    photos?: PhotoUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutClinicalNotesInput = {
    update: XOR<UserUpdateWithoutClinicalNotesInput, UserUncheckedUpdateWithoutClinicalNotesInput>
    create: XOR<UserCreateWithoutClinicalNotesInput, UserUncheckedCreateWithoutClinicalNotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClinicalNotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClinicalNotesInput, UserUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type UserUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUncheckedUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUncheckedUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TreatmentPlanUpsertWithoutClinicalNotesInput = {
    update: XOR<TreatmentPlanUpdateWithoutClinicalNotesInput, TreatmentPlanUncheckedUpdateWithoutClinicalNotesInput>
    create: XOR<TreatmentPlanCreateWithoutClinicalNotesInput, TreatmentPlanUncheckedCreateWithoutClinicalNotesInput>
    where?: TreatmentPlanWhereInput
  }

  export type TreatmentPlanUpdateToOneWithWhereWithoutClinicalNotesInput = {
    where?: TreatmentPlanWhereInput
    data: XOR<TreatmentPlanUpdateWithoutClinicalNotesInput, TreatmentPlanUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type TreatmentPlanUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput
    creator?: UserUpdateOneRequiredWithoutTreatmentPlansNestedInput
    phases?: TreatmentPhaseUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPhaseUpsertWithoutClinicalNotesInput = {
    update: XOR<TreatmentPhaseUpdateWithoutClinicalNotesInput, TreatmentPhaseUncheckedUpdateWithoutClinicalNotesInput>
    create: XOR<TreatmentPhaseCreateWithoutClinicalNotesInput, TreatmentPhaseUncheckedCreateWithoutClinicalNotesInput>
    where?: TreatmentPhaseWhereInput
  }

  export type TreatmentPhaseUpdateToOneWithWhereWithoutClinicalNotesInput = {
    where?: TreatmentPhaseWhereInput
    data: XOR<TreatmentPhaseUpdateWithoutClinicalNotesInput, TreatmentPhaseUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type TreatmentPhaseUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlan?: TreatmentPlanUpdateOneRequiredWithoutPhasesNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentPhasesNestedInput
    photos?: PhotoUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type AppointmentUpsertWithoutClinicalNotesInput = {
    update: XOR<AppointmentUpdateWithoutClinicalNotesInput, AppointmentUncheckedUpdateWithoutClinicalNotesInput>
    create: XOR<AppointmentCreateWithoutClinicalNotesInput, AppointmentUncheckedCreateWithoutClinicalNotesInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutClinicalNotesInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutClinicalNotesInput, AppointmentUncheckedUpdateWithoutClinicalNotesInput>
  }

  export type AppointmentUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutAppointmentsNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutAppointmentsNestedInput
    photos?: PhotoUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutClinicalNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type PatientCreateWithoutAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPatientsInput
    photos?: PhotoCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAppointmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutCreatedAppointmentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutCreatorInput
    payments?: PaymentCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoCreateNestedManyWithoutUploaderInput
  }

  export type UserUncheckedCreateWithoutCreatedAppointmentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientUncheckedCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutCreatorInput
    payments?: PaymentUncheckedCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoUncheckedCreateNestedManyWithoutUploaderInput
  }

  export type UserCreateOrConnectWithoutCreatedAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
  }

  export type TreatmentPlanCreateWithoutAppointmentsInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutTreatmentPlansInput
    creator: UserCreateNestedOneWithoutTreatmentPlansInput
    phases?: TreatmentPhaseCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: TreatmentPhaseUncheckedCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPlanInput
    payments?: PaymentUncheckedCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanCreateOrConnectWithoutAppointmentsInput = {
    where: TreatmentPlanWhereUniqueInput
    create: XOR<TreatmentPlanCreateWithoutAppointmentsInput, TreatmentPlanUncheckedCreateWithoutAppointmentsInput>
  }

  export type TreatmentPhaseCreateWithoutAppointmentsInput = {
    id?: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    treatmentPlan: TreatmentPlanCreateNestedOneWithoutPhasesInput
    patient: PatientCreateNestedOneWithoutTreatmentPhasesInput
    photos?: PhotoCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    treatmentPlanId: string
    patientId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutTreatmentPhaseInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPhaseInput
  }

  export type TreatmentPhaseCreateOrConnectWithoutAppointmentsInput = {
    where: TreatmentPhaseWhereUniqueInput
    create: XOR<TreatmentPhaseCreateWithoutAppointmentsInput, TreatmentPhaseUncheckedCreateWithoutAppointmentsInput>
  }

  export type PhotoCreateWithoutAppointmentInput = {
    id?: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPhotosInput
    uploader: UserCreateNestedOneWithoutCreatedPhotosInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutPhotosInput
  }

  export type PhotoUncheckedCreateWithoutAppointmentInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoCreateOrConnectWithoutAppointmentInput = {
    where: PhotoWhereUniqueInput
    create: XOR<PhotoCreateWithoutAppointmentInput, PhotoUncheckedCreateWithoutAppointmentInput>
  }

  export type PhotoCreateManyAppointmentInputEnvelope = {
    data: PhotoCreateManyAppointmentInput | PhotoCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type ClinicalNoteCreateWithoutAppointmentInput = {
    id?: string
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutClinicalNotesInput
    creator: UserCreateNestedOneWithoutClinicalNotesInput
    treatmentPlan?: TreatmentPlanCreateNestedOneWithoutClinicalNotesInput
    treatmentPhase?: TreatmentPhaseCreateNestedOneWithoutClinicalNotesInput
  }

  export type ClinicalNoteUncheckedCreateWithoutAppointmentInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateOrConnectWithoutAppointmentInput = {
    where: ClinicalNoteWhereUniqueInput
    create: XOR<ClinicalNoteCreateWithoutAppointmentInput, ClinicalNoteUncheckedCreateWithoutAppointmentInput>
  }

  export type ClinicalNoteCreateManyAppointmentInputEnvelope = {
    data: ClinicalNoteCreateManyAppointmentInput | ClinicalNoteCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutAppointmentsInput = {
    update: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPatientsNestedInput
    photos?: PhotoUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutCreatedAppointmentsInput = {
    update: XOR<UserUpdateWithoutCreatedAppointmentsInput, UserUncheckedUpdateWithoutCreatedAppointmentsInput>
    create: XOR<UserCreateWithoutCreatedAppointmentsInput, UserUncheckedCreateWithoutCreatedAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAppointmentsInput, UserUncheckedUpdateWithoutCreatedAppointmentsInput>
  }

  export type UserUpdateWithoutCreatedAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUpdateManyWithoutUploaderNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUncheckedUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutCreatorNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUncheckedUpdateManyWithoutUploaderNestedInput
  }

  export type TreatmentPlanUpsertWithoutAppointmentsInput = {
    update: XOR<TreatmentPlanUpdateWithoutAppointmentsInput, TreatmentPlanUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<TreatmentPlanCreateWithoutAppointmentsInput, TreatmentPlanUncheckedCreateWithoutAppointmentsInput>
    where?: TreatmentPlanWhereInput
  }

  export type TreatmentPlanUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: TreatmentPlanWhereInput
    data: XOR<TreatmentPlanUpdateWithoutAppointmentsInput, TreatmentPlanUncheckedUpdateWithoutAppointmentsInput>
  }

  export type TreatmentPlanUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput
    creator?: UserUpdateOneRequiredWithoutTreatmentPlansNestedInput
    phases?: TreatmentPhaseUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPhaseUpsertWithoutAppointmentsInput = {
    update: XOR<TreatmentPhaseUpdateWithoutAppointmentsInput, TreatmentPhaseUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<TreatmentPhaseCreateWithoutAppointmentsInput, TreatmentPhaseUncheckedCreateWithoutAppointmentsInput>
    where?: TreatmentPhaseWhereInput
  }

  export type TreatmentPhaseUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: TreatmentPhaseWhereInput
    data: XOR<TreatmentPhaseUpdateWithoutAppointmentsInput, TreatmentPhaseUncheckedUpdateWithoutAppointmentsInput>
  }

  export type TreatmentPhaseUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlan?: TreatmentPlanUpdateOneRequiredWithoutPhasesNestedInput
    patient?: PatientUpdateOneRequiredWithoutTreatmentPhasesNestedInput
    photos?: PhotoUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type PhotoUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: PhotoWhereUniqueInput
    update: XOR<PhotoUpdateWithoutAppointmentInput, PhotoUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PhotoCreateWithoutAppointmentInput, PhotoUncheckedCreateWithoutAppointmentInput>
  }

  export type PhotoUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: PhotoWhereUniqueInput
    data: XOR<PhotoUpdateWithoutAppointmentInput, PhotoUncheckedUpdateWithoutAppointmentInput>
  }

  export type PhotoUpdateManyWithWhereWithoutAppointmentInput = {
    where: PhotoScalarWhereInput
    data: XOR<PhotoUpdateManyMutationInput, PhotoUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type ClinicalNoteUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: ClinicalNoteWhereUniqueInput
    update: XOR<ClinicalNoteUpdateWithoutAppointmentInput, ClinicalNoteUncheckedUpdateWithoutAppointmentInput>
    create: XOR<ClinicalNoteCreateWithoutAppointmentInput, ClinicalNoteUncheckedCreateWithoutAppointmentInput>
  }

  export type ClinicalNoteUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: ClinicalNoteWhereUniqueInput
    data: XOR<ClinicalNoteUpdateWithoutAppointmentInput, ClinicalNoteUncheckedUpdateWithoutAppointmentInput>
  }

  export type ClinicalNoteUpdateManyWithWhereWithoutAppointmentInput = {
    where: ClinicalNoteScalarWhereInput
    data: XOR<ClinicalNoteUpdateManyMutationInput, ClinicalNoteUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type PatientCreateWithoutPaymentsInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    creator: UserCreateNestedOneWithoutPatientsInput
    photos?: PhotoCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPaymentsInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoUncheckedCreateNestedManyWithoutPatientInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutPatientInput
    treatmentPhases?: TreatmentPhaseUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPaymentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
  }

  export type UserCreateWithoutPaymentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentCreateNestedManyWithoutCreatorInput
  }

  export type UserUncheckedCreateWithoutPaymentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.UserRole
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    patients?: PatientUncheckedCreateNestedManyWithoutCreatorInput
    treatmentPlans?: TreatmentPlanUncheckedCreateNestedManyWithoutCreatorInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutCreatorInput
    createdPhotos?: PhotoUncheckedCreateNestedManyWithoutUploaderInput
    createdAppointments?: AppointmentUncheckedCreateNestedManyWithoutCreatorInput
  }

  export type UserCreateOrConnectWithoutPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
  }

  export type TreatmentPlanCreateWithoutPaymentsInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutTreatmentPlansInput
    creator: UserCreateNestedOneWithoutTreatmentPlansInput
    phases?: TreatmentPhaseCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanUncheckedCreateWithoutPaymentsInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    phases?: TreatmentPhaseUncheckedCreateNestedManyWithoutTreatmentPlanInput
    clinicalNotes?: ClinicalNoteUncheckedCreateNestedManyWithoutTreatmentPlanInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutTreatmentPlanInput
  }

  export type TreatmentPlanCreateOrConnectWithoutPaymentsInput = {
    where: TreatmentPlanWhereUniqueInput
    create: XOR<TreatmentPlanCreateWithoutPaymentsInput, TreatmentPlanUncheckedCreateWithoutPaymentsInput>
  }

  export type PatientUpsertWithoutPaymentsInput = {
    update: XOR<PatientUpdateWithoutPaymentsInput, PatientUncheckedUpdateWithoutPaymentsInput>
    create: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPaymentsInput, PatientUncheckedUpdateWithoutPaymentsInput>
  }

  export type PatientUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPatientsNestedInput
    photos?: PhotoUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutPaymentsInput = {
    update: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUpdateManyWithoutCreatorNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patients?: PatientUncheckedUpdateManyWithoutCreatorNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutCreatorNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutCreatorNestedInput
    createdPhotos?: PhotoUncheckedUpdateManyWithoutUploaderNestedInput
    createdAppointments?: AppointmentUncheckedUpdateManyWithoutCreatorNestedInput
  }

  export type TreatmentPlanUpsertWithoutPaymentsInput = {
    update: XOR<TreatmentPlanUpdateWithoutPaymentsInput, TreatmentPlanUncheckedUpdateWithoutPaymentsInput>
    create: XOR<TreatmentPlanCreateWithoutPaymentsInput, TreatmentPlanUncheckedCreateWithoutPaymentsInput>
    where?: TreatmentPlanWhereInput
  }

  export type TreatmentPlanUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: TreatmentPlanWhereInput
    data: XOR<TreatmentPlanUpdateWithoutPaymentsInput, TreatmentPlanUncheckedUpdateWithoutPaymentsInput>
  }

  export type TreatmentPlanUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput
    creator?: UserUpdateOneRequiredWithoutTreatmentPlansNestedInput
    phases?: TreatmentPhaseUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type PatientCreateManyCreatorInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    address?: string | null
    city?: string | null
    postalCode?: string | null
    country?: string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: string | null
    medications?: string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentPlanCreateManyCreatorInput = {
    id?: string
    patientId: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateManyCreatorInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyCreatorInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoCreateManyUploaderInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyCreatorInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPlans?: TreatmentPlanUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
    treatmentPhases?: TreatmentPhaseUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    postalCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableJsonNullValueInput | InputJsonValue
    insuranceInfo?: NullableJsonNullValueInput | InputJsonValue
    orthodonticHistory?: NullableJsonNullValueInput | InputJsonValue
    referralSource?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPlanUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutTreatmentPlansNestedInput
    phases?: TreatmentPhaseUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutClinicalNotesNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutClinicalNotesNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutClinicalNotesNestedInput
    appointment?: AppointmentUpdateOneWithoutClinicalNotesNestedInput
  }

  export type ClinicalNoteUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPhotosNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutPhotosNestedInput
    appointment?: AppointmentUpdateOneWithoutPhotosNestedInput
  }

  export type PhotoUncheckedUpdateWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateManyWithoutUploaderInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutAppointmentsNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutAppointmentsNestedInput
    photos?: PhotoUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoCreateManyPatientInput = {
    id?: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentPlanCreateManyPatientInput = {
    id?: string
    title: string
    description?: string | null
    diagnosis: string
    treatmentGoals?: TreatmentPlanCreatetreatmentGoalsInput | string[]
    estimatedDuration?: number | null
    complexity: $Enums.TreatmentComplexity
    initialAssessment: JsonNullValueInput | InputJsonValue
    treatmentOptions: JsonNullValueInput | InputJsonValue
    selectedOption: string
    appliancesUsed?: TreatmentPlanCreateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.TreatmentStatus
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    totalCost?: Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyPatientInput = {
    id?: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateManyPatientInput = {
    id?: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyPatientInput = {
    id?: string
    treatmentPlanId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentPhaseCreateManyPatientInput = {
    id?: string
    treatmentPlanId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploader?: UserUpdateOneRequiredWithoutCreatedPhotosNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutPhotosNestedInput
    appointment?: AppointmentUpdateOneWithoutPhotosNestedInput
  }

  export type PhotoUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPlanUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutTreatmentPlansNestedInput
    phases?: TreatmentPhaseUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phases?: TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutTreatmentPlanNestedInput
  }

  export type TreatmentPlanUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: StringFieldUpdateOperationsInput | string
    treatmentGoals?: TreatmentPlanUpdatetreatmentGoalsInput | string[]
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: EnumTreatmentComplexityFieldUpdateOperationsInput | $Enums.TreatmentComplexity
    initialAssessment?: JsonNullValueInput | InputJsonValue
    treatmentOptions?: JsonNullValueInput | InputJsonValue
    selectedOption?: StringFieldUpdateOperationsInput | string
    appliancesUsed?: TreatmentPlanUpdateappliancesUsedInput | string[]
    materialsList?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumTreatmentStatusFieldUpdateOperationsInput | $Enums.TreatmentStatus
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    totalCost?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    paymentPlan?: NullableJsonNullValueInput | InputJsonValue
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutAppointmentsNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutAppointmentsNestedInput
    photos?: PhotoUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutClinicalNotesNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutClinicalNotesNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutClinicalNotesNestedInput
    appointment?: AppointmentUpdateOneWithoutClinicalNotesNestedInput
  }

  export type ClinicalNoteUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creator?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPhaseUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    treatmentPlan?: TreatmentPlanUpdateOneRequiredWithoutPhasesNestedInput
    photos?: PhotoUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TreatmentPhaseCreateManyTreatmentPlanInput = {
    id?: string
    patientId: string
    phaseNumber: number
    title: string
    description?: string | null
    objectives?: TreatmentPhaseCreateobjectivesInput | string[]
    appliances: JsonNullValueInput | InputJsonValue
    instructions?: string | null
    startDate?: Date | string | null
    estimatedEndDate?: Date | string | null
    actualEndDate?: Date | string | null
    status?: $Enums.PhaseStatus
    progress?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateManyTreatmentPlanInput = {
    id?: string
    patientId: string
    treatmentPhaseId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyTreatmentPlanInput = {
    id?: string
    patientId: string
    treatmentPhaseId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyTreatmentPlanInput = {
    id?: string
    patientId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    paymentMethod: $Enums.PaymentMethod
    transactionId?: string | null
    description?: string | null
    notes?: string | null
    status?: $Enums.PaymentStatus
    dueDate?: Date | string | null
    paidDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TreatmentPhaseUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutTreatmentPhasesNestedInput
    photos?: PhotoUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutTreatmentPhaseNestedInput
  }

  export type TreatmentPhaseUncheckedUpdateManyWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    phaseNumber?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objectives?: TreatmentPhaseUpdateobjectivesInput | string[]
    appliances?: JsonNullValueInput | InputJsonValue
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    actualEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumPhaseStatusFieldUpdateOperationsInput | $Enums.PhaseStatus
    progress?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutClinicalNotesNestedInput
    creator?: UserUpdateOneRequiredWithoutClinicalNotesNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutClinicalNotesNestedInput
    appointment?: AppointmentUpdateOneWithoutClinicalNotesNestedInput
  }

  export type ClinicalNoteUncheckedUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutAppointmentsNestedInput
    photos?: PhotoUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    creator?: UserUpdateOneRequiredWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutTreatmentPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paidDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoCreateManyTreatmentPhaseInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    appointmentId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateManyTreatmentPhaseInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    appointmentId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyTreatmentPhaseInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    appointmentDate: Date | string
    appointmentTime: string
    duration?: number
    appointmentType: $Enums.AppointmentType
    status?: $Enums.AppointmentStatus
    notes?: string | null
    reasonForVisit?: string | null
    treatmentPerformed?: string | null
    legacyBookingId?: string | null
    bookingNumber?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoUpdateWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPhotosNestedInput
    uploader?: UserUpdateOneRequiredWithoutCreatedPhotosNestedInput
    appointment?: AppointmentUpdateOneWithoutPhotosNestedInput
  }

  export type PhotoUncheckedUpdateWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateManyWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUpdateWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutClinicalNotesNestedInput
    creator?: UserUpdateOneRequiredWithoutClinicalNotesNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutClinicalNotesNestedInput
    appointment?: AppointmentUpdateOneWithoutClinicalNotesNestedInput
  }

  export type ClinicalNoteUncheckedUpdateWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedAppointmentsNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutAppointmentsNestedInput
    photos?: PhotoUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUncheckedUpdateManyWithoutAppointmentNestedInput
    clinicalNotes?: ClinicalNoteUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutTreatmentPhaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    appointmentTime?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    appointmentType?: EnumAppointmentTypeFieldUpdateOperationsInput | $Enums.AppointmentType
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    reasonForVisit?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPerformed?: NullableStringFieldUpdateOperationsInput | string | null
    legacyBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    bookingNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoCreateManyAppointmentInput = {
    id?: string
    patientId: string
    filename: string
    originalName: string
    cloudinaryId: string
    cloudinaryUrl: string
    category: $Enums.PhotoCategory
    subcategory?: string | null
    description?: string | null
    tags?: PhotoCreatetagsInput | string[]
    fileSize: number
    mimeType: string
    width?: number | null
    height?: number | null
    treatmentPhaseId?: string | null
    isBeforeAfter?: boolean
    beforeAfterPairId?: string | null
    uploadedBy: string
    uploadedAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClinicalNoteCreateManyAppointmentInput = {
    id?: string
    patientId: string
    treatmentPlanId?: string | null
    treatmentPhaseId?: string | null
    title: string
    content: string
    noteType: $Enums.NoteType
    tags?: ClinicalNoteCreatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: string | null
    nextSteps?: string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PhotoUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPhotosNestedInput
    uploader?: UserUpdateOneRequiredWithoutCreatedPhotosNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutPhotosNestedInput
  }

  export type PhotoUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoUncheckedUpdateManyWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    cloudinaryId?: StringFieldUpdateOperationsInput | string
    cloudinaryUrl?: StringFieldUpdateOperationsInput | string
    category?: EnumPhotoCategoryFieldUpdateOperationsInput | $Enums.PhotoCategory
    subcategory?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: PhotoUpdatetagsInput | string[]
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    isBeforeAfter?: BoolFieldUpdateOperationsInput | boolean
    beforeAfterPairId?: NullableStringFieldUpdateOperationsInput | string | null
    uploadedBy?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutClinicalNotesNestedInput
    creator?: UserUpdateOneRequiredWithoutClinicalNotesNestedInput
    treatmentPlan?: TreatmentPlanUpdateOneWithoutClinicalNotesNestedInput
    treatmentPhase?: TreatmentPhaseUpdateOneWithoutClinicalNotesNestedInput
  }

  export type ClinicalNoteUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClinicalNoteUncheckedUpdateManyWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    treatmentPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPhaseId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    noteType?: EnumNoteTypeFieldUpdateOperationsInput | $Enums.NoteType
    tags?: ClinicalNoteUpdatetagsInput | string[]
    observations?: NullableJsonNullValueInput | InputJsonValue
    recommendations?: NullableStringFieldUpdateOperationsInput | string | null
    nextSteps?: NullableStringFieldUpdateOperationsInput | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreatmentPlanCountOutputTypeDefaultArgs instead
     */
    export type TreatmentPlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreatmentPlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreatmentPhaseCountOutputTypeDefaultArgs instead
     */
    export type TreatmentPhaseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreatmentPhaseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppointmentCountOutputTypeDefaultArgs instead
     */
    export type AppointmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppointmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PhotoDefaultArgs instead
     */
    export type PhotoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PhotoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreatmentPlanDefaultArgs instead
     */
    export type TreatmentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreatmentPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TreatmentPhaseDefaultArgs instead
     */
    export type TreatmentPhaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TreatmentPhaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClinicalNoteDefaultArgs instead
     */
    export type ClinicalNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClinicalNoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppointmentDefaultArgs instead
     */
    export type AppointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AppointmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SettingDefaultArgs instead
     */
    export type SettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SettingDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}